/*

  The MIT License (MIT)

  Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.

*/

#define filterHex3D(s_F, r_p)			\
  {						\
						\
    for(int b=0;b<p_Nq;++b;@inner(1)){		\
      for(int a=0;a<p_Nq;++a;@inner(0)){	\
	for(int k=0;k<p_Nq;++k){		\
	  dfloat res = 0;			\
	  for(int c=0;c<p_Nq;++c){		\
	    res += s_F[k][c]*r_p[c];		\
	  }					\
	  s_Fp[k][b][a] = res;			\
	}					\
      }						\
    }						\
  						\
						\
    /* raise in b */				\
    for(int k=0;k<p_Nq;++k;@inner(1)){		\
      for(int a=0;a<p_Nq;++a;@inner(0)){	\
      						\
	for(int b=0;b<p_Nq;++b){		\
	  r_p[b] = s_Fp[k][b][a];		\
	}					\
						\
	for(int j=0;j<p_Nq;++j){		\
	  dfloat res = 0;			\
	  for(int b=0;b<p_Nq;++b){		\
	    res += s_F[j][b]*r_p[b];		\
	  }					\
	  s_Fp[k][j][a] = res;			\
	}					\
      }						\
    }						\
						\
    /* raise in a */				\
    for(int k=0;k<p_Nq;++k;@inner(1)){		\
      for(int j=0;j<p_Nq;++j;@inner(0)){	\
	for(int a=0;a<p_Nq;++a){		\
	  r_p[a] = s_Fp[k][j][a];		\
	}					\
						\
	for(int i=0;i<p_Nq;++i){		\
	  dfloat res = 0;			\
	  for(int a=0;a<p_Nq;++a){		\
	    res += s_F[i][a]*r_p[a];		\
	  }					\
	  s_Fp[k][j][i] = res;			\
	}					\
      }						\
    }						\
  						\
    /* copy back to registers */		\
    for(int j=0;j<p_Nq;++j;@inner(1)){		\
      for(int i=0;i<p_Nq;++i;@inner(0)){	\
	for(int k=0;k<p_Nq;++k){		\
	  r_p[k] = s_Fp[k][j][i];		\
	}					\
      }						\
    }						\
  						\
  }						\

#define filterTransposeHex3D(s_F, r_p)		\
  {						\
						\
    /* lower in 'k' */				\
    for(int j=0;j<p_Nq;++j;@inner(1)){	\
      for(int i=0;i<p_Nq;++i;@inner(0)){	\
						\
	for(int c=0;c<p_Nq;++c){		\
	  dfloat res = 0;			\
	  for(int k=0;k<p_Nq;++k){		\
	    res += s_F[k][c]*r_p[k];		\
	  }					\
	  s_Fp[c][j][i] = res;			\
	}					\
      }						\
    }						\
						\
    /* lower in 'j' */				\
    for(int c=0;c<p_Nq;++c;@inner(1)){		\
      for(int i=0;i<p_Nq;++i;@inner(0)){	\
						\
	for(int j=0;j<p_Nq;++j){		\
	  r_p[j] = s_Fp[c][j][i];		\
	}					\
						\
	for(int b=0;b<p_Nq;++b){		\
	  dfloat res = 0;			\
	  for(int j=0;j<p_Nq;++j){		\
	    res += s_F[j][b]*r_p[j];		\
	  }					\
	  					\
	  s_Fp[c][b][i] = res;			\
	}					\
      }						\
    }						\
						\
    /* lower in 'i' */				\
    for(int c=0;c<p_Nq;++c;@inner(1)){		\
      for(int b=0;b<p_Nq;++b;@inner(0)){	\
						\
	for(int i=0;i<p_Nq;++i){		\
	  r_p[i] = s_Fp[c][b][i];		\
	}					\
						\
	for(int a=0;a<p_Nq;++a){		\
	  dfloat res = 0;			\
	  for(int i=0;i<p_Nq;++i){		\
	    res += s_F[i][a]*r_p[i];		\
	  }					\
	  					\
	  s_Fp[c][b][a] = res;			\
	}					\
      }						\
    }						\
						\
    /* copy back to registers */		\
    for(int b=0;b<p_Nq;++b;@inner(1)){		\
      for(int a=0;a<p_Nq;++a;@inner(0)){	\
	for(int c=0;c<p_Nq;++c){		\
	  r_p[c] = s_Fp[c][b][a];		\
	}					\
      }						\
    }						\
						\
  }						




@kernel void BP9_v0(const dlong Nelements,
		    @restrict const dlong *elementList,
		    const dlong offset,
		    @restrict const dfloat *vgeo,
		    @restrict const dfloat *D,
		    @restrict const dfloat *F,
		    const dfloat lambda,
		    const dfloat mu,	
		    @restrict const dfloat *q,
		    @restrict dfloat *Aq){
  
  for(dlong e=0; e<Nelements; ++e; @outer(0)){

    @shared dfloat s_Fp[p_Nq][p_Nq][p_Nq];	
    
    @shared dfloat s_D[p_Nq][p_Nq];
    @shared dfloat s_F[p_Nq][p_Nq];

    @shared dfloat s_U[p_Nq][p_Nq];
    @shared dfloat s_V[p_Nq][p_Nq];
    @shared dfloat s_W[p_Nq][p_Nq];

    @shared dfloat s_GUr[p_Nq][p_Nq];
    @shared dfloat s_GUs[p_Nq][p_Nq];
    @shared dfloat s_GVr[p_Nq][p_Nq];
    @shared dfloat s_GVs[p_Nq][p_Nq];
    @shared dfloat s_GWr[p_Nq][p_Nq];
    @shared dfloat s_GWs[p_Nq][p_Nq];

    @exclusive dfloat r_Ut, r_Vt, r_Wt;

    // heavy on registers (FP64, 2*3*8 for N=7)
    @exclusive dfloat r_U[p_Nq] , r_V[p_Nq],  r_W[p_Nq], r_p[p_Nq];
    @exclusive dfloat r_AU[p_Nq], r_AV[p_Nq], r_AW[p_Nq];

    // array of threads
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){

        s_D[j][i] = D[p_Nq*j+i]; 
	s_F[j][i] = F[p_Nq*j+i];
	
        // load pencil of u into register
        for(int k = 0; k < p_Nq; k++) {
	  const dlong base = i + j*p_Nq + k*p_Nq*p_Nq + e*p_Np;

          r_U[k] = q[base + 0*offset];
          r_V[k] = q[base + 1*offset];
          r_W[k] = q[base + 2*offset];
	  r_p[k] = q[base + 3*offset];

          r_AU[k] = 0.f; // zero the accumulator
          r_AV[k] = 0.f; // zero the accumulator
          r_AW[k] = 0.f; // zero the accumulator
        }
      }
    }

    // raise pressure degree
    filterHex3D(s_F, r_p);

    // Layer by layer
#pragma unroll p_Nq
    for(int k = 0;k < p_Nq; k++){

      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){

          // share u(:,:,k)
          s_U[j][i] = r_U[k];
          s_V[j][i] = r_V[k];
          s_W[j][i] = r_W[k];

          r_Ut = 0;
          r_Vt = 0;
          r_Wt = 0;

#pragma unroll p_Nq
          for(int m = 0; m < p_Nq; m++) {
            // 1 shared, 6 flops => 12*6/(1*8) = 9 TFLOPSs > peak
            dfloat Dkm = s_D[k][m];
            r_Ut += Dkm*r_U[m];
            r_Vt += Dkm*r_V[m];
            r_Wt += Dkm*r_W[m];
          }
        }
      }

      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){

          dfloat Ur = 0.f, Us = 0.f;
          dfloat Vr = 0.f, Vs = 0.f;
          dfloat Wr = 0.f, Ws = 0.f;

#pragma unroll p_Nq
          for(int m = 0; m < p_Nq; m++) {
            // 8 shared, 12 FLOPS => 12TB/s*12/(8*8) => 2.25TF on V100
            dfloat Dim = s_D[i][m];
            dfloat Djm = s_D[j][m];

            Ur += Dim*s_U[j][m];
            Us += Djm*s_U[m][i];

            Vr += Dim*s_V[j][m];
            Vs += Djm*s_V[m][i];

            Wr += Dim*s_W[j][m];
            Ws += Djm*s_W[m][i];
          }

	  // use raised pressure
	  const dfloat pk = r_p[k];

	  const dfloat eta_kji = mu;
	  
          // prefetch geometric factors
          const dlong gbase = e*p_Nvgeo*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;

          const dfloat rx = vgeo[gbase+p_RXID*p_Np];
          const dfloat sx = vgeo[gbase+p_SXID*p_Np];
          const dfloat tx = vgeo[gbase+p_TXID*p_Np];

          const dfloat ry = vgeo[gbase+p_RYID*p_Np];
          const dfloat sy = vgeo[gbase+p_SYID*p_Np];
          const dfloat ty = vgeo[gbase+p_TYID*p_Np];

          const dfloat rz = vgeo[gbase+p_RZID*p_Np];
          const dfloat sz = vgeo[gbase+p_SZID*p_Np];
          const dfloat tz = vgeo[gbase+p_TZID*p_Np];

          const dfloat JW = vgeo[gbase+p_JWID*p_Np];

          const dfloat G00 = (rx*rx+ry*ry+rz*rz)*JW*eta_kji;
          const dfloat G01 = (rx*sx+ry*sy+rz*sz)*JW*eta_kji;
          const dfloat G02 = (rx*tx+ry*ty+rz*tz)*JW*eta_kji;
          const dfloat G11 = (sx*sx+sy*sy+sz*sz)*JW*eta_kji;
          const dfloat G12 = (sx*tx+sy*ty+sz*tz)*JW*eta_kji;
          const dfloat G22 = (tx*tx+ty*ty+tz*tz)*JW*eta_kji;

          const dfloat JWpk = -JW*pk;

          // (grad phi, grad U - delta_x p)
          // (grad phi, grad V - delta_y p)
          // (grad phi, grad W - delta_z p)
          s_GUr[j][i] = (G00*Ur + G01*Us + G02*r_Ut) + rx*JWpk;
          s_GVr[j][i] = (G00*Vr + G01*Vs + G02*r_Vt) + ry*JWpk;
          s_GWr[j][i] = (G00*Wr + G01*Ws + G02*r_Wt) + rz*JWpk;

          s_GUs[j][i] = (G01*Ur + G11*Us + G12*r_Ut) + sx*JWpk;
          s_GVs[j][i] = (G01*Vr + G11*Vs + G12*r_Vt) + sy*JWpk;
          s_GWs[j][i] = (G01*Wr + G11*Ws + G12*r_Wt) + sz*JWpk;

          // (phi, divU)
          dfloat APk = 0;
          APk += rx*Ur + sx*Us + tx*r_Ut;
          APk += ry*Vr + sy*Vs + ty*r_Vt;
          APk += rz*Wr + sz*Ws + tz*r_Wt;

	  r_p[k] = -JW*APk;

          r_Ut = G02*Ur + G12*Us + G22*r_Ut + tx*JWpk;
          r_Vt = G02*Vr + G12*Vs + G22*r_Vt + ty*JWpk;
          r_Wt = G02*Wr + G12*Ws + G22*r_Wt + tz*JWpk;

          r_AU[k] += JW*lambda*r_U[k];
          r_AV[k] += JW*lambda*r_V[k];
          r_AW[k] += JW*lambda*r_W[k];

        }
      }

      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){

          dfloat AUtmp = 0, AVtmp = 0, AWtmp = 0;

#pragma unroll p_Nq
          for(int m = 0; m < p_Nq; m++){
            // 9 shared, 18 flops => 12TB/s*18/(9*8) = 3TFLOPS/s
            dfloat Dmi = s_D[m][i];
            dfloat Dmj = s_D[m][j];
            dfloat Dkm = s_D[k][m];

            AUtmp += Dmi*s_GUr[j][m];
            AUtmp += Dmj*s_GUs[m][i];

            AVtmp += Dmi*s_GVr[j][m];
            AVtmp += Dmj*s_GVs[m][i];

            AWtmp += Dmi*s_GWr[j][m];
            AWtmp += Dmj*s_GWs[m][i];

            r_AU[m] += Dkm*r_Ut;
            r_AV[m] += Dkm*r_Vt;
            r_AW[m] += Dkm*r_Wt;
          }

          r_AU[k] += AUtmp;
          r_AV[k] += AVtmp;
          r_AW[k] += AWtmp;
        }
      }
    }
    
    // lower pressure degree
    filterTransposeHex3D(s_F, r_p);
    
    // write out
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
#pragma unroll p_Nq
        for(int k = 0; k < p_Nq; k++){
          const dlong id = e*p_Np +k*p_Nq*p_Nq+ j*p_Nq + i;
          Aq[id+0*offset] = r_AU[k];
          Aq[id+1*offset] = r_AV[k];
          Aq[id+2*offset] = r_AW[k];
	  Aq[id+3*offset] = r_p[k];
	}
      }
    }
  }
}


@kernel void BP9Dot_v0(const dlong Nelements,
		       @restrict const dlong *elementList,
		       const dlong offset,
		       @restrict const dfloat *vgeo,
		       @restrict const dfloat *D,
		       @restrict const dfloat *F,
		       const dfloat lambda,
		       const dfloat mu,	
		       @restrict const dfloat *q,
		       @restrict dfloat *Aq,
		       @restrict dfloat *qAq){
  
  for(dlong e=0; e<Nelements; ++e; @outer(0)){

    @shared dfloat s_Fp[p_Nq][p_Nq][p_Nq];	
    
    @shared dfloat s_D[p_Nq][p_Nq];
    @shared dfloat s_F[p_Nq][p_Nq];

    @shared dfloat s_U[p_Nq][p_Nq];
    @shared dfloat s_V[p_Nq][p_Nq];
    @shared dfloat s_W[p_Nq][p_Nq];

    @shared dfloat s_GUr[p_Nq][p_Nq];
    @shared dfloat s_GUs[p_Nq][p_Nq];
    @shared dfloat s_GVr[p_Nq][p_Nq];
    @shared dfloat s_GVs[p_Nq][p_Nq];
    @shared dfloat s_GWr[p_Nq][p_Nq];
    @shared dfloat s_GWs[p_Nq][p_Nq];

    @exclusive dfloat r_Ut, r_Vt, r_Wt;

    // heavy on registers (FP64, 2*3*8 for N=7)
    @exclusive dfloat r_U[p_Nq] , r_V[p_Nq],  r_W[p_Nq], r_p[p_Nq];
    @exclusive dfloat r_AU[p_Nq], r_AV[p_Nq], r_AW[p_Nq], r_Ap[p_Nq];

    // array of threads
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){

        s_D[j][i] = D[p_Nq*j+i]; 
	s_F[j][i] = F[p_Nq*j+i];
	
        // load pencil of u into register
        for(int k = 0; k < p_Nq; k++) {
	  const dlong base = i + j*p_Nq + k*p_Nq*p_Nq + e*p_Np;

          r_U[k] = q[base + 0*offset];
          r_V[k] = q[base + 1*offset];
          r_W[k] = q[base + 2*offset];
	  r_p[k] = q[base + 3*offset];
	  r_Ap[k] = r_p[k];
	  
          r_AU[k] = 0.f; // zero the accumulator
          r_AV[k] = 0.f; // zero the accumulator
          r_AW[k] = 0.f; // zero the accumulator
        }
      }
    }

    // raise pressure degree
    filterHex3D(s_F, r_Ap);

    // Layer by layer
#pragma unroll p_Nq
    for(int k = 0;k < p_Nq; k++){

      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){

          // share u(:,:,k)
          s_U[j][i] = r_U[k];
          s_V[j][i] = r_V[k];
          s_W[j][i] = r_W[k];

          r_Ut = 0;
          r_Vt = 0;
          r_Wt = 0;

#pragma unroll p_Nq
          for(int m = 0; m < p_Nq; m++) {
            // 1 shared, 6 flops => 12*6/(1*8) = 9 TFLOPSs > peak
            dfloat Dkm = s_D[k][m];
            r_Ut += Dkm*r_U[m];
            r_Vt += Dkm*r_V[m];
            r_Wt += Dkm*r_W[m];
          }
        }
      }

      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){

          dfloat Ur = 0.f, Us = 0.f;
          dfloat Vr = 0.f, Vs = 0.f;
          dfloat Wr = 0.f, Ws = 0.f;

#pragma unroll p_Nq
          for(int m = 0; m < p_Nq; m++) {
            // 8 shared, 12 FLOPS => 12TB/s*12/(8*8) => 2.25TF on V100
            dfloat Dim = s_D[i][m];
            dfloat Djm = s_D[j][m];

            Ur += Dim*s_U[j][m];
            Us += Djm*s_U[m][i];

            Vr += Dim*s_V[j][m];
            Vs += Djm*s_V[m][i];

            Wr += Dim*s_W[j][m];
            Ws += Djm*s_W[m][i];
          }

	  // use raised pressure
	  const dfloat pk = r_Ap[k];
	  
	  const dfloat eta_kji = mu;
	  
          // prefetch geometric factors
          const dlong gbase = e*p_Nvgeo*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;

          const dfloat rx = vgeo[gbase+p_RXID*p_Np];
          const dfloat sx = vgeo[gbase+p_SXID*p_Np];
          const dfloat tx = vgeo[gbase+p_TXID*p_Np];

          const dfloat ry = vgeo[gbase+p_RYID*p_Np];
          const dfloat sy = vgeo[gbase+p_SYID*p_Np];
          const dfloat ty = vgeo[gbase+p_TYID*p_Np];

          const dfloat rz = vgeo[gbase+p_RZID*p_Np];
          const dfloat sz = vgeo[gbase+p_SZID*p_Np];
          const dfloat tz = vgeo[gbase+p_TZID*p_Np];

          const dfloat JW = vgeo[gbase+p_JWID*p_Np];

          const dfloat G00 = (rx*rx+ry*ry+rz*rz)*JW*eta_kji;
          const dfloat G01 = (rx*sx+ry*sy+rz*sz)*JW*eta_kji;
          const dfloat G02 = (rx*tx+ry*ty+rz*tz)*JW*eta_kji;
          const dfloat G11 = (sx*sx+sy*sy+sz*sz)*JW*eta_kji;
          const dfloat G12 = (sx*tx+sy*ty+sz*tz)*JW*eta_kji;
          const dfloat G22 = (tx*tx+ty*ty+tz*tz)*JW*eta_kji;

          const dfloat JWpk = -JW*pk;

          // (grad phi, grad U - delta_x p)
          // (grad phi, grad V - delta_y p)
          // (grad phi, grad W - delta_z p)
          s_GUr[j][i] = (G00*Ur + G01*Us + G02*r_Ut) + rx*JWpk;
          s_GVr[j][i] = (G00*Vr + G01*Vs + G02*r_Vt) + ry*JWpk;
          s_GWr[j][i] = (G00*Wr + G01*Ws + G02*r_Wt) + rz*JWpk;

          s_GUs[j][i] = (G01*Ur + G11*Us + G12*r_Ut) + sx*JWpk;
          s_GVs[j][i] = (G01*Vr + G11*Vs + G12*r_Vt) + sy*JWpk;
          s_GWs[j][i] = (G01*Wr + G11*Ws + G12*r_Wt) + sz*JWpk;

          // (phi, divU)
          dfloat APk = 0;
          APk += rx*Ur + sx*Us + tx*r_Ut;
          APk += ry*Vr + sy*Vs + ty*r_Vt;
          APk += rz*Wr + sz*Ws + tz*r_Wt;

	  r_Ap[k] = -JW*APk;

          r_Ut = G02*Ur + G12*Us + G22*r_Ut + tx*JWpk;
          r_Vt = G02*Vr + G12*Vs + G22*r_Vt + ty*JWpk;
          r_Wt = G02*Wr + G12*Ws + G22*r_Wt + tz*JWpk;

          r_AU[k] += JW*lambda*r_U[k];
          r_AV[k] += JW*lambda*r_V[k];
          r_AW[k] += JW*lambda*r_W[k];

        }
      }

      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){

          dfloat AUtmp = 0, AVtmp = 0, AWtmp = 0;

#pragma unroll p_Nq
          for(int m = 0; m < p_Nq; m++){
            // 9 shared, 18 flops => 12TB/s*18/(9*8) = 3TFLOPS/s
            dfloat Dmi = s_D[m][i];
            dfloat Dmj = s_D[m][j];
            dfloat Dkm = s_D[k][m];

            AUtmp += Dmi*s_GUr[j][m];
            AUtmp += Dmj*s_GUs[m][i];

            AVtmp += Dmi*s_GVr[j][m];
            AVtmp += Dmj*s_GVs[m][i];

            AWtmp += Dmi*s_GWr[j][m];
            AWtmp += Dmj*s_GWs[m][i];

            r_AU[m] += Dkm*r_Ut;
            r_AV[m] += Dkm*r_Vt;
            r_AW[m] += Dkm*r_Wt;
          }

          r_AU[k] += AUtmp;
          r_AV[k] += AVtmp;
          r_AW[k] += AWtmp;
        }
      }
    }
    
    // lower pressure degree
    filterTransposeHex3D(s_F, r_Ap);

#define p_Nthr (p_Nq*p_Nq)
#define p_Nwarps (((p_Nthr)+31)/32)
    
    @shared volatile dfloat s_warp[p_Nwarps];
    @shared volatile dfloat s_qAq[p_Nthr];
    
    // write out
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){

	dfloat r_qAq = 0;
#pragma unroll p_Nq
        for(int k = 0; k < p_Nq; k++){
          const dlong id = e*p_Np +k*p_Nq*p_Nq+ j*p_Nq + i;
          Aq[id+0*offset] = r_AU[k];
          Aq[id+1*offset] = r_AV[k];
          Aq[id+2*offset] = r_AW[k];
	  Aq[id+3*offset] = r_Ap[k];

	  r_qAq += r_U[k]*r_AU[k];
	  r_qAq += r_V[k]*r_AV[k];
	  r_qAq += r_W[k]*r_AW[k];
	  r_qAq += r_p[k]*r_Ap[k];
	  
	}
	
	s_qAq[j*p_Nq + i] = r_qAq;
      }
    }
    
    for(int j=0;j<p_Nq;++j;@inner(1)){
	for(int i=0;i<p_Nq;++i;@inner(0)){
	  
	  int r_t = j*p_Nq + i;
	  int r_n = r_t%32;
	  int r_w = r_t/32;

	  if(r_n<16 && r_t+16<p_Nthr) s_qAq[r_t] += s_qAq[r_t+16];
	  if(r_n< 8 && r_t+ 8<p_Nthr) s_qAq[r_t] += s_qAq[r_t+ 8];
	  if(r_n< 4 && r_t+ 4<p_Nthr) s_qAq[r_t] += s_qAq[r_t+ 4];
	  if(r_n< 2 && r_t+ 2<p_Nthr) s_qAq[r_t] += s_qAq[r_t+ 2];
	  if(r_n< 1 && r_t+ 1<p_Nthr) s_qAq[r_t] += s_qAq[r_t+ 1];
	  
	  if(r_n==0) s_warp[r_w] = s_qAq[r_t];
	}
    }
  
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
	
	int r_t = j*p_Nq + i;
	int r_n = r_t%32;
	int r_w = r_t/32;
	
	if(r_w==0 && r_t<p_Nwarps){
	  
	  if(r_t<16 && r_t+16<p_Nwarps) s_warp[r_t] += s_warp[r_t+16];
	  if(r_t< 8 && r_t+ 8<p_Nwarps) s_warp[r_t] += s_warp[r_t+8];
	  if(r_t< 4 && r_t+ 4<p_Nwarps) s_warp[r_t] += s_warp[r_t+4];
	  if(r_t< 2 && r_t+ 2<p_Nwarps) s_warp[r_t] += s_warp[r_t+2];
	  if(r_t< 1 && r_t+ 1<p_Nwarps) s_warp[r_t] += s_warp[r_t+1];
	  
	  if(r_t==0){
	    dfloat res = s_warp[0];
	    atomicAdd(qAq, res);
	  }
	}
      }
    }
    
  }
}




@kernel void BPfilter(const dlong Nelements,
		       const dlong offset,
		       @restrict const dfloat *F,
		       @restrict dfloat *q){
  
  for(dlong e=0; e<Nelements; ++e; @outer(0)){

    @shared dfloat s_Fp[p_Nq][p_Nq][p_Nq];	
    @shared dfloat s_F[p_Nq][p_Nq];

    @exclusive dfloat r_p[p_Nq];
    
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){

	s_F[j][i] = F[p_Nq*j+i];
	
	const dlong baseP = i + j*p_Nq + e*p_Np + 3*offset;
	for(int c = 0; c < p_Nq; c++) {
	  r_p[c] = q[baseP + c*p_Nq*p_Nq];
	}
      }
    }
    
    // raise pressure degree
    filterHex3D(s_F, r_p);

    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
	const dlong baseP = i + j*p_Nq + e*p_Np + 3*offset;
	for(int c = 0; c < p_Nq; c++) {
	  q[baseP + c*p_Nq*p_Nq] = r_p[c];
	}
      }
    }
  }
}


@kernel void BP9_v1(const dlong Nelements,
		     @restrict const dlong *elementList,
		     const dlong offset,
		     @restrict const dfloat *vgeo,
		     @restrict const dfloat *D,
		     @restrict const dfloat *F,
		     const dfloat lambda,
		     const dfloat mu,
		     @restrict const dfloat *q,
		     @restrict dfloat *Aq)
{
  for(dlong e=0; e<Nelements; ++e; @outer(0)){

    @shared dfloat s_Fp[p_Nq][p_Nq][p_Nq];	
    
    @shared dfloat s_D[p_Nq][p_Nq];
    @shared dfloat s_F[p_Nq][p_Nq];
       
    @shared dfloat s_U[p_Nq][p_Nq][p_Nq];
    @shared dfloat s_V[p_Nq][p_Nq][p_Nq];
    @shared dfloat s_W[p_Nq][p_Nq][p_Nq];

    @shared dfloat s_GUr[p_Nq][p_Nq];
    @shared dfloat s_GUs[p_Nq][p_Nq];
    @shared dfloat s_GVr[p_Nq][p_Nq];
    @shared dfloat s_GVs[p_Nq][p_Nq];
    @shared dfloat s_GWr[p_Nq][p_Nq];
    @shared dfloat s_GWs[p_Nq][p_Nq];
    
    // heavy on registers (FP64, 2*3*8 for N=7)
    @exclusive dfloat r_AU[p_Nq], r_AV[p_Nq], r_AW[p_Nq], r_p[p_Nq];

    // array of threads
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){

        s_D[j][i] = D[p_Nq*j+i]; 
	s_F[j][i] = F[p_Nq*j+i];
	
	// load pencil of u into register
	
#pragma unroll p_Nq
        for(int k = 0; k < p_Nq; k++) {
	  const dlong base = i + j*p_Nq + k*p_Nq*p_Nq + e*p_Np;

          s_U[k][j][i] = q[base + 0*offset];
          s_V[k][j][i] = q[base + 1*offset];
          s_W[k][j][i] = q[base + 2*offset];
	  r_p[k] = q[base + 3*offset];

          r_AU[k] = 0.f; // zero the accumulator
          r_AV[k] = 0.f; // zero the accumulator
          r_AW[k] = 0.f; // zero the accumulator
        }
      }
    }

    // raise pressure degree
    filterHex3D(s_F, r_p);
    
    // Layer by layer
#pragma unroll p_Nq
    for(int k = 0;k < p_Nq; k++){

      @barrier("local");

      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){

          dfloat Ur = 0.f, Us = 0.f, Ut = 0.f;
          dfloat Vr = 0.f, Vs = 0.f, Vt = 0.f;
          dfloat Wr = 0.f, Ws = 0.f, Wt = 0.f;

#pragma unroll p_Nq
          for(int m = 0; m < p_Nq; m++) {
            // 12 shared, 18 flops => 12TB*18/(12*8) = 2.25TFLOPS/s
            dfloat Dim = s_D[i][m];
            dfloat Djm = s_D[j][m];
	    dfloat Dkm = s_D[k][m];

            Ur += Dim*s_U[k][j][m];
	    Vr += Dim*s_V[k][j][m];
            Wr += Dim*s_W[k][j][m];
	    
            Us += Djm*s_U[k][m][i];
	    Vs += Djm*s_V[k][m][i];
            Ws += Djm*s_W[k][m][i];
	    
	    Ut += Dkm*s_U[m][j][i];
	    Vt += Dkm*s_V[m][j][i];
	    Wt += Dkm*s_W[m][j][i];
          }

	  const dfloat pk = r_p[k];

	  const dfloat eta_kji = mu;
	  
          // prefetch geometric factors
          const dlong gbase = e*p_Nvgeo*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;

          const dfloat rx = vgeo[gbase+p_RXID*p_Np];
          const dfloat sx = vgeo[gbase+p_SXID*p_Np];
          const dfloat tx = vgeo[gbase+p_TXID*p_Np];

          const dfloat ry = vgeo[gbase+p_RYID*p_Np];
          const dfloat sy = vgeo[gbase+p_SYID*p_Np];
          const dfloat ty = vgeo[gbase+p_TYID*p_Np];

          const dfloat rz = vgeo[gbase+p_RZID*p_Np];
          const dfloat sz = vgeo[gbase+p_SZID*p_Np];
          const dfloat tz = vgeo[gbase+p_TZID*p_Np];

          const dfloat JW = vgeo[gbase+p_JWID*p_Np];

          // (phi, divU)
          dfloat APk = 0;
          APk += rx*Ur + sx*Us + tx*Ut;
          APk += ry*Vr + sy*Vs + ty*Vt;
          APk += rz*Wr + sz*Ws + tz*Wt;

	  r_p[k] = -JW*APk;
	  
          const dfloat JWpk = -JW*pk;

          // (grad phi, grad U - delta_x p)
          // (grad phi, grad V - delta_y p)
          // (grad phi, grad W - delta_z p)
          const dfloat G00 = (rx*rx+ry*ry+rz*rz)*JW*eta_kji;
          const dfloat G01 = (rx*sx+ry*sy+rz*sz)*JW*eta_kji;
          const dfloat G02 = (rx*tx+ry*ty+rz*tz)*JW*eta_kji;
	  
          s_GUr[j][i] = (G00*Ur + G01*Us + G02*Ut) + rx*JWpk;
          s_GVr[j][i] = (G00*Vr + G01*Vs + G02*Vt) + ry*JWpk;
          s_GWr[j][i] = (G00*Wr + G01*Ws + G02*Wt) + rz*JWpk;

          const dfloat G11 = (sx*sx+sy*sy+sz*sz)*JW*eta_kji;
          const dfloat G12 = (sx*tx+sy*ty+sz*tz)*JW*eta_kji;
	  
          s_GUs[j][i] = (G01*Ur + G11*Us + G12*Ut) + sx*JWpk;
          s_GVs[j][i] = (G01*Vr + G11*Vs + G12*Vt) + sy*JWpk;
          s_GWs[j][i] = (G01*Wr + G11*Ws + G12*Wt) + sz*JWpk;

          const dfloat G22 = (tx*tx+ty*ty+tz*tz)*JW*eta_kji;
	  
          const dfloat r_Ut = G02*Ur + G12*Us + G22*Ut + tx*JWpk;
          const dfloat r_Vt = G02*Vr + G12*Vs + G22*Vt + ty*JWpk;
          const dfloat r_Wt = G02*Wr + G12*Ws + G22*Wt + tz*JWpk;
	  
#pragma unroll p_Nq
          for(int m = 0; m < p_Nq; m++){
	    dfloat Dkm = s_D[k][m];
            r_AU[m] += Dkm*r_Ut;
            r_AV[m] += Dkm*r_Vt;
            r_AW[m] += Dkm*r_Wt;
	  }
	  
          r_AU[k] += JW*lambda*s_U[k][j][i];
          r_AV[k] += JW*lambda*s_V[k][j][i];
          r_AW[k] += JW*lambda*s_W[k][j][i];	 
	  
        }
      }

      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){

          dfloat AUtmp = 0, AVtmp = 0, AWtmp = 0;

#pragma unroll p_Nq
          for(int m = 0; m < p_Nq; m++){
            // 9 shared, 18 flops => 12TB/s*18/(9*8) = 3TFLOPS/s
            dfloat Dmi = s_D[m][i];
            dfloat Dmj = s_D[m][j];	     

            AUtmp += Dmi*s_GUr[j][m];
	    AVtmp += Dmi*s_GVr[j][m];
            AWtmp += Dmi*s_GWr[j][m];
	    
            AUtmp += Dmj*s_GUs[m][i];
            AVtmp += Dmj*s_GVs[m][i];
            AWtmp += Dmj*s_GWs[m][i];
          }

          r_AU[k] += AUtmp;
          r_AV[k] += AVtmp;
          r_AW[k] += AWtmp;
        }
      }
    }

    // lower pressure degree
    filterTransposeHex3D(s_F, r_p);
    
    // write out

    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){

#pragma unroll p_Nq
        for(int k = 0; k < p_Nq; k++){
          const dlong id = e*p_Np +k*p_Nq*p_Nq+ j*p_Nq + i;
          Aq[id+0*offset] = r_AU[k];
          Aq[id+1*offset] = r_AV[k];
          Aq[id+2*offset] = r_AW[k];
        }
	
	for(int c = 0; c < p_Nq; c++){
	  const dlong id = e*p_Np +c*p_Nq*p_Nq+ j*p_Nq + i + 3*offset;
	  Aq[id] = r_p[c];
	}
      }
    }
  }
}

#define cubeThreads(c,b,a)			\
  for(int c=0;c<p_Nq;++c;@inner(2))		\
    for(int b=0;b<p_Nq;++b;@inner(1))		\
      for(int a=0;a<p_Nq;++a;@inner(0))		\

@kernel void BP9_v2(const dlong Nelements,
		     @restrict const dlong *elementList,
		     const dlong offset,
		     @restrict const dfloat *vgeo,
		     @restrict const dfloat *D,
		     @restrict const dfloat *F,
		     const dfloat lambda,
		     const dfloat mu,
		     @restrict const dfloat *q,
		     @restrict dfloat *Aq)
{
  for(dlong e=0; e<Nelements; ++e; @outer(0)){

    @shared dfloat s_D[p_Nq][p_Nq];
    @shared dfloat s_F[p_Nq][p_Nq];
       
    @shared dfloat s_U[p_Nq][p_Nq][p_Nq];
    @shared dfloat s_V[p_Nq][p_Nq][p_Nq];
    @shared dfloat s_W[p_Nq][p_Nq][p_Nq];
    @shared dfloat s_p[p_Nq][p_Nq][p_Nq];
    @shared dfloat s_Fp[p_Nq][p_Nq][p_Nq];	
    
    // heavy on registers (FP64, 2*3*8 for N=7)
    @exclusive dfloat r_AU, r_AV, r_AW, r_p;
    @exclusive dfloat r_GUr, r_GUs, r_GUt;
    @exclusive dfloat r_GVr, r_GVs, r_GVt;
    @exclusive dfloat r_GWr, r_GWs, r_GWt;
    
    // array of threads
    cubeThreads(k,j,i){

      if(k==0)
	s_D[j][i] = D[p_Nq*j+i]; 
      if(k==1)
	s_F[j][i] = F[p_Nq*j+i];
      
      // load pencil of u into register
      const dlong base = i + j*p_Nq + k*p_Nq*p_Nq + e*p_Np;
      
      s_U[k][j][i] = q[base + 0*offset];
      s_V[k][j][i] = q[base + 1*offset];
      s_W[k][j][i] = q[base + 2*offset];

      r_p = q[base + 3*offset];
      s_p[k][j][i] = r_p;
      
      r_AU = 0.f; // zero the accumulator
      r_AV = 0.f; // zero the accumulator
      r_AW = 0.f; // zero the accumulator
    }
    
    // START raise pressure degree ----------------------------------------------------------
    cubeThreads(k,b,a){				
      dfloat res = 0;
#pragma unroll p_Nq
      for(int c=0;c<p_Nq;++c){		
	res += s_F[k][c]*s_p[c][b][a];	
      }					
      s_Fp[k][b][a] = res;			
    }						
    
    cubeThreads(k,j,a){				
      dfloat res = 0;
#pragma unroll p_Nq
      for(int b=0;b<p_Nq;++b){		
	res += s_F[j][b]*s_Fp[k][b][a];	
      }					
      s_p[k][j][a] = res;			
    }						
    
    cubeThreads(k,j,i){				
      dfloat res = 0;
#pragma unroll p_Nq
      for(int a=0;a<p_Nq;++a){			
	res += s_F[i][a]*s_p[k][j][a];		
      }						
      r_p = res;			
    }
    // END raise pressure degree ----------------------------------------------------------
    
    cubeThreads(k,j,i){				

      dfloat Ur = 0.f, Us = 0.f, Ut = 0.f;
      dfloat Vr = 0.f, Vs = 0.f, Vt = 0.f;
      dfloat Wr = 0.f, Ws = 0.f, Wt = 0.f;
      
#pragma unroll p_Nq
      for(int m = 0; m < p_Nq; m++) {

	dfloat Dim = s_D[i][m];
	dfloat Djm = s_D[j][m];
	dfloat Dkm = s_D[k][m];
	
	Ur += Dim*s_U[k][j][m];
	Vr += Dim*s_V[k][j][m];
	Wr += Dim*s_W[k][j][m];
	
	Us += Djm*s_U[k][m][i];
	Vs += Djm*s_V[k][m][i];
	Ws += Djm*s_W[k][m][i];
	
	Ut += Dkm*s_U[m][j][i];
	Vt += Dkm*s_V[m][j][i];
	Wt += Dkm*s_W[m][j][i];
      }
      
      const dfloat pk = r_p;
      
      const dfloat eta_kji = mu;
      
      // prefetch geometric factors
      const dlong gbase = e*p_Nvgeo*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;
      
      const dfloat rx = vgeo[gbase+p_RXID*p_Np];
      const dfloat sx = vgeo[gbase+p_SXID*p_Np];
      const dfloat tx = vgeo[gbase+p_TXID*p_Np];
      
      const dfloat ry = vgeo[gbase+p_RYID*p_Np];
      const dfloat sy = vgeo[gbase+p_SYID*p_Np];
      const dfloat ty = vgeo[gbase+p_TYID*p_Np];
      
      const dfloat rz = vgeo[gbase+p_RZID*p_Np];
      const dfloat sz = vgeo[gbase+p_SZID*p_Np];
      const dfloat tz = vgeo[gbase+p_TZID*p_Np];
      
      const dfloat JW = vgeo[gbase+p_JWID*p_Np];

      r_AU = JW*lambda*s_U[k][j][i];
      r_AV = JW*lambda*s_V[k][j][i];
      r_AW = JW*lambda*s_W[k][j][i];	                   
      
      // (phi, divU)
      dfloat APk = 0;
      APk += rx*Ur + sx*Us + tx*Ut;
      APk += ry*Vr + sy*Vs + ty*Vt;
      APk += rz*Wr + sz*Ws + tz*Wt;
      
      s_p[k][j][i] = -JW*APk; // -div U => s_p
      
      const dfloat JWp = -JW*pk;
      
      // (grad phi, grad U - delta_x p)
      // (grad phi, grad V - delta_y p)
      // (grad phi, grad W - delta_z p)
      const dfloat G00 = (rx*rx+ry*ry+rz*rz)*JW*eta_kji;
      const dfloat G01 = (rx*sx+ry*sy+rz*sz)*JW*eta_kji;
      const dfloat G02 = (rx*tx+ry*ty+rz*tz)*JW*eta_kji;
      
      r_GUr = (G00*Ur + G01*Us + G02*Ut) + rx*JWp;
      r_GVr = (G00*Vr + G01*Vs + G02*Vt) + ry*JWp;
      r_GWr = (G00*Wr + G01*Ws + G02*Wt) + rz*JWp;

      const dfloat G11 = (sx*sx+sy*sy+sz*sz)*JW*eta_kji;
      const dfloat G12 = (sx*tx+sy*ty+sz*tz)*JW*eta_kji;
      
      r_GUs = (G01*Ur + G11*Us + G12*Ut) + sx*JWp;
      r_GVs = (G01*Vr + G11*Vs + G12*Vt) + sy*JWp;
      r_GWs = (G01*Wr + G11*Ws + G12*Wt) + sz*JWp;
      
      const dfloat G22 = (tx*tx+ty*ty+tz*tz)*JW*eta_kji;

      r_GUt = (G02*Ur + G12*Us + G22*Ut) + tx*JWp;
      r_GVt = (G02*Vr + G12*Vs + G22*Vt) + ty*JWp;
      r_GWt = (G02*Wr + G12*Ws + G22*Wt) + tz*JWp;
      
    }
    
    cubeThreads(k,j,i){
      
      s_U[k][j][i] = r_GUr;
      s_V[k][j][i] = r_GVr;
      s_W[k][j][i] = r_GWr;
    }
    
    cubeThreads(k,j,i){
      
#pragma unroll p_Nq
      for(int m = 0; m < p_Nq; m++){
	dfloat Dmi = s_D[m][i];
	r_AU += Dmi*s_U[k][j][m];
	r_AV += Dmi*s_V[k][j][m];
	r_AW += Dmi*s_W[k][j][m];
      }
    }

    cubeThreads(k,j,i){
      s_U[k][j][i] = r_GUs;
      s_V[k][j][i] = r_GVs;
      s_W[k][j][i] = r_GWs;
    }

    cubeThreads(k,j,i){
	  
#pragma unroll p_Nq
      for(int m = 0; m < p_Nq; m++){
	dfloat Dmj = s_D[m][j];
	r_AU += Dmj*s_U[k][m][i];
	r_AV += Dmj*s_V[k][m][i];
	r_AW += Dmj*s_W[k][m][i];
      }
    }
    
    cubeThreads(k,j,i){
      s_U[k][j][i] = r_GUt;
      s_V[k][j][i] = r_GVt;
      s_W[k][j][i] = r_GWt;
    }

    cubeThreads(k,j,i){
      
#pragma unroll p_Nq
      for(int m = 0; m < p_Nq; m++){
	dfloat Dmk = s_D[m][k];
	r_AU += Dmk*s_U[m][j][i];
	r_AV += Dmk*s_V[m][j][i];
	r_AW += Dmk*s_W[m][j][i];
      }
      
      const dlong id = e*p_Np +k*p_Nq*p_Nq+ j*p_Nq + i;
      Aq[id+0*offset] = r_AU;
      Aq[id+1*offset] = r_AV;
      Aq[id+2*offset] = r_AW;
      
    }
    
    // START lower pressure degree ---------------------------------------
    cubeThreads(c,j,i){				
      dfloat res = 0;
#pragma unroll p_Nq
      for(int k=0;k<p_Nq;++k){		
	res += s_F[k][c]*s_p[k][j][i];	
      }					
      s_Fp[c][j][i] = res;			
    }						
						
    cubeThreads(c,b,i){				
      dfloat res = 0;
#pragma unroll p_Nq
      for(int j=0;j<p_Nq;++j){		
	res += s_F[j][b]*s_Fp[c][j][i];	
      }					
      s_p[c][b][i] = res;			
    }						
    
    cubeThreads(c,b,a){
      dfloat res = 0;
#pragma unroll p_Nq
      for(int i=0;i<p_Nq;++i){			
	res += s_F[i][a]*s_p[c][b][i];		
      }						
      const dlong id = e*p_Np + c*p_Nq*p_Nq+ b*p_Nq + a + 3*offset;
      Aq[id] = res;
    }
  }
}


@kernel void BP9_v3(const dlong Nelements,
		     @restrict const dlong *elementList,
		     const dlong offset,
		     @restrict const dfloat *vgeo,
		     @restrict const dfloat *D,
		     @restrict const dfloat *F,
		     const dfloat lambda,
		     const dfloat mu,	
		     @restrict const dfloat *q,
		     @restrict dfloat *Aq){
  
  for(dlong e=0; e<Nelements; ++e; @outer(0)){

    @shared dfloat s_Fp[p_Nq][p_Nq][p_Nq];	
    
    @shared dfloat s_D[p_Nq][p_Nq];
    @shared dfloat s_F[p_Nq][p_Nq];

    @shared dfloat s_GUr[p_Nq][p_Nq];
    @shared dfloat s_GUs[p_Nq][p_Nq];
    @shared dfloat s_GVr[p_Nq][p_Nq];
    @shared dfloat s_GVs[p_Nq][p_Nq];
    @shared dfloat s_GWr[p_Nq][p_Nq];
    @shared dfloat s_GWs[p_Nq][p_Nq];

    @exclusive dfloat r_Ut, r_Vt, r_Wt;
    
    // heavy on registers (FP64, 2*3*8 for N=7)
    @shared dfloat s_U[p_Nq][p_Nq][p_Nq];
    @shared dfloat s_V[p_Nq][p_Nq][p_Nq];
    @shared dfloat s_W[p_Nq][p_Nq][p_Nq];
    @shared dfloat s_p[p_Nq][p_Nq][p_Nq];

    @shared dfloat s_AU[p_Nq][p_Nq][p_Nq];
    @shared dfloat s_AV[p_Nq][p_Nq][p_Nq];
    @shared dfloat s_AW[p_Nq][p_Nq][p_Nq];

    // array of threads
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){

        s_D[j][i] = D[p_Nq*j+i]; 
	s_F[j][i] = F[p_Nq*j+i];
	
        // load pencil of u into register
        for(int k = 0; k < p_Nq; k++) {
	  const dlong base = i + j*p_Nq + k*p_Nq*p_Nq + e*p_Np;
	  
          s_U[k][j][i] = q[base+ 0*offset];
          s_V[k][j][i] = q[base+ 1*offset];
          s_W[k][j][i] = q[base+ 2*offset];
	  s_p[k][j][i] = q[base+ 3*offset];
	  
          s_AU[k][j][i] = 0.f; // zero the accumulator
          s_AV[k][j][i] = 0.f; // zero the accumulator
          s_AW[k][j][i] = 0.f; // zero the accumulator
        }
      }
    }
    
    // raise pressure degree
    for(int b=0;b<p_Nq;++b;@inner(1)){		
      for(int a=0;a<p_Nq;++a;@inner(0)){	
#pragma unroll p_Nq
	for(int k=0;k<p_Nq;++k){		
	  dfloat res = 0;
#pragma unroll p_Nq
	  for(int c=0;c<p_Nq;++c){			
	    res += s_F[k][c]*s_p[c][b][a];		
	  }
	  s_Fp[k][b][a] = res;			
	}						
      }							
    }							
    
    
    /* raise in b */					
    for(int k=0;k<p_Nq;++k;@inner(1)){			
      for(int a=0;a<p_Nq;++a;@inner(0)){		
      							
#pragma unroll p_Nq
	for(int j=0;j<p_Nq;++j){				
	  dfloat res = 0;
#pragma unroll p_Nq
	  for(int b=0;b<p_Nq;++b){				
	    res += s_F[j][b]*s_Fp[k][b][a];			
	  }							
	  s_p[k][j][a] = res;				
	}					
      }						
    }						
    
    /* raise in a */				
    for(int k=0;k<p_Nq;++k;@inner(1)){		
      for(int j=0;j<p_Nq;++j;@inner(0)){
#pragma unroll p_Nq
	for(int i=0;i<p_Nq;++i){		
	  dfloat res = 0;
#pragma unroll p_Nq
	  for(int a=0;a<p_Nq;++a){		
	    res += s_F[i][a]*s_p[k][j][a];		
	  }					
	  s_Fp[k][j][i] = res;			
	}						
      }						
    }						

    // Layer by layer
#pragma unroll p_Nq
    for(int k = 0;k < p_Nq; k++){

      @barrier("local");
      
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){

          dfloat Ur = 0.f, Us = 0.f, Ut = 0.f;
          dfloat Vr = 0.f, Vs = 0.f, Vt = 0.f;
          dfloat Wr = 0.f, Ws = 0.f, Wt = 0.f;

#pragma unroll p_Nq
          for(int m = 0; m < p_Nq; m++) {
            dfloat Dim = s_D[i][m];
            dfloat Djm = s_D[j][m];
	    dfloat Dkm = s_D[k][m];
	    
            Ur += Dim*s_U[k][j][m];
            Us += Djm*s_U[k][m][i];
	    Ut += Dkm*s_U[m][j][i];

	    Vr += Dim*s_V[k][j][m];
            Vs += Djm*s_V[k][m][i];
	    Vt += Dkm*s_V[m][j][i];

	    Wr += Dim*s_W[k][j][m];
            Ws += Djm*s_W[k][m][i];
	    Wt += Dkm*s_W[m][j][i];
          }

	  // use raised pressure
	  const dfloat pk = s_Fp[k][j][i];

	  const dfloat eta_kji = mu;
	  
          // prefetch geometric factors
          const dlong gbase = e*p_Nvgeo*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;

          const dfloat rx = vgeo[gbase+p_RXID*p_Np];
          const dfloat sx = vgeo[gbase+p_SXID*p_Np];
          const dfloat tx = vgeo[gbase+p_TXID*p_Np];

          const dfloat ry = vgeo[gbase+p_RYID*p_Np];
          const dfloat sy = vgeo[gbase+p_SYID*p_Np];
          const dfloat ty = vgeo[gbase+p_TYID*p_Np];

          const dfloat rz = vgeo[gbase+p_RZID*p_Np];
          const dfloat sz = vgeo[gbase+p_SZID*p_Np];
          const dfloat tz = vgeo[gbase+p_TZID*p_Np];

          const dfloat JW = vgeo[gbase+p_JWID*p_Np];

          const dfloat G00 = (rx*rx+ry*ry+rz*rz)*JW*eta_kji;
          const dfloat G01 = (rx*sx+ry*sy+rz*sz)*JW*eta_kji;
          const dfloat G02 = (rx*tx+ry*ty+rz*tz)*JW*eta_kji;
          const dfloat G11 = (sx*sx+sy*sy+sz*sz)*JW*eta_kji;
          const dfloat G12 = (sx*tx+sy*ty+sz*tz)*JW*eta_kji;
          const dfloat G22 = (tx*tx+ty*ty+tz*tz)*JW*eta_kji;

          const dfloat JWpk = -JW*pk;

          // (grad phi, grad U - delta_x p)
          // (grad phi, grad V - delta_y p)
          // (grad phi, grad W - delta_z p)
          s_GUr[j][i] = (G00*Ur + G01*Us + G02*Ut) + rx*JWpk;
          s_GVr[j][i] = (G00*Vr + G01*Vs + G02*Vt) + ry*JWpk;
          s_GWr[j][i] = (G00*Wr + G01*Ws + G02*Wt) + rz*JWpk;

          s_GUs[j][i] = (G01*Ur + G11*Us + G12*Ut) + sx*JWpk;
          s_GVs[j][i] = (G01*Vr + G11*Vs + G12*Vt) + sy*JWpk;
          s_GWs[j][i] = (G01*Wr + G11*Ws + G12*Wt) + sz*JWpk;

          // (phi, divU)
          dfloat APk = 0;
          APk += rx*Ur + sx*Us + tx*Ut;
          APk += ry*Vr + sy*Vs + ty*Vt;
          APk += rz*Wr + sz*Ws + tz*Wt;

	  s_p[k][j][i] = -JW*APk;

          r_Ut = G02*Ur + G12*Us + G22*r_Ut + tx*JWpk;
          r_Vt = G02*Vr + G12*Vs + G22*r_Vt + ty*JWpk;
          r_Wt = G02*Wr + G12*Ws + G22*r_Wt + tz*JWpk;

          s_AU[k][j][i] += JW*lambda*s_U[k][j][i];
          s_AV[k][j][i] += JW*lambda*s_V[k][j][i];
          s_AW[k][j][i] += JW*lambda*s_W[k][j][i];

        }
      }

      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){

          dfloat AUtmp = 0, AVtmp = 0, AWtmp = 0;

#pragma unroll p_Nq
          for(int m = 0; m < p_Nq; m++){
            // 9 shared, 18 flops => 12TB/s*18/(9*8) = 3TFLOPS/s
            dfloat Dmi = s_D[m][i];
            dfloat Dmj = s_D[m][j];
            dfloat Dkm = s_D[k][m];

            AUtmp += Dmi*s_GUr[j][m];
            AUtmp += Dmj*s_GUs[m][i];

            AVtmp += Dmi*s_GVr[j][m];
            AVtmp += Dmj*s_GVs[m][i];
	    
            AWtmp += Dmi*s_GWr[j][m];
            AWtmp += Dmj*s_GWs[m][i];
	    
            s_AU[m][j][i] += Dkm*r_Ut;
            s_AV[m][j][i] += Dkm*r_Vt;
            s_AW[m][j][i] += Dkm*r_Wt;
          }
	  
          s_AU[k][j][i] += AUtmp;
          s_AV[k][j][i] += AVtmp;
          s_AW[k][j][i] += AWtmp;
        }
      }
    }
    
    // lower pressure degree
    //    sharedLowerDegreeHex3D(s_F, s_p, s_Fp);
    
    /* lower in 'k' */				
    for(int j=0;j<p_Nq;++j;@inner(1)){		
      for(int i=0;i<p_Nq;++i;@inner(0)){		

#pragma unroll p_Nq	
	for(int c=0;c<p_Nq;++c){			
	  dfloat res = 0;
#pragma unroll p_Nq
	  for(int k=0;k<p_Nq;++k){		
	    res += s_F[k][c]*s_p[k][j][i];		
	  }					
	  s_Fp[c][j][i] = res;			
	}						
      }						
    }						
						
    /* lower in 'j' */				
    for(int c=0;c<p_Nq;++c;@inner(1)){		
      for(int i=0;i<p_Nq;++i;@inner(0)){		
	
#pragma unroll p_Nq
	for(int b=0;b<p_Nq;++b){		
	  dfloat res = 0;
#pragma unroll p_Nq
	  for(int j=0;j<p_Nq;++j){		
	    res += s_F[j][b]*s_Fp[c][j][i];		
	  }					
	    
	  s_p[c][b][i] = res;			
	}						
      }						
    }						
    
    /* lower in 'i' */				
    for(int c=0;c<p_Nq;++c;@inner(1)){		
      for(int b=0;b<p_Nq;++b;@inner(0)){		
	
#pragma unroll p_Nq	  
	for(int a=0;a<p_Nq;++a){		
	  dfloat res = 0;
#pragma unroll p_Nq
	  for(int i=0;i<p_Nq;++i){		
	    res += s_F[i][a]*s_p[c][b][i];		
	  }					
	  
	  s_Fp[c][b][a] = res;			
	}						
      }						
    }						
    
    
    // write out
    
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
#pragma unroll p_Nq
        for(int k = 0; k < p_Nq; k++){
          const dlong id = e*p_Np +k*p_Nq*p_Nq+ j*p_Nq + i;
          Aq[id+0*offset] = s_AU[k][j][i];
          Aq[id+1*offset] = s_AV[k][j][i];
          Aq[id+2*offset] = s_AW[k][j][i];
	  Aq[id+3*offset] = s_Fp[k][j][i];
	}
      }
    }
  }
}


@kernel void BP9_v4(const dlong Nelements,
		     @restrict const dlong *elementList,
		     const dlong offset,
		     @restrict const dfloat *vgeo,
		     @restrict const dfloat *D,
		     @restrict const dfloat *F,
		     const dfloat lambda,
		     const dfloat mu,
		     @restrict const dfloat *q,
		     @restrict dfloat *Aq)
{
  for(dlong e=0; e<Nelements; ++e; @outer(0)){

    @shared dfloat s_D[p_Nq][p_Nq];
    @shared dfloat s_F[p_Nq][p_Nq];

    @exclusive dfloat r_OP[p_Nq];

    @shared dfloat s_U[p_Nq][p_Nq][p_Nq];
    @shared dfloat s_V[p_Nq][p_Nq][p_Nq];
    @shared dfloat s_W[p_Nq][p_Nq][p_Nq];
    @shared dfloat s_p[p_Nq][p_Nq][p_Nq];
    @shared dfloat s_Fp[p_Nq][p_Nq][p_Nq];	
    
    // heavy on registers (FP64, 2*3*8 for N=7)
    @exclusive dfloat r_AU, r_AV, r_AW, r_p;
    @exclusive dfloat r_GUr, r_GUs, r_GUt;
    @exclusive dfloat r_GVr, r_GVs, r_GVt;
    @exclusive dfloat r_GWr, r_GWs, r_GWt;
    
    // array of threads
    
    cubeThreads(k,j,i){
    
      if(k==0)
	s_D[j][i] = D[p_Nq*j+i]; 
      
      if(k==1)
	s_F[j][i] = F[p_Nq*j+i];
      
      // load pencil of u into register
      const dlong base = i + j*p_Nq + k*p_Nq*p_Nq + e*p_Np;
      
      s_U[k][j][i] = q[base + 0*offset];
      s_V[k][j][i] = q[base + 1*offset];
      s_W[k][j][i] = q[base + 2*offset];
      r_p = q[base + 3*offset];
      s_p[k][j][i] = r_p;
      
      r_AU = 0.f; // zero the accumulator
      r_AV = 0.f; // zero the accumulator
      r_AW = 0.f; // zero the accumulator
    }
    
    // START raise pressure degree ----------------------------------------------------------
    cubeThreads(k,b,a){

#pragma unroll p_Nq
      for(int n=0;n<p_Nq;++n){
	r_OP[n] = s_F[k][n];
      }
      
      dfloat res = 0;
#pragma unroll p_Nq
      for(int c=0;c<p_Nq;++c){		
	res += r_OP[c]*s_p[c][b][a];
      }					
      s_Fp[k][b][a] = res;			
#pragma unroll p_Nq
      for(int n=0;n<p_Nq;++n){
	r_OP[n] = s_F[b][n];
      }
    }						
    
    cubeThreads(k,j,a){				
      dfloat res = 0;
#pragma unroll p_Nq
      for(int b=0;b<p_Nq;++b){		
	res += r_OP[b]*s_Fp[k][b][a];
      }					
      s_p[k][j][a] = res;			

#pragma unroll p_Nq
      for(int n=0;n<p_Nq;++n){
	r_OP[n] = s_F[a][n];
      }

    }						
    
    cubeThreads(k,j,i){				
      dfloat res = 0;
#pragma unroll p_Nq
      for(int a=0;a<p_Nq;++a){			
	res += r_OP[a]*s_p[k][j][a];		
      }						
      r_p = res;			
    }
    // END raise pressure degree ----------------------------------------------------------

    cubeThreads(k,j,i){

      dfloat Ur = 0.f, Us = 0.f, Ut = 0.f;
      dfloat Vr = 0.f, Vs = 0.f, Vt = 0.f;
      dfloat Wr = 0.f, Ws = 0.f, Wt = 0.f;

#pragma unroll p_Nq
      for(int m = 0; m < p_Nq; m++) {
	dfloat Dim = s_D[i][m];
	Ur += Dim*s_U[k][j][m];
	Vr += Dim*s_V[k][j][m];
	Wr += Dim*s_W[k][j][m];
	r_OP[m] = s_D[j][m];
      }
      
#pragma unroll p_Nq
      for(int m = 0; m < p_Nq; m++) {
	dfloat Djm = r_OP[m];
	Us += Djm*s_U[k][m][i];
	Vs += Djm*s_V[k][m][i];
	Ws += Djm*s_W[k][m][i];
	r_OP[m] = s_D[k][m];
      }
      
#pragma unroll p_Nq
      for(int m = 0; m < p_Nq; m++) {
	dfloat Dkm = r_OP[m];
	Ut += Dkm*s_U[m][j][i];
	Vt += Dkm*s_V[m][j][i];
	Wt += Dkm*s_W[m][j][i];
      }
      
      const dfloat pk = r_p;
      
      const dfloat eta_kji = mu;
      
      // prefetch geometric factors
      const dlong gbase = e*p_Nvgeo*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;
      
      const dfloat rx = vgeo[gbase+p_RXID*p_Np];
      const dfloat sx = vgeo[gbase+p_SXID*p_Np];
      const dfloat tx = vgeo[gbase+p_TXID*p_Np];
      
      const dfloat ry = vgeo[gbase+p_RYID*p_Np];
      const dfloat sy = vgeo[gbase+p_SYID*p_Np];
      const dfloat ty = vgeo[gbase+p_TYID*p_Np];
      
      const dfloat rz = vgeo[gbase+p_RZID*p_Np];
      const dfloat sz = vgeo[gbase+p_SZID*p_Np];
      const dfloat tz = vgeo[gbase+p_TZID*p_Np];
      
      const dfloat JW = vgeo[gbase+p_JWID*p_Np];

      r_AU = JW*lambda*s_U[k][j][i];
      r_AV = JW*lambda*s_V[k][j][i];
      r_AW = JW*lambda*s_W[k][j][i];	                   
      
      // (phi, divU)
      dfloat APk = 0;
      APk += rx*Ur + sx*Us + tx*Ut;
      APk += ry*Vr + sy*Vs + ty*Vt;
      APk += rz*Wr + sz*Ws + tz*Wt;
      
      s_p[k][j][i] = -JW*APk; // -div U => s_p
      
      const dfloat JWp = -JW*pk;
      
      // (grad phi, grad U - delta_x p)
      // (grad phi, grad V - delta_y p)
      // (grad phi, grad W - delta_z p)
      const dfloat G00 = (rx*rx+ry*ry+rz*rz)*JW*eta_kji;
      const dfloat G01 = (rx*sx+ry*sy+rz*sz)*JW*eta_kji;
      const dfloat G02 = (rx*tx+ry*ty+rz*tz)*JW*eta_kji;
      
      r_GUr = (G00*Ur + G01*Us + G02*Ut) + rx*JWp;
      r_GVr = (G00*Vr + G01*Vs + G02*Vt) + ry*JWp;
      r_GWr = (G00*Wr + G01*Ws + G02*Wt) + rz*JWp;

      const dfloat G11 = (sx*sx+sy*sy+sz*sz)*JW*eta_kji;
      const dfloat G12 = (sx*tx+sy*ty+sz*tz)*JW*eta_kji;
      
      r_GUs = (G01*Ur + G11*Us + G12*Ut) + sx*JWp;
      r_GVs = (G01*Vr + G11*Vs + G12*Vt) + sy*JWp;
      r_GWs = (G01*Wr + G11*Ws + G12*Wt) + sz*JWp;
      
      const dfloat G22 = (tx*tx+ty*ty+tz*tz)*JW*eta_kji;

      r_GUt = (G02*Ur + G12*Us + G22*Ut) + tx*JWp;
      r_GVt = (G02*Vr + G12*Vs + G22*Vt) + ty*JWp;
      r_GWt = (G02*Wr + G12*Ws + G22*Wt) + tz*JWp;
      
    }

    cubeThreads(k,j,i){    
     
      s_U[k][j][i] = r_GUr;
      s_V[k][j][i] = r_GVr;
      s_W[k][j][i] = r_GWr;

      for(int n=0;n<p_Nq;++n){
	r_OP[n] = s_D[n][i];
      }
    }
    
    cubeThreads(k,j,i){
      
#pragma unroll p_Nq
      for(int m = 0; m < p_Nq; m++){
	//	dfloat Dmi = s_D[m][i]; // r_Ii[m];
	dfloat Dmi = r_OP[m];
	r_AU += Dmi*s_U[k][j][m];
	r_AV += Dmi*s_V[k][j][m];
	r_AW += Dmi*s_W[k][j][m];
      }
    }

    cubeThreads(k,j,i){
      s_U[k][j][i] = r_GUs;
      s_V[k][j][i] = r_GVs;
      s_W[k][j][i] = r_GWs;

      for(int n=0;n<p_Nq;++n){
	r_OP[n] = s_D[n][j];
      }
    }

    cubeThreads(k,j,i){
	  
#pragma unroll p_Nq
      for(int m = 0; m < p_Nq; m++){
	//	dfloat Dmj = s_D[m][j]; //r_Ij[m];
	dfloat Dmj = r_OP[m];
	r_AU += Dmj*s_U[k][m][i];
	r_AV += Dmj*s_V[k][m][i];
	r_AW += Dmj*s_W[k][m][i];
      }
    }
    
    cubeThreads(k,j,i){
      s_U[k][j][i] = r_GUt;
      s_V[k][j][i] = r_GVt;
      s_W[k][j][i] = r_GWt;

      for(int n=0;n<p_Nq;++n){
	r_OP[n] = s_D[n][k];
      }
    }

    cubeThreads(k,j,i){
      
#pragma unroll p_Nq
      for(int m = 0; m < p_Nq; m++){
	dfloat Dmk = r_OP[m];
	r_AU += Dmk*s_U[m][j][i];
	r_AV += Dmk*s_V[m][j][i];
	r_AW += Dmk*s_W[m][j][i];
      }
      
      const dlong id = e*p_Np +k*p_Nq*p_Nq+ j*p_Nq + i;
      Aq[id+0*offset] = r_AU;
      Aq[id+1*offset] = r_AV;
      Aq[id+2*offset] = r_AW;

      for(int n=0;n<p_Nq;++n){
	r_OP[n] = s_F[n][i];
      }
    }
  
       // START lower pressure degree ---------------------------------------
    cubeThreads(c,j,i){
      
      dfloat res = 0;
#pragma unroll p_Nq
      for(int k=0;k<p_Nq;++k){
	//	dfloat Ikc = s_F[k][c]; // r_Ik[k]; // s_F[k][c]
	res += r_OP[k]*s_p[k][j][i];	
      }					
      s_Fp[c][j][i] = res;
      
      for(int n=0;n<p_Nq;++n){
	r_OP[n] = s_F[n][j];
      }						
    }
    cubeThreads(c,b,i){				
      dfloat res = 0;
#pragma unroll p_Nq
      for(int j=0;j<p_Nq;++j){
	res += r_OP[j]*s_Fp[c][j][i];	
      }					
      
      s_p[c][b][i] = res;
      
      for(int n=0;n<p_Nq;++n){
	r_OP[n] = s_F[n][i];
      }
    }						
    
    cubeThreads(c,b,a){
      dfloat res = 0;
#pragma unroll p_Nq
      for(int i=0;i<p_Nq;++i){
	res += r_OP[i]*s_p[c][b][i];		
      }						
      const dlong id = e*p_Np + c*p_Nq*p_Nq+ b*p_Nq + a + 3*offset;
      Aq[id] = res;
    }
  }
}

#if 1

@kernel void BP9_v5(const dlong Nelements,
		     @restrict const dlong *elementList,
		     const dlong offset,
		     @restrict const dfloat *vgeo,
		     @restrict const dfloat *D,
		     @restrict const dfloat *F,
		     const dfloat lambda,
		     const dfloat mu,	
		     @restrict const dfloat *q,
		     @restrict dfloat *Aq){
  
  for(dlong e=0; e<Nelements; ++e; @outer(0)){

    @shared dfloat s_Fp[p_Nq][p_Nq][p_Nq];	
    
    @shared dfloat s_D[p_Nq][p_Nq];
    @shared dfloat s_F[p_Nq][p_Nq];

    @shared dfloat s_GUr[p_Nq][p_Nq];
    @shared dfloat s_GUs[p_Nq][p_Nq];
    @shared dfloat s_GVr[p_Nq][p_Nq];
    @shared dfloat s_GVs[p_Nq][p_Nq];
    @shared dfloat s_GWr[p_Nq][p_Nq];
    @shared dfloat s_GWs[p_Nq][p_Nq];

    @exclusive dfloat r_Ut, r_Vt, r_Wt;
    
    // heavy on registers (FP64, 2*3*8 for N=7)
    @shared dfloat s_U[p_Nq][p_Nq][p_Nq];
    @shared dfloat s_V[p_Nq][p_Nq][p_Nq];
    @shared dfloat s_W[p_Nq][p_Nq][p_Nq];
    @shared dfloat s_p[p_Nq][p_Nq][p_Nq];

    @shared dfloat s_AU[p_Nq][p_Nq][p_Nq];
    @shared dfloat s_AV[p_Nq][p_Nq][p_Nq];
    @shared dfloat s_AW[p_Nq][p_Nq][p_Nq];

    @exclusive dfloat r_OPi[p_Nq];
    @exclusive dfloat r_OPj[p_Nq];
    
    // array of threads
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){

	s_D[j][i] = D[p_Nq*j+i]; 
	s_F[j][i] = F[p_Nq*j+i];
	
	// load pencil of u into register
	for(int k = 0; k < p_Nq; k++) {
	  const dlong base = i + j*p_Nq + k*p_Nq*p_Nq + e*p_Np;

	  s_U[k][j][i] = q[base + 0*offset];
	  s_V[k][j][i] = q[base + 1*offset];
	  s_W[k][j][i] = q[base + 2*offset];
	  s_p[k][j][i] = q[base + 3*offset];

	  s_AU[k][j][i] = 0.f; // zero the accumulator
	  s_AV[k][j][i] = 0.f; // zero the accumulator
	  s_AW[k][j][i] = 0.f; // zero the accumulator
	}
      }
    }
    
   // raise pressure degree
    for(int b=0;b<p_Nq;++b;@inner(1)){		
      for(int a=0;a<p_Nq;++a;@inner(0)){	
#pragma unroll p_Nq
	for(int k=0;k<p_Nq;++k){		
	  dfloat res = 0;
#pragma unroll p_Nq
	  for(int c=0;c<p_Nq;++c){			
	    res += s_F[k][c]*s_p[c][b][a];		
	  }
	  s_Fp[k][b][a] = res;			
	}						
      }						
    }							

    
    /* raise in b */					
    for(int k=0;k<p_Nq;++k;@inner(1)){			
      for(int a=0;a<p_Nq;++a;@inner(0)){		
      							
#pragma unroll p_Nq
	for(int j=0;j<p_Nq;++j){				
	  dfloat res = 0;
#pragma unroll p_Nq
	  for(int b=0;b<p_Nq;++b){				
	    res += s_F[j][b]*s_Fp[k][b][a];			
	  }							
	  s_p[k][j][a] = res;				
	}					
      }						
    }						
    
    /* raise in a */				
    for(int k=0;k<p_Nq;++k;@inner(1)){		
      for(int j=0;j<p_Nq;++j;@inner(0)){
#pragma unroll p_Nq
	for(int i=0;i<p_Nq;++i){		
	  dfloat res = 0;
#pragma unroll p_Nq
	  for(int a=0;a<p_Nq;++a){		
	    res += s_F[i][a]*s_p[k][j][a];		
	  }					
	  s_Fp[k][j][i] = res;			
	}						
      }						
    }						

    for(int j=0;j<p_Nq;++j;@inner(1))
      for(int i=0;i<p_Nq;++i;@inner(0)){
#pragma unroll p_Nq
	for(int n=0;n<p_Nq;++n){
	  r_OPi[n] = s_D[i][n];
	  r_OPj[n] = s_D[j][n];
	}
      }
    
    // Layer by layer
#pragma unroll p_Nq
    for(int k = 0;k < p_Nq; k++){

      @barrier("local");
      
      for(int j=0;j<p_Nq;++j;@inner(1)){
	for(int i=0;i<p_Nq;++i;@inner(0)){
	  
	  dfloat Ur = 0.f, Us = 0.f, Ut = 0.f;
	  dfloat Vr = 0.f, Vs = 0.f, Vt = 0.f;
	  dfloat Wr = 0.f, Ws = 0.f, Wt = 0.f;

#pragma unroll p_Nq
	  for(int m = 0; m < p_Nq; m++) {
	    dfloat Dkm = s_D[k][m];
	    dfloat Dim = r_OPi[m];
	    dfloat Djm = r_OPj[m];

	    Ur += Dim*s_U[k][j][m];
	    Vr += Dim*s_V[k][j][m];
	    Wr += Dim*s_W[k][j][m];

	    Us += Djm*s_U[k][m][i];
	    Vs += Djm*s_V[k][m][i];
	    Ws += Djm*s_W[k][m][i];

	    Ut += Dkm*s_U[m][j][i];
	    Vt += Dkm*s_V[m][j][i];
	    Wt += Dkm*s_W[m][j][i];
	  }

	  // use raised pressure
	  const dfloat pk = s_Fp[k][j][i];

	  const dfloat eta_kji = mu;
	  
	  // prefetch geometric factors
	  const dlong gbase = e*p_Nvgeo*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;

	  const dfloat rx = vgeo[gbase+p_RXID*p_Np];
	  const dfloat sx = vgeo[gbase+p_SXID*p_Np];
	  const dfloat tx = vgeo[gbase+p_TXID*p_Np];

	  const dfloat ry = vgeo[gbase+p_RYID*p_Np];
	  const dfloat sy = vgeo[gbase+p_SYID*p_Np];
	  const dfloat ty = vgeo[gbase+p_TYID*p_Np];

	  const dfloat rz = vgeo[gbase+p_RZID*p_Np];
	  const dfloat sz = vgeo[gbase+p_SZID*p_Np];
	  const dfloat tz = vgeo[gbase+p_TZID*p_Np];

	  const dfloat JW = vgeo[gbase+p_JWID*p_Np];

	  const dfloat G00 = (rx*rx+ry*ry+rz*rz)*JW*eta_kji;
	  const dfloat G01 = (rx*sx+ry*sy+rz*sz)*JW*eta_kji;
	  const dfloat G02 = (rx*tx+ry*ty+rz*tz)*JW*eta_kji;
	  const dfloat G11 = (sx*sx+sy*sy+sz*sz)*JW*eta_kji;
	  const dfloat G12 = (sx*tx+sy*ty+sz*tz)*JW*eta_kji;
	  const dfloat G22 = (tx*tx+ty*ty+tz*tz)*JW*eta_kji;

	  const dfloat JWpk = -JW*pk;

	  // (grad phi, grad U - delta_x p)
	  // (grad phi, grad V - delta_y p)
	  // (grad phi, grad W - delta_z p)
	  s_GUr[j][i] = (G00*Ur + G01*Us + G02*Ut) + rx*JWpk;
	  s_GVr[j][i] = (G00*Vr + G01*Vs + G02*Vt) + ry*JWpk;
	  s_GWr[j][i] = (G00*Wr + G01*Ws + G02*Wt) + rz*JWpk;

	  s_GUs[j][i] = (G01*Ur + G11*Us + G12*Ut) + sx*JWpk;
	  s_GVs[j][i] = (G01*Vr + G11*Vs + G12*Vt) + sy*JWpk;
	  s_GWs[j][i] = (G01*Wr + G11*Ws + G12*Wt) + sz*JWpk;

	  // (phi, divU)
	  dfloat APk = 0;
	  APk += rx*Ur + sx*Us + tx*Ut;
	  APk += ry*Vr + sy*Vs + ty*Vt;
	  APk += rz*Wr + sz*Ws + tz*Wt;

	  s_p[k][j][i] = -JW*APk;

	  r_Ut = G02*Ur + G12*Us + G22*r_Ut + tx*JWpk;
	  r_Vt = G02*Vr + G12*Vs + G22*r_Vt + ty*JWpk;
	  r_Wt = G02*Wr + G12*Ws + G22*r_Wt + tz*JWpk;

	  s_AU[k][j][i] += JW*lambda*s_U[k][j][i];
	  s_AV[k][j][i] += JW*lambda*s_V[k][j][i];
	  s_AW[k][j][i] += JW*lambda*s_W[k][j][i];

	}
      }

      for(int j=0;j<p_Nq;++j;@inner(1)){
	for(int i=0;i<p_Nq;++i;@inner(0)){

	  dfloat AUtmp = 0, AVtmp = 0, AWtmp = 0;

#pragma unroll p_Nq
	  for(int m = 0; m < p_Nq; m++){
	    // 9 shared, 18 flops => 12TB/s*18/(9*8) = 3TFLOPS/s
	    dfloat Dmi = s_D[m][i];
	    dfloat Dmj = s_D[m][j];
	    dfloat Dkm = s_D[k][m];

	    AUtmp += Dmi*s_GUr[j][m];
	    AUtmp += Dmj*s_GUs[m][i];
	    
	    AVtmp += Dmi*s_GVr[j][m];
	    AVtmp += Dmj*s_GVs[m][i];
	    
	    AWtmp += Dmi*s_GWr[j][m];
	    AWtmp += Dmj*s_GWs[m][i];
	    
	    s_AU[m][j][i] += Dkm*r_Ut;
	    s_AV[m][j][i] += Dkm*r_Vt;
	    s_AW[m][j][i] += Dkm*r_Wt;
	  }
	  
	  s_AU[k][j][i] += AUtmp;
	  s_AV[k][j][i] += AVtmp;
	  s_AW[k][j][i] += AWtmp;
	}
      }
    }
    
    // lower pressure degree
    //    sharedLowerDegreeHex3D(s_F, s_p, s_Fp);
    
    /* lower in 'k' */				
    for(int j=0;j<p_Nq;++j;@inner(1)){		
      for(int i=0;i<p_Nq;++i;@inner(0)){		

#pragma unroll p_Nq	
	for(int c=0;c<p_Nq;++c){			
	  dfloat res = 0;
#pragma unroll p_Nq
	  for(int k=0;k<p_Nq;++k){		
	    res += s_F[k][c]*s_p[k][j][i];		
	  }					
	  s_Fp[c][j][i] = res;			
	}						
      }						
    }						
						
    /* lower in 'j' */				
    for(int c=0;c<p_Nq;++c;@inner(1)){		
      for(int i=0;i<p_Nq;++i;@inner(0)){		
	
#pragma unroll p_Nq
	for(int b=0;b<p_Nq;++b){		
	  dfloat res = 0;
#pragma unroll p_Nq
	  for(int j=0;j<p_Nq;++j){		
	    res += s_F[j][b]*s_Fp[c][j][i];		
	  }					
	    
	  s_p[c][b][i] = res;			
	}					
      }						
    }						
  
    /* lower in 'i' */				
    for(int c=0;c<p_Nq;++c;@inner(1)){		
      for(int b=0;b<p_Nq;++b;@inner(0)){		
	
#pragma unroll p_Nq	  
	for(int a=0;a<p_Nq;++a){		
	  dfloat res = 0;
#pragma unroll p_Nq
	  for(int i=0;i<p_Nq;++i){		
	    res += s_F[i][a]*s_p[c][b][i];		
	  }					
	  
	  s_Fp[c][b][a] = res;			
	}					
      }						
    }						
    
    
    // write out
    
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
#pragma unroll p_Nq
	for(int k = 0; k < p_Nq; k++){
	  const dlong id = e*p_Np +k*p_Nq*p_Nq+ j*p_Nq + i;
	  Aq[id+0*offset] = s_AU[k][j][i];
	  Aq[id+1*offset] = s_AV[k][j][i];
	  Aq[id+2*offset] = s_AW[k][j][i];
	  Aq[id+3*offset] = s_Fp[k][j][i];
	}
      }
    }
  }
}


#endif


@kernel void BP9_v6(const dlong Nelements,
		    @restrict const dlong *elementList,
		    const dlong offset,
		    @restrict const dfloat *vgeo,
		    @restrict const dfloat *D,
		    @restrict const dfloat *F,
		    const dfloat lambda,
		    const dfloat mu,	
		    @restrict const dfloat *q,
		    @restrict dfloat *Aq){
  
  for(int e=0;e<Nelements;++e;@outer(0)){
    
    @shared dfloat s_D[p_Nq][p_Nq];
    @shared dfloat s_F[p_Nq][p_Nq];
    @shared dfloat s_U[p_Nq][p_Nq][p_Nq];
    @shared dfloat s_V[p_Nq][p_Nq][p_Nq];
    @shared dfloat s_W[p_Nq][p_Nq][p_Nq];
    
    @exclusive dfloat r_AU, r_GUr, r_GUs, r_GUt;
    @exclusive dfloat r_AV, r_GVr, r_GVs, r_GVt;
    @exclusive dfloat r_AW, r_GWr, r_GWs, r_GWt, r_p;

    @exclusive dlong element;
    
    cubeThreads(k,j,i){
	  
      if(k==0){
	s_D[j][i] = D[j*p_Nq+i];
      	s_F[j][i] = F[p_Nq*j+i];
      }
      
      element = elementList[e];
      
      int id = i + j*p_Nq + k*p_Nq*p_Nq + element*p_Np;
      s_U[k][j][i] = q[id+3*offset];
    }

    // START raise pressure degree ----------------------------------------------------------
    cubeThreads(k,b,a){
      dfloat res = 0;
#pragma unroll p_Nq
      for(int c=0;c<p_Nq;++c){		
	res += s_F[k][c]*s_U[c][b][a];
      }					
      s_V[k][b][a] = res;		
    }						
    
    cubeThreads(k,j,a){				
      dfloat res = 0;
#pragma unroll p_Nq
      for(int b=0;b<p_Nq;++b){		
	res += s_F[j][b]*s_V[k][b][a];
      }					
      s_W[k][j][a] = res;			
    }						
    
    cubeThreads(k,j,i){				
      dfloat res = 0;
#pragma unroll p_Nq
      for(int a=0;a<p_Nq;++a){			
	res += s_F[i][a]*s_W[k][j][a];		
      }						
      r_p = res;
    }
    // END raise pressure degree ----------------------------------------------------------
    
    cubeThreads(k,j,i){
      int id = i + j*p_Nq + k*p_Nq*p_Nq + element*p_Np;
      s_U[k][j][i] = q[id+0*offset];
      s_V[k][j][i] = q[id+1*offset];
      s_W[k][j][i] = q[id+2*offset];
    }

    cubeThreads(k,j,i){

      // prefetch geometric factors
      const dlong gbase = e*p_Nvgeo*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;
      const dfloat GWJ = vgeo[gbase+p_JWID*p_Np];

      dfloat Ur = 0.f, Vr = 0.f, Wr = 0.f;
      dfloat Us = 0.f, Vs = 0.f, Ws = 0.f;
      dfloat Ut = 0.f, Vt = 0.f, Wt = 0.f;

      r_AU = GWJ*lambda*s_U[k][j][i];
      r_AV = GWJ*lambda*s_V[k][j][i];
      r_AW = GWJ*lambda*s_W[k][j][i];
      
#pragma nounroll
      for(int m = 0; m < p_Nq; m++) {
	dfloat Dim = s_D[i][m];
	dfloat Djm = s_D[j][m];
	dfloat Dkm = s_D[k][m];
	
	Ur += Dim*s_U[k][j][m];
	Vr += Dim*s_V[k][j][m];
	Wr += Dim*s_W[k][j][m];

	Us += Djm*s_U[k][m][i];
	Vs += Djm*s_V[k][m][i];
	Ws += Djm*s_W[k][m][i];

	Ut += Dkm*s_U[m][j][i];
	Vt += Dkm*s_V[m][j][i];
	Wt += Dkm*s_W[m][j][i];
      }

      const dfloat rx = vgeo[gbase+p_RXID*p_Np];
      const dfloat sx = vgeo[gbase+p_SXID*p_Np];
      const dfloat tx = vgeo[gbase+p_TXID*p_Np];
      
      const dfloat ry = vgeo[gbase+p_RYID*p_Np];
      const dfloat sy = vgeo[gbase+p_SYID*p_Np];
      const dfloat ty = vgeo[gbase+p_TYID*p_Np];
      
      const dfloat rz = vgeo[gbase+p_RZID*p_Np];
      const dfloat sz = vgeo[gbase+p_SZID*p_Np];
      const dfloat tz = vgeo[gbase+p_TZID*p_Np];

      dfloat divU = 0;
      divU += rx*Ur + sx*Us + tx*Ut;
      divU += ry*Vr + sy*Vs + ty*Vt;
      divU += rz*Wr + sz*Ws + tz*Wt;

      const dfloat JWp = -GWJ*r_p;
      r_p = -GWJ*divU; // -div U => s_p
      
      const dfloat G00 = (rx*rx+ry*ry+rz*rz)*GWJ;
      const dfloat G01 = (rx*sx+ry*sy+rz*sz)*GWJ;
      const dfloat G02 = (rx*tx+ry*ty+rz*tz)*GWJ;
      const dfloat G11 = (sx*sx+sy*sy+sz*sz)*GWJ;
      const dfloat G12 = (sx*tx+sy*ty+sz*tz)*GWJ;
      const dfloat G22 = (tx*tx+ty*ty+tz*tz)*GWJ;
      
      r_GUr = mu*(G00*Ur + G01*Us + G02*Ut) + rx*JWp;
      r_GUs = mu*(G01*Ur + G11*Us + G12*Ut) + sx*JWp;
      r_GUt = mu*(G02*Ur + G12*Us + G22*Ut) + tx*JWp;

      r_GVr = mu*(G00*Vr + G01*Vs + G02*Vt) + ry*JWp;
      r_GVs = mu*(G01*Vr + G11*Vs + G12*Vt) + sy*JWp;
      r_GVt = mu*(G02*Vr + G12*Vs + G22*Vt) + ty*JWp;

      r_GWr = mu*(G00*Wr + G01*Ws + G02*Wt) + rz*JWp;
      r_GWs = mu*(G01*Wr + G11*Ws + G12*Wt) + sz*JWp;
      r_GWt = mu*(G02*Wr + G12*Ws + G22*Wt) + tz*JWp;
    }
    
    // START lower pressure degree ---------------------------------------
    
    cubeThreads(k,j,i){
      s_U[k][j][i] = r_p;
    }

    cubeThreads(c,j,i){
      dfloat res = 0;
#pragma unroll p_Nq
      for(int k=0;k<p_Nq;++k){
	res += s_F[k][c]*s_U[k][j][i];	
      }					
      s_V[c][j][i] = res;
    }

    cubeThreads(c,b,i){				
      dfloat res = 0;
#pragma unroll p_Nq
      for(int j=0;j<p_Nq;++j){
	res += s_F[j][b]*s_V[c][j][i];	
      }					
      s_W[c][b][i] = res;
    }						
    
    cubeThreads(c,b,a){
      dfloat res = 0;
#pragma unroll p_Nq
      for(int i=0;i<p_Nq;++i){
	res += s_F[i][a]*s_W[c][b][i];		
      }
      int id = a + b*p_Nq + c*p_Nq*p_Nq + element*p_Np;
      Aq[id+3*offset] = res;
    }
    
    cubeThreads(k,j,i){
      s_U[k][j][i] = r_GUr;
      s_V[k][j][i] = r_GVr;
      s_W[k][j][i] = r_GWr;
    }
    
    cubeThreads(k,j,i){
#pragma unroll p_Nq
      for(int m = 0; m < p_Nq; m++){
	dfloat Dmi = s_D[m][i];
	r_AU += Dmi*s_U[k][j][m];
	r_AV += Dmi*s_V[k][j][m];
	r_AW += Dmi*s_W[k][j][m];
      }
    }

    cubeThreads(k,j,i){
      s_U[k][j][i] = r_GUs;
      s_V[k][j][i] = r_GVs;
      s_W[k][j][i] = r_GWs;
    }
    
    cubeThreads(k,j,i){
#pragma unroll p_Nq
      for(int m = 0; m < p_Nq; m++){
	dfloat Dmj = s_D[m][j];
	r_AU += Dmj*s_U[k][m][i];
	r_AV += Dmj*s_V[k][m][i];
	r_AW += Dmj*s_W[k][m][i];
      }
    }
    
    cubeThreads(k,j,i){
      s_U[k][j][i] = r_GUt;
      s_V[k][j][i] = r_GVt;
      s_W[k][j][i] = r_GWt;
    }
    
    cubeThreads(k,j,i){
#pragma unroll p_Nq
      for(int m = 0; m < p_Nq; m++){
	dfloat Dmk = s_D[m][k];
	r_AU += Dmk*s_U[m][j][i];
	r_AV += Dmk*s_V[m][j][i];
	r_AW += Dmk*s_W[m][j][i];
      }
      
     int id = i + j*p_Nq + k*p_Nq*p_Nq + element*p_Np;
      Aq[id+0*offset] = r_AU;
      Aq[id+1*offset] = r_AV;
      Aq[id+2*offset] = r_AW;
      Aq[id+3*offset] = r_p;
      
    }
  }
}


