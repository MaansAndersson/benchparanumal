/*

  The MIT License (MIT)

  Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.

*/

@kernel void BP10Global_v0(const dlong Nelements,
		    @restrict const dlong *elementList,
		     @restrict const dlong *localizedIds,
		    @restrict const dfloat *ggeo,
		    @restrict const dfloat *I,
		    @restrict const dfloat *q,
		    @restrict dfloat *Aq){
  		    
  for(dlong e=0; e<Nelements; ++e; @outer(0)){
    
    @shared dfloat s_Iq[p_cubNq][p_cubNq][p_cubNq];	
    @shared dfloat s_qTet[p_NpTet];
    
    @exclusive dlong element;
    
    // array of threads
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
	
	element = elementList[e];
	// load pencil of u into register
	int n=i+j*p_cubNq;

	while(n<p_NpTet){
	  const dlong id = element*p_Np + n;
	    dlong localId = localizedIds[id]-1;
	    s_qTet[n] = q[localId]; // note cube spacing of tet data
	  n+=p_cubNq*p_cubNq;
	}
      }
    }

    for(int j=0;j<p_cubNq;++j;@inner(1)){		
      for(int i=0;i<p_cubNq;++i;@inner(0)){

#pragma unroll p_cubNq
	for(int k=0;k<p_cubNq;++k){			
	  dfloat res = 0;				
	  int m = i + j*p_cubNq + k*p_cubNq*p_cubNq;

#pragma unroll p_NpTet
	  for(int n=0;n<p_NpTet;++n){			
	    res += I[m+p_cubNp*n+p_cubNp*p_Np]*s_qTet[n];
	  }

	  // prefetch geometric factors
	  const dlong gbase = element*p_Nggeo*p_cubNp + k*p_cubNq*p_cubNq + j*p_cubNq + i;
	  const dfloat GWJ = ggeo[gbase+p_GWJID*p_cubNp];
	  s_Iq[k][j][i] = GWJ*res;
	}						
      }							
    }							

    for(int j=0;j<p_cubNq;++j;@inner(1)){			
      for(int i=0;i<p_cubNq;++i;@inner(0)){			
	int n = i+j*p_cubNq;					
	while(n<p_NpTet){					
	  dfloat res = 0;					
	  for(int m=0;m<p_cubNp;++m){				
	     res += I[m*p_NpTet+n]*s_Iq[0][0][m]; // need IT			
	  }							
	  s_qTet[n] = res;					
	  n += (p_cubNq*p_cubNq);				
	}							
      }								
    }								
    
    // write out
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
	
	int n=i+j*p_cubNq;

	while(n<p_NpTet){
	  const dlong id = element*p_NpTet + n;
	  //	  Aq[id] = s_qTet[n];
	  dlong localId = localizedIds[id]-1;
	  dfloat res = s_qTet[n];
	  atomicAdd(Aq+localId, res); // atomic assumes Aq zerod
	  
	  n+=p_cubNq*p_cubNq;
	}
      }
    }
  }
}


@kernel void BP10Global_v1(const dlong Nelements,
		    @restrict const dlong *elementList,
		     @restrict const dlong *localizedIds,
		    @restrict const dfloat *ggeo,
		    @restrict const dfloat *I,
		    @restrict const dfloat *q,
		    @restrict dfloat *Aq){
  		    
  for(dlong e=0; e<Nelements; ++e; @outer(0)){
    
    @shared dfloat s_Iq[p_cubNp];
    @shared dfloat s_qTet[p_NpTet];
    
    @exclusive dlong element;
    
    // array of threads
    for(int n=0;n<p_cubNp;++n;@inner(0)){
      element = elementList[e];
      if(n<p_NpTet){
	//	s_qTet[n] = q[n+element*p_NpTet]; // note cube spacing of tet data
	const dlong id = element*p_Np + n;
	dlong localId = localizedIds[id]-1;
	s_qTet[n] = q[localId];
      
      }
    }

    for(int n=0;n<p_cubNp;++n;@inner(0)){
      dfloat res = 0;				

#pragma unroll p_NpTet
      for(int m=0;m<p_NpTet;++m){			
	//	res += I[n+m*p_cubNp]*s_qTet[m]; // switch to column major
	res += I[n+m*p_cubNp+p_cubNp*p_Np]*s_qTet[m]; // switch to column major		
      }

      const dlong gbase = element*p_Nggeo*p_cubNp + n;
      const dfloat GWJ = ggeo[gbase+p_GWJID*p_cubNp];
      s_Iq[n] = GWJ*res;
    }							

    for(int n=0;n<p_cubNp;++n;@inner(0)){
      if(n<p_NpTet){					
	dfloat res = 0;					

#pragma unroll p_cubNp
	for(int m=0;m<p_cubNp;++m){				
	  res += I[m*p_NpTet+n]*s_Iq[m]; // need IT			
	}
	
	const dlong id = element*p_NpTet + n;
	//	Aq[id] = res;

	dlong localId = localizedIds[id]-1;
	atomicAdd(Aq+localId, res); // atomic assumes Aq zerod
	
      }
    }
  }
}

#if p_Nq<=5
#define p_Kblk 8
#else
#define p_Kblk 8
#endif

@kernel void BP10Global_v2(const dlong Nelements,
		    @restrict const dlong *elementList,
		     @restrict const dlong *localizedIds,
		    @restrict const dfloat *ggeo,
		    @restrict const dfloat *I,
		    @restrict const dfloat *q,
		    @restrict dfloat *Aq){
  		    
  for(dlong eo=0; eo<Nelements; eo+=p_Kblk; @outer(0)){
    
    @shared dfloat s_Iq[p_Kblk][p_cubNp];
    @shared dfloat s_qTet[p_Kblk][p_NpTet];
    
    // array of threads
    for(int n=0;n<p_cubNp;++n;@inner(0)){
      if(n<p_NpTet){
	for(int es=0;es<p_Kblk;++es){
	  if(eo+es<Nelements){
	    dlong element = elementList[eo+es];
	    //	    s_qTet[es][n] = q[n+element*p_NpTet]; // note cube spacing of tet data
	    const dlong id = element*p_Np + n;
	    dlong localId = localizedIds[id]-1;
	    s_qTet[es][n] = q[localId];
	  }
	}
      }
    }

    for(int n=0;n<p_cubNp;++n;@inner(0)){
      dfloat res[p_Kblk];
      for(int es=0;es<p_Kblk;++es){
	res[es] = 0;
      }

#pragma unroll p_NpTet
      for(int m=0;m<p_NpTet;++m){			
	dfloat Inm = I[n+p_cubNp*m + p_cubNp*p_Np];
	for(int es=0;es<p_Kblk;++es){
	  res[es] += Inm*s_qTet[es][m]; // switch to column major
	}
      }

      for(int es=0;es<p_Kblk;++es){
	if(eo+es<Nelements){
	  dlong element = elementList[eo+es];
	  const dlong gbase = element*p_Nggeo*p_cubNp + n;
	  const dfloat GWJ = ggeo[gbase+p_GWJID*p_cubNp];
	  s_Iq[es][n] = GWJ*res[es];
	}
      }
    }							

    for(int n=0;n<p_cubNp;++n;@inner(0)){
      if(n<p_NpTet){					
	dfloat res[p_Kblk];
	for(int es=0;es<p_Kblk;++es){
	  res[es] = 0;
	}
	
#pragma unroll p_cubNp
	for(int m=0;m<p_cubNp;++m){
	  dfloat Imn = I[m*p_NpTet+n];
	  for(int es=0;es<p_Kblk;++es){
	    res[es] += Imn*s_Iq[es][m]; // need IT			
	  }
	}

	for(int es=0;es<p_Kblk;++es){
	  if(es+eo<Nelements){
	    dlong element = elementList[eo+es];
	    const dlong id = element*p_NpTet + n;
	    //	    Aq[id] = res[es];
	    dlong localId = localizedIds[id]-1;
	    atomicAdd(Aq+localId, res[es]); // atomic assumes Aq zerod
	  }
	}
      }
    }
  }
}

