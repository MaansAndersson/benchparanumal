/*

  The MIT License (MIT)

  Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.

*/

#define interpolateHex3D(s_I, r_p, r_Ip)	\
  {						\
  						\
    for(int b=0;b<p_cubNq;++b;@inner(1)){	\
      for(int a=0;a<p_cubNq;++a;@inner(0)){	\
	if(a<p_Nq && b<p_Nq){			\
	  for(int k=0;k<p_cubNq;++k){		\
	    dfloat res = 0;			\
	    for(int c=0;c<p_Nq;++c){		\
	      res += s_I[k][c]*r_p[c];		\
	    }					\
	    s_Ip[k][b][a] = res;		\
	  }					\
	}					\
      }						\
    }						\
						\
    @barrier("local");				\
						\
    /* raise in b */				\
    for(int k=0;k<p_cubNq;++k;@inner(1)){	\
      for(int a=0;a<p_cubNq;++a;@inner(0)){	\
						\
	if(a<p_Nq){				\
	  for(int b=0;b<p_Nq;++b){		\
	    r_Ip[b] = s_Ip[k][b][a];		\
	  }					\
						\
	  for(int j=0;j<p_cubNq;++j){		\
	    dfloat res = 0;			\
	    for(int b=0;b<p_Nq;++b){		\
	      res += s_I[j][b]*r_Ip[b];		\
	    }					\
	    s_Ip[k][j][a] = res;		\
	  }					\
	}					\
      }						\
    }						\
						\
    @barrier("local");				\
						\
    /* raise in a */				\
    for(int k=0;k<p_cubNq;++k;@inner(1)){	\
      for(int j=0;j<p_cubNq;++j;@inner(0)){	\
	for(int a=0;a<p_Nq;++a){		\
	  r_Ip[a] = s_Ip[k][j][a];		\
	}					\
						\
	for(int i=0;i<p_cubNq;++i){		\
	  dfloat res = 0;			\
	  for(int a=0;a<p_Nq;++a){		\
	    res += s_I[i][a]*r_Ip[a];		\
	  }					\
	  s_Ip[k][j][i] = res;			\
	}					\
      }						\
    }						\
						\
    @barrier("local");				\
						\
    /* copy back to registers */		\
    for(int j=0;j<p_cubNq;++j;@inner(1)){	\
      for(int i=0;i<p_cubNq;++i;@inner(0)){	\
	for(int k=0;k<p_cubNq;++k){		\
	  r_Ip[k] = s_Ip[k][j][i];		\
	}					\
      }						\
    }						\
						\
    @barrier("local");				\
						\
  }						\
    
#define testHex3D(s_I, r_p)			\
  {						\
    /* lower in 'k' */				\
    for(int j=0;j<p_cubNq;++j;@inner(1)){	\
      for(int i=0;i<p_cubNq;++i;@inner(0)){	\
						\
	for(int c=0;c<p_Nq;++c){		\
	  dfloat res = 0;			\
	  for(int k=0;k<p_cubNq;++k){		\
	    res += s_I[k][c]*r_p[k];		\
	  }					\
	  s_Ip[c][j][i] = res;			\
	}					\
      }						\
    }						\
						\
    @barrier("local");				\
						\
    /* lower in 'j' */				\
    for(int c=0;c<p_cubNq;++c;@inner(1)){	\
      for(int i=0;i<p_cubNq;++i;@inner(0)){	\
						\
	if(c<p_Nq){				\
	  for(int j=0;j<p_cubNq;++j){		\
	    r_p[j] = s_Ip[c][j][i];		\
	  }					\
						\
	  for(int b=0;b<p_Nq;++b){		\
	    dfloat res = 0;			\
	    for(int j=0;j<p_cubNq;++j){		\
	      res += s_I[j][b]*r_p[j];		\
	    }					\
						\
	    s_Ip[c][b][i] = res;		\
	  }					\
	}					\
      }						\
    }						\
						\
    @barrier("local");				\
						\
    /* lower in 'i' */				\
    for(int c=0;c<p_cubNq;++c;@inner(1)){	\
      for(int b=0;b<p_cubNq;++b;@inner(0)){	\
						\
	if(b<p_Nq && c<p_Nq){			\
	  for(int i=0;i<p_cubNq;++i){		\
	    r_p[i] = s_Ip[c][b][i];		\
	  }					\
						\
	  for(int a=0;a<p_Nq;++a){		\
	    dfloat res = 0;			\
	    for(int i=0;i<p_cubNq;++i){		\
	      res += s_I[i][a]*r_p[i];		\
	    }					\
						\
	    s_Ip[c][b][a] = res;		\
	  }					\
	}					\
      }						\
    }						\
						\
    @barrier("local");				\
						\
    /* copy back to registers */		\
    for(int b=0;b<p_cubNq;++b;@inner(1)){	\
      for(int a=0;a<p_cubNq;++a;@inner(0)){	\
	if(a<p_Nq && b<p_Nq){			\
	  for(int c=0;c<p_Nq;++c){		\
	    r_p[c] = s_Ip[c][b][a];		\
	  }					\
	}					\
      }						\
    }						\
						\
    @barrier("local");				\
						\
  }						


@kernel void BP4Global_v1(const dlong Nelements,
			  @restrict const dlong *elementList,
			  const dlong offset,
			  @restrict const dlong *localizedIds,
			  @restrict const dfloat *ggeo,
			  @restrict const dfloat *D,
			  @restrict const dfloat *I,
			  const dfloat lambda,
			  @restrict const dfloat *q,
			  @restrict dfloat *Aq){
  
  for(dlong e=0; e<Nelements; ++e; @outer(0)){
    
    @shared dfloat s_Ip[p_cubNq][p_cubNq][p_cubNq];	
    
    @shared dfloat s_D[p_cubNq][p_cubNq];
    @shared dfloat s_I[p_cubNq][p_Nq];
    
    @shared dfloat s_U[p_cubNq][p_cubNq];
    @shared dfloat s_V[p_cubNq][p_cubNq];
    @shared dfloat s_W[p_cubNq][p_cubNq];

    @shared dfloat s_GUr[p_cubNq][p_cubNq];
    @shared dfloat s_GUs[p_cubNq][p_cubNq];

    @shared dfloat s_GVr[p_cubNq][p_cubNq];
    @shared dfloat s_GVs[p_cubNq][p_cubNq];

    @shared dfloat s_GWr[p_cubNq][p_cubNq];
    @shared dfloat s_GWs[p_cubNq][p_cubNq];

    @exclusive dfloat r_Ut, r_Vt, r_Wt;
    @exclusive dlong element;
    
    // heavy on registers (FP64, 2*3*8 for N=7)
    @exclusive dfloat r_U[p_cubNq], r_AU[p_cubNq];
    @exclusive dfloat r_V[p_cubNq], r_AV[p_cubNq];
    @exclusive dfloat r_W[p_cubNq], r_AW[p_cubNq];
    
    // array of threads
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){

	element = elementList[e];
	
        s_D[j][i] = D[p_cubNq*j+i]; 
	
	if(i<p_Nq){
	  s_I[j][i] = I[p_Nq*j+i];
	}
	
        // load pencil of u into register
	if(i<p_Nq && j<p_Nq){
	  for(int k = 0; k < p_Nq; k++) {
	    
	    const dlong id = i + j*p_Nq + k*p_Nq*p_Nq + element*p_Np;
	    dlong localId = localizedIds[id]-1;
	    
	    r_U[k] = q[localId + 0*offset];
	    r_V[k] = q[localId + 1*offset];
	    r_W[k] = q[localId + 2*offset];
	  }
	}
	
	for(int k = 0; k < p_cubNq; k++) {
	  r_AU[k] = 0.f; // zero the accumulator
	  r_AV[k] = 0.f; // zero the accumulator
	  r_AW[k] = 0.f; // zero the accumulator
	}
      }
    }
    
    // raise pressure degree
    interpolateHex3D(s_I, r_U, r_U);
    interpolateHex3D(s_I, r_V, r_V);
    interpolateHex3D(s_I, r_W, r_W);
    
    // Layer by layer
#pragma unroll p_cubNq
    for(int k = 0;k < p_cubNq; k++){
      
      @barrier("local");
      
      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
	  
          // share u(:,:,k)
          s_U[j][i] = r_U[k];
	  s_V[j][i] = r_V[k];
	  s_W[j][i] = r_W[k];	  

          r_Ut = 0; r_Vt = 0; r_Wt = 0;	  
#pragma unroll p_cubNq
          for(int m = 0; m < p_cubNq; m++) {
            dfloat Dkm = s_D[k][m];
            r_Ut += Dkm*r_U[m];
	    r_Vt += Dkm*r_V[m];
	    r_Wt += Dkm*r_W[m];
          }
        }
      }
      
      @barrier("local");

      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){

          dfloat Ur = 0.f, Us = 0.f;
	  dfloat Vr = 0.f, Vs = 0.f;
	  dfloat Wr = 0.f, Ws = 0.f;

#pragma unroll p_cubNq
          for(int m = 0; m < p_cubNq; m++) {
            dfloat Dim = s_D[i][m];
            dfloat Djm = s_D[j][m];
	    
            Ur += Dim*s_U[j][m];
	    Vr += Dim*s_V[j][m];
	    Wr += Dim*s_W[j][m];
            Us += Djm*s_U[m][i];
            Vs += Djm*s_V[m][i];
	    Ws += Djm*s_W[m][i];
          }

          // prefetch geometric factors
          const dlong gbase = element*p_Nggeo*p_cubNp + k*p_cubNq*p_cubNq + j*p_cubNq + i;
	  
          const dfloat G00 = ggeo[gbase+p_G00ID*p_cubNp];
          const dfloat G01 = ggeo[gbase+p_G01ID*p_cubNp];
          const dfloat G02 = ggeo[gbase+p_G02ID*p_cubNp];
          const dfloat G11 = ggeo[gbase+p_G11ID*p_cubNp];
          const dfloat G12 = ggeo[gbase+p_G12ID*p_cubNp];
          const dfloat G22 = ggeo[gbase+p_G22ID*p_cubNp];
          const dfloat GWJ = ggeo[gbase+p_GWJID*p_cubNp];

          s_GUr[j][i] = (G00*Ur + G01*Us + G02*r_Ut);
	  s_GVr[j][i] = (G00*Vr + G01*Vs + G02*r_Vt);
          s_GWr[j][i] = (G00*Wr + G01*Ws + G02*r_Wt);

          s_GUs[j][i] = (G01*Ur + G11*Us + G12*r_Ut);
	  s_GVs[j][i] = (G01*Vr + G11*Vs + G12*r_Vt);
	  s_GWs[j][i] = (G01*Wr + G11*Ws + G12*r_Wt);

          r_Ut = G02*Ur + G12*Us + G22*r_Ut;
	  r_Vt = G02*Vr + G12*Vs + G22*r_Vt;
	  r_Wt = G02*Wr + G12*Ws + G22*r_Wt;

          r_AU[k] += GWJ*lambda*r_U[k];
	  r_AV[k] += GWJ*lambda*r_V[k];
	  r_AW[k] += GWJ*lambda*r_W[k];
        }
      }
      
      @barrier("local");
      
      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
	  
	  dfloat AUtmp = 0, AVtmp = 0, AWtmp = 0;
	  
#pragma unroll p_cubNq
          for(int m = 0; m < p_cubNq; m++){
            dfloat Dmi = s_D[m][i];
            dfloat Dmj = s_D[m][j];
            dfloat Dkm = s_D[k][m];
	    
            AUtmp += Dmi*s_GUr[j][m];
	    AVtmp += Dmi*s_GVr[j][m];
	    AWtmp += Dmi*s_GWr[j][m];
	    
            AUtmp += Dmj*s_GUs[m][i];
	    AVtmp += Dmj*s_GVs[m][i];
	    AWtmp += Dmj*s_GWs[m][i];

            r_AU[m] += Dkm*r_Ut;
	    r_AV[m] += Dkm*r_Vt;
	    r_AW[m] += Dkm*r_Wt;
          }

          r_AU[k] += AUtmp;
	  r_AV[k] += AVtmp;
	  r_AW[k] += AWtmp;
        }
      }
    }
    
    // lower pressure degree
    testHex3D(s_I, r_AU);
    testHex3D(s_I, r_AV);
    testHex3D(s_I, r_AW);
    
    // write out
    
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){

	if(i<p_Nq && j<p_Nq){
#pragma unroll p_cubNq
	  for(int k = 0; k < p_Nq; k++){
	    const dlong id = element*p_Np + k*p_Nq*p_Nq+ j*p_Nq + i;
	    dlong localId = localizedIds[id]-1;
	    
	    atomicAdd(Aq+localId+offset*0, r_AU[k]);
	    atomicAdd(Aq+localId+offset*1, r_AV[k]);
	    atomicAdd(Aq+localId+offset*2, r_AW[k]); 
	    
	  }
	}
      }
    }
  }
}


#define interpolateVecHex3D(s_I, r_p, r_Ip)				\
  {									\
    for(int fld=0;fld<p_Nfields;++fld;@inner(2)){			\
      for(int b=0;b<p_cubNq;++b;@inner(1)){				\
	for(int a=0;a<p_cubNq;++a;@inner(0)){				\
	  if(a<p_Nq && b<p_Nq){						\
	    for(int k=0;k<p_cubNq;++k){					\
	      dfloat res = 0;						\
	      for(int c=0;c<p_Nq;++c){					\
		res += s_I[k][c]*r_p[c];				\
	      }								\
	      s_Ip[fld][k][b][a] = res;					\
	    }								\
	  }								\
	}								\
      }									\
    }									\
									\
    @barrier("local");							\
									\
    /* raise in b */							\
    for(int fld=0;fld<p_Nfields;++fld;@inner(2)){			\
      for(int k=0;k<p_cubNq;++k;@inner(1)){				\
	for(int a=0;a<p_cubNq;++a;@inner(0)){				\
									\
	  if(a<p_Nq){							\
	    for(int b=0;b<p_Nq;++b){					\
	      r_Ip[b] = s_Ip[fld][k][b][a];				\
	    }								\
									\
	    for(int j=0;j<p_cubNq;++j){					\
	      dfloat res = 0;						\
	      for(int b=0;b<p_Nq;++b){					\
		res += s_I[j][b]*r_Ip[b];				\
	      }								\
	      s_Ip[fld][k][j][a] = res;					\
	    }								\
	  }								\
	}								\
      }									\
    }									\
									\
    @barrier("local");							\
									\
    /* raise in a */							\
    for(int fld=0;fld<p_Nfields;++fld;@inner(2)){			\
      for(int k=0;k<p_cubNq;++k;@inner(1)){				\
	for(int j=0;j<p_cubNq;++j;@inner(0)){				\
	  for(int a=0;a<p_Nq;++a){					\
	    r_Ip[a] = s_Ip[fld][k][j][a];				\
	  }								\
	  								\
	  for(int i=0;i<p_cubNq;++i){					\
	    dfloat res = 0;						\
	    for(int a=0;a<p_Nq;++a){					\
	      res += s_I[i][a]*r_Ip[a];					\
	    }								\
	    s_Ip[fld][k][j][i] = res;					\
	  }								\
	}								\
      }									\
    }									\
									\
    @barrier("local");							\
    									\
    /* copy back to registers */					\
    for(int fld=0;fld<p_Nfields;++fld;@inner(2)){			\
      for(int j=0;j<p_cubNq;++j;@inner(1)){				\
	for(int i=0;i<p_cubNq;++i;@inner(0)){				\
	  for(int k=0;k<p_cubNq;++k){					\
	    r_Ip[k] = s_Ip[fld][k][j][i];				\
	  }								\
	}								\
      }									\
    }									\
    @barrier("local");							\
    									\
  }									\
  
#define testVecHex3D(s_I, r_p)				\
  {							\
    /* lower in 'k' */					\
    for(int fld=0;fld<p_Nfields;++fld;@inner(2)){	\
      for(int j=0;j<p_cubNq;++j;@inner(1)){		\
	for(int i=0;i<p_cubNq;++i;@inner(0)){		\
	  						\
	  for(int c=0;c<p_Nq;++c){			\
	    dfloat res = 0;				\
	    for(int k=0;k<p_cubNq;++k){			\
	      res += s_I[k][c]*r_p[k];			\
	    }						\
	    s_Ip[fld][c][j][i] = res;			\
	  }						\
	}						\
      }							\
    }							\
							\
    @barrier("local");					\
    							\
    /* lower in 'j' */					\
    for(int fld=0;fld<p_Nfields;++fld;@inner(2)){	\
      for(int c=0;c<p_cubNq;++c;@inner(1)){		\
	for(int i=0;i<p_cubNq;++i;@inner(0)){		\
	  						\
	  if(c<p_Nq){					\
	    for(int j=0;j<p_cubNq;++j){			\
	      r_p[j] = s_Ip[fld][c][j][i];		\
	    }						\
	    						\
	    for(int b=0;b<p_Nq;++b){			\
	      dfloat res = 0;				\
	      for(int j=0;j<p_cubNq;++j){		\
		res += s_I[j][b]*r_p[j];		\
	      }						\
	      						\
	      s_Ip[fld][c][b][i] = res;			\
	    }						\
	  }						\
	}						\
      }							\
    }							\
							\
    @barrier("local");					\
							\
    /* lower in 'i' */					\
    for(int fld=0;fld<p_Nfields;++fld;@inner(2)){	\
      for(int c=0;c<p_cubNq;++c;@inner(1)){		\
	for(int b=0;b<p_cubNq;++b;@inner(0)){		\
	  						\
	  if(b<p_Nq && c<p_Nq){				\
	    for(int i=0;i<p_cubNq;++i){			\
	      r_p[i] = s_Ip[fld][c][b][i];		\
	    }						\
	    						\
	    for(int a=0;a<p_Nq;++a){			\
	      dfloat res = 0;				\
	      for(int i=0;i<p_cubNq;++i){		\
		res += s_I[i][a]*r_p[i];		\
	      }						\
	      						\
	      s_Ip[fld][c][b][a] = res;			\
	    }						\
	  }						\
	}						\
      }							\
    }							\
							\
    @barrier("local");					\
							\
    /* copy back to registers */			\
    for(int fld=0;fld<p_Nfields;++fld;@inner(2)){	\
      for(int b=0;b<p_cubNq;++b;@inner(1)){		\
	for(int a=0;a<p_cubNq;++a;@inner(0)){		\
	  if(a<p_Nq && b<p_Nq){				\
	    for(int c=0;c<p_Nq;++c){			\
	      r_p[c] = s_Ip[fld][c][b][a];		\
	    }						\
	  }						\
	}						\
      }							\
    }							\
							\
    @barrier("local");					\
    							\
  }						


@kernel void BP4Global_v0(const dlong Nelements,
			  @restrict const dlong *elementList,
			  const dlong offset,
			  @restrict const dlong *localizedIds,
			  @restrict const dfloat *ggeo,
			  @restrict const dfloat *D,
			  @restrict const dfloat *I,
			  const dfloat lambda,
			  @restrict const dfloat *q,
			  @restrict dfloat *Aq){
  
  for(dlong e=0; e<Nelements; ++e; @outer(0)){
    
    @shared dfloat s_D[p_cubNq][p_cubNq];
    //    @shared dfloat s_I[p_cubNq][p_Nq];
    
    @shared dfloat s_U[p_cubNq][p_cubNq];
    @shared dfloat s_V[p_cubNq][p_cubNq];
    @shared dfloat s_W[p_cubNq][p_cubNq];

    @shared dfloat s_GUr[p_cubNq][p_cubNq];
    @shared dfloat s_GUs[p_cubNq][p_cubNq];

    @shared dfloat s_GVr[p_cubNq][p_cubNq];
    @shared dfloat s_GVs[p_cubNq][p_cubNq];

    @shared dfloat s_GWr[p_cubNq][p_cubNq];
    @shared dfloat s_GWs[p_cubNq][p_cubNq];

#if 1
    @shared dfloat s_U1[p_cubNq][p_cubNq];
    @shared dfloat s_V1[p_cubNq][p_cubNq];
    @shared dfloat s_W1[p_cubNq][p_cubNq];
#else
#define s_U1 s_GUr
#define s_V1 s_GVr
#define s_W1 s_GWr
#endif
    
    @exclusive dlong element;
    
    // heavy on registers (FP64, 2*3*8 for N=7)
    @exclusive dfloat r_U[p_cubNq], r_AU[p_cubNq];
    @exclusive dfloat r_V[p_cubNq], r_AV[p_cubNq];
    @exclusive dfloat r_W[p_cubNq], r_AW[p_cubNq];
    
    // array of threads
    for(int b=0;b<p_cubNq;++b;@inner(1)){
      for(int a=0;a<p_cubNq;++a;@inner(0)){

	element = elementList[e];
	
        s_D[b][a] = D[p_cubNq*b+a]; 

#if 0
	if(a<p_Nq){
	  s_I[b][a] = I[p_Nq*b+a];
	}
#endif
	for(int k = 0; k < p_cubNq; k++) {
	  r_AU[k] = 0; r_AV[k] = 0; r_AW[k] = 0;
	  r_U[k] = 0; r_V[k] = 0; r_W[k] = 0;
	}

      }
    }

    for(int b=0;b<p_cubNq;++b;@inner(1)){
      for(int a=0;a<p_cubNq;++a;@inner(0)){
        // load pencil of u into register
	
	if(a<p_Nq && b<p_Nq){
#pragma unroll p_Nq
	  for(int c = 0; c < p_Nq; c++) {

	    const dlong id = a + b*p_Nq + c*p_Nq*p_Nq + element*p_Np;
	    dlong localId = localizedIds[id]-1;

	    const dfloat Uc = q[localId + 0*offset];
	    const dfloat Vc = q[localId + 1*offset];
	    const dfloat Wc = q[localId + 2*offset];

#pragma unroll p_cubNq
	    for(int k=0;k<p_cubNq;++k){
	      //	      dfloat Ikc = s_I[k][c];
	      //	      dfloat Ikc = c_I[k][c];
	      dfloat Ikc = I[k*p_Nq+c];
	      r_U[k] += Ikc*Uc;
	      r_V[k] += Ikc*Vc;
	      r_W[k] += Ikc*Wc;
	    }
	  }
	}
      }
    }
    
    // interpolate to quadrature by slabbing
#pragma unroll p_cubNq
    for(int k = 0;k < p_cubNq; k++){
      
      for(int b=0;b<p_cubNq;++b;@inner(1)){
	for(int a=0;a<p_cubNq;++a;@inner(0)){
	  if(a<p_Nq && b<p_Nq){
	    s_U[b][a] = r_U[k];
	    s_V[b][a] = r_V[k];
	    s_W[b][a] = r_W[k];	  
	  }
	}
      }

      for(int j=0;j<p_cubNq;++j;@inner(1)){
	for(int a=0;a<p_cubNq;++a;@inner(0)){
	  if(a<p_Nq){
	    dfloat Uj = 0, Vj = 0, Wj = 0;

#pragma unroll p_Nq
	    for(int b=0;b<p_Nq;++b){
	      //	      dfloat Ijb = s_I[j][b];
	      dfloat Ijb = I[j*p_Nq+b];
	      Uj += Ijb*s_U[b][a];
	      Vj += Ijb*s_V[b][a];
	      Wj += Ijb*s_W[b][a];
	    }

	    s_U1[j][a] = Uj;
	    s_V1[j][a] = Vj;
	    s_W1[j][a] = Wj;
	  }
	}
      }

      for(int j=0;j<p_cubNq;++j;@inner(1)){
	for(int i=0;i<p_cubNq;++i;@inner(0)){
	  dfloat Ui = 0, Vi = 0, Wi = 0;

#pragma unroll p_Nq
	  for(int a=0;a<p_Nq;++a){
	    //	    dfloat Iia = s_I[i][a];
	    dfloat Iia = I[i*p_Nq + a];
	    Ui += Iia*s_U1[j][a];
	    Vi += Iia*s_V1[j][a];
	    Wi += Iia*s_W1[j][a];
	  }
	  r_U[k] = Ui;
	  r_V[k] = Vi;
	  r_W[k] = Wi;
	}
      }
    }

#pragma unroll p_cubNq
    for(int k = 0;k < p_cubNq; k++){

      @exclusive dfloat r_Ut, r_Vt, r_Wt;	  
	  
      for(int j=0;j<p_cubNq;++j;@inner(1)){
	for(int i=0;i<p_cubNq;++i;@inner(0)){
          const dlong gbase = element*p_Nggeo*p_cubNp + k*p_cubNq*p_cubNq + j*p_cubNq + i;
	  const dfloat GWJ = ggeo[gbase+p_GWJID*p_cubNp];

          r_AU[k] += GWJ*lambda*r_U[k];
	  r_AV[k] += GWJ*lambda*r_V[k];
	  r_AW[k] += GWJ*lambda*r_W[k];
	  
	  s_U[j][i] = r_U[k];
	  s_V[j][i] = r_V[k];
	  s_W[j][i] = r_W[k];

	  r_Ut = 0; r_Vt = 0; r_Wt = 0;

#pragma unroll p_cubNq
          for(int m = 0; m < p_cubNq; m++) {
	    //dfloat Dkm = s_D[k][m];
	    dfloat Dkm = D[k*p_cubNq+m];
            r_Ut += Dkm*r_U[m];
	    r_Vt += Dkm*r_V[m];
	    r_Wt += Dkm*r_W[m];
          }

          // prefetch geometric factors
	  //          const dlong gbase = element*p_Nggeo*p_cubNp + k*p_cubNq*p_cubNq + j*p_cubNq + i;
	  //	  const dlong gbase = element*p_Nggeo*p_cubNp + k*p_cubNq*p_cubNq + j*p_cubNq + i;

	  
	}
      }

      @exclusive dfloat r_GUt, r_GVt, r_GWt;
	    
      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){

	  const dlong gbase = element*p_Nggeo*p_cubNp + k*p_cubNq*p_cubNq + j*p_cubNq + i;
          dfloat G00 = ggeo[gbase+p_G00ID*p_cubNp];
	  dfloat G01 = ggeo[gbase+p_G01ID*p_cubNp];
	  dfloat G02 = ggeo[gbase+p_G02ID*p_cubNp];	  
	  dfloat G11 = ggeo[gbase+p_G11ID*p_cubNp];
	  dfloat G12 = ggeo[gbase+p_G12ID*p_cubNp];
	  dfloat G22 = ggeo[gbase+p_G22ID*p_cubNp];
	  
          dfloat Ur = 0.f, Us = 0.f;
	  dfloat Vr = 0.f, Vs = 0.f;
	  dfloat Wr = 0.f, Ws = 0.f;

#pragma unroll p_cubNq
          for(int m = 0; m < p_cubNq; m++) {
	    dfloat Dim = s_D[i][m];
            Ur += Dim*s_U[j][m];
	    Vr += Dim*s_V[j][m];
	    Wr += Dim*s_W[j][m];

	    dfloat Djm = s_D[j][m];
            Us += Djm*s_U[m][i];
            Vs += Djm*s_V[m][i];
	    Ws += Djm*s_W[m][i];
	  }

          dfloat r_GUr = G00*Ur; r_GUr += G01*Us; r_GUr += G02*r_Ut; s_GUr[j][i] = r_GUr;
	  dfloat r_GVr = G00*Vr; r_GVr += G01*Vs; r_GVr += G02*r_Vt; s_GVr[j][i] = r_GVr;
	  dfloat r_GWr = G00*Wr; r_GWr += G01*Ws; r_GWr += G02*r_Wt; s_GWr[j][i] = r_GWr;
	  
	  dfloat r_GUs = G01*Ur; r_GUs += G11*Us; r_GUs += G12*r_Ut; s_GUs[j][i] = r_GUs;
	  dfloat r_GVs = G01*Vr; r_GVs += G11*Vs; r_GVs += G12*r_Vt; s_GVs[j][i] = r_GVs;
	  dfloat r_GWs = G01*Wr; r_GWs += G11*Ws; r_GWs += G12*r_Wt; s_GWs[j][i] = r_GWs;

          r_GUt = G02*Ur; r_GUt += G12*Us; r_GUt += G22*r_Ut;
	  r_GVt = G02*Vr; r_GVt += G12*Vs; r_GVt += G22*r_Vt;
	  r_GWt = G02*Wr; r_GWt += G12*Ws; r_GWt += G22*r_Wt;
        }
      }
      
      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
	  
	  dfloat AUtmp = 0, AVtmp = 0, AWtmp = 0;

#pragma unroll p_cubNq
          for(int m = 0; m < p_cubNq; m++){
	    dfloat Dmi = s_D[m][i];
            AUtmp += Dmi*s_GUr[j][m];
	    AVtmp += Dmi*s_GVr[j][m];
	    AWtmp += Dmi*s_GWr[j][m];

	    dfloat Dmj = s_D[m][j];
            AUtmp += Dmj*s_GUs[m][i];
	    AVtmp += Dmj*s_GVs[m][i];
	    AWtmp += Dmj*s_GWs[m][i];

	    //            dfloat Dkm = s_D[k][m];
	    dfloat Dkm = D[k*p_cubNq+m];
            r_AU[m] += Dkm*r_GUt;
	    r_AV[m] += Dkm*r_GVt;
	    r_AW[m] += Dkm*r_GWt;
          }

          r_AU[k] += AUtmp;
	  r_AV[k] += AVtmp;
	  r_AW[k] += AWtmp;
        }
      }
    }
    
    // lower pressure degree
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
	for(int c=0;c<p_Nq;++c){
	  r_U[c] = 0; r_V[c] = 0; r_W[c] = 0;
	}
      }
    }
    
#pragma unroll p_cubNq
    for(int k = 0;k < p_cubNq; k++){
      
      for(int j=0;j<p_cubNq;++j;@inner(1)){
	for(int i=0;i<p_cubNq;++i;@inner(0)){
	  s_U[j][i] = r_AU[k];
	  s_V[j][i] = r_AV[k];
	  s_W[j][i] = r_AW[k];	  
	}
      }
    
      for(int j=0;j<p_cubNq;++j;@inner(1)){
	for(int a=0;a<p_cubNq;++a;@inner(0)){
	  if(a<p_Nq){
	    dfloat Ua = 0, Va = 0, Wa = 0;
#pragma unroll p_cubNq
	    for(int i=0;i<p_cubNq;++i){
	      //	      dfloat Iia = s_I[i][a];
	      dfloat Iia = I[i*p_Nq+a];
	      Ua += Iia*s_U[j][i];
	      Va += Iia*s_V[j][i];
	      Wa += Iia*s_W[j][i];
	    }
	    s_U1[j][a] = Ua;
	    s_V1[j][a] = Va;
	    s_W1[j][a] = Wa;
	  }
	}
      }

      for(int b=0;b<p_cubNq;++b;@inner(1)){
	for(int a=0;a<p_cubNq;++a;@inner(0)){
	  if(a<p_Nq && b<p_Nq){
	    dfloat Ub = 0, Vb = 0, Wb = 0;
#pragma unroll p_cubNq
	    for(int j=0;j<p_cubNq;++j){
	      //	      dfloat Ijb = s_I[j][b];
	      dfloat Ijb = I[j*p_Nq+b];
	      Ub += Ijb*s_U1[j][a];
	      Vb += Ijb*s_V1[j][a];
	      Wb += Ijb*s_W1[j][a];
	    }

#pragma unroll p_Nq
	    for(int c=0;c<p_Nq;++c){
	      //	      dfloat Ikc = s_I[k][c];
	      dfloat Ikc = I[k*p_Nq+c];
	      r_U[c] += Ikc*Ub;
	      r_V[c] += Ikc*Vb;
	      r_W[c] += Ikc*Wb;
	    }
	  }
	}
      }
    }
      
    // write out
    
    for(int b=0;b<p_cubNq;++b;@inner(1)){
      for(int a=0;a<p_cubNq;++a;@inner(0)){
	
	if(a<p_Nq && b<p_Nq){
#pragma unroll p_cubNq
	  for(int c = 0; c < p_Nq; ++c){
	    const dlong id = element*p_Np + c*p_Nq*p_Nq+ b*p_Nq + a;

	    dlong localId = localizedIds[id]-1;
	    
	    atomicAdd(Aq+localId+offset*0, r_U[c]);
	    atomicAdd(Aq+localId+offset*1, r_V[c]);
	    atomicAdd(Aq+localId+offset*2, r_W[c]); 
	  }
	}
      }
    }
  }

#if 0
#undef s_U1
#undef s_V1
#undef s_W1
#endif
}


