/*

  The MIT License (MIT)

  Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.

*/


// default to element-per-threadblock
@kernel void BP5_v0(const dlong Nelements,
		    @restrict const dlong *elementList,
		    @restrict const  dfloat *  ggeo,
		    @restrict const  dfloat *  D,
		    const dfloat lambda,
		    @restrict const  dfloat *  q,
		    @restrict dfloat *  Aq){

  for(dlong e=0; e<Nelements; ++e; @outer(0)){

    @shared dfloat s_D[p_Nq][p_Nq];
    @shared dfloat s_q[p_Nq][p_Nq];

    @shared dfloat s_Gqr[p_Nq][p_Nq];
    @shared dfloat s_Gqs[p_Nq][p_Nq];

    @exclusive dfloat r_qt, r_Gqt, r_Auk;
    @exclusive dfloat r_q[p_Nq]; // register array to hold u(i,j,0:N) private to thread
    @exclusive dfloat r_Aq[p_Nq];// array for results Au(i,j,0:N)

    @exclusive dfloat r_G00, r_G01, r_G02, r_G11, r_G12, r_G22, r_GwJ;

    @exclusive dlong element;
    
    // array of threads
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        //load D into local memory
        // s_D[i][j] = d \phi_i at node j
        s_D[j][i] = D[p_Nq*j+i]; // D is column major

	if(e<Nelements){
	  element = elementList[e];
    
	  // load pencil of u into register
	  const dlong base = i + j*p_Nq + element*p_Np;
	  for(int k = 0; k < p_Nq; k++) {
	    r_q[k] = q[base + k*p_Nq*p_Nq]; // prefetch operation
	    r_Aq[k] = 0.f; // zero the accumulator
	  }
	}
      }
    }

    // Layer by layer
#pragma unroll p_Nq
    for(int k = 0;k < p_Nq; k++){

      @barrier("local");

      for(int j=0;j<p_Nq;++j;@inner(1)){
	for(int i=0;i<p_Nq;++i;@inner(0)){

	  // prefetch geometric factors
	  const dlong gbase = element*p_Nggeo*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;
	  
	  if(e<Nelements){
	    
	    r_G00 = ggeo[gbase+p_G00ID*p_Np];
	    r_G01 = ggeo[gbase+p_G01ID*p_Np];
	    r_G02 = ggeo[gbase+p_G02ID*p_Np];
	    
	    r_G11 = ggeo[gbase+p_G11ID*p_Np];
	    r_G12 = ggeo[gbase+p_G12ID*p_Np];
	    r_G22 = ggeo[gbase+p_G22ID*p_Np];
	    
	    r_GwJ = ggeo[gbase+p_GWJID*p_Np];
	  }
	}
      }

      for(int j=0;j<p_Nq;++j;@inner(1)){
	for(int i=0;i<p_Nq;++i;@inner(0)){

	  // share u(:,:,k)
	  s_q[j][i] = r_q[k];

	  r_qt = 0;

#pragma unroll p_Nq
	  for(int m = 0; m < p_Nq; m++) {
	    r_qt += s_D[k][m]*r_q[m];
	  }
	}
      }

      for(int j=0;j<p_Nq;++j;@inner(1)){
	for(int i=0;i<p_Nq;++i;@inner(0)){

	  dfloat qr = 0.f;
	  dfloat qs = 0.f;

#pragma unroll p_Nq
	  for(int m = 0; m < p_Nq; m++) {
	    qr += s_D[i][m]*s_q[j][m];
	    qs += s_D[j][m]*s_q[m][i];
	  }

	  s_Gqs[j][i] = (r_G01*qr + r_G11*qs + r_G12*r_qt);
	  s_Gqr[j][i] = (r_G00*qr + r_G01*qs + r_G02*r_qt);

	  // put this here for a performance bump
	  r_Gqt = (r_G02*qr + r_G12*qs + r_G22*r_qt);
	  r_Auk = r_GwJ*lambda*r_q[k];
	}
      }

      for(int j=0;j<p_Nq;++j;@inner(1)){
	for(int i=0;i<p_Nq;++i;@inner(0)){

#pragma unroll p_Nq
	  for(int m = 0; m < p_Nq; m++){
	    r_Auk   += s_D[m][j]*s_Gqs[m][i];
	    r_Aq[m] += s_D[k][m]*r_Gqt; // DT(m,k)*ut(i,j,k,e)
	    r_Auk   += s_D[m][i]*s_Gqr[j][m];
	  }

	  r_Aq[k] += r_Auk;
	}
      }
    }

    // write out

    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
#pragma unroll p_Nq
	for(int k = 0; k < p_Nq; k++){
	  const dlong id = element*p_Np +k*p_Nq*p_Nq+ j*p_Nq + i;
	  if(e<Nelements){
	    Aq[id] = r_Aq[k];
	  }
	}
      }
    }
  }
}



@kernel void BP5_v1(const dlong Nelements,
		    @restrict const dlong *elementList,
		    @restrict const  dfloat *  ggeo,
		    @restrict const  dfloat *  D,
		    const dfloat lambda,
		    @restrict const  dfloat *  q,
		    @restrict dfloat *  Aq){

  for(int ko=0;ko<p_Nq;++ko;@outer(1)){
    for(dlong e=0; e<Nelements; ++e; @outer(0)){
      
      @shared dfloat s_D[p_Nq][p_Nq];
      @shared dfloat s_q[p_Nq][p_Nq];
      
      @shared dfloat s_Gqr[p_Nq][p_Nq];
      @shared dfloat s_Gqs[p_Nq][p_Nq];
      
      @exclusive dfloat r_qt, r_Auko;
      @exclusive dfloat r_q[p_Nq]; // register array to hold u(i,j,0:N) private to thread
      
      @exclusive dfloat r_G00, r_G01, r_G02, r_G11, r_G12, r_G22, r_GwJ;
      
      // array of threads
      for(int j=0;j<p_Nq;++j;@inner(1)){
	for(int i=0;i<p_Nq;++i;@inner(0)){
	  //load D into local memory
	  // s_D[i][j] = d \phi_i at node j
	  s_D[j][i] = D[p_Nq*j+i]; // D is column major
	  
	  // load pencil of u into register
	  const dlong base = i + j*p_Nq + e*p_Np;
	  for(int k = 0; k < p_Nq; k++) {
	    r_q[k] = q[base + k*p_Nq*p_Nq]; // prefetch operation
	  }

	  r_Auko = 0;
	}
      }
      
      // Layer by layer
#pragma unroll p_Nq
      for(int k = 0;k < p_Nq; k++){

      @barrier("local");
	
	for(int j=0;j<p_Nq;++j;@inner(1)){
	  for(int i=0;i<p_Nq;++i;@inner(0)){
	      
	    // prefetch geometric factors
	    const dlong gbase = e*p_Nggeo*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;

	    if(k==ko){
	      r_G00 = ggeo[gbase+p_G00ID*p_Np];
	      r_G01 = ggeo[gbase+p_G01ID*p_Np];
	      r_G11 = ggeo[gbase+p_G11ID*p_Np];
	      r_GwJ = ggeo[gbase+p_GWJID*p_Np];
	    }
	      
	    r_G02 = ggeo[gbase+p_G02ID*p_Np];
	    r_G12 = ggeo[gbase+p_G12ID*p_Np];
	    r_G22 = ggeo[gbase+p_G22ID*p_Np];	      

	  }
	}
	  
	for(int j=0;j<p_Nq;++j;@inner(1)){
	  for(int i=0;i<p_Nq;++i;@inner(0)){
	      
	    // share u(:,:,k)
	    s_q[j][i] = r_q[k];
	      
	    r_qt = 0;
	      
#pragma unroll p_Nq
	    for(int m = 0; m < p_Nq; m++) {
	      r_qt += s_D[k][m]*r_q[m];
	    }
	  }
	}
	  
	for(int j=0;j<p_Nq;++j;@inner(1)){
	  for(int i=0;i<p_Nq;++i;@inner(0)){
	      
	    dfloat qr = 0.f;
	    dfloat qs = 0.f;
	      
#pragma unroll p_Nq
	    for(int m = 0; m < p_Nq; m++) {
	      qr += s_D[i][m]*s_q[j][m];
	      qs += s_D[j][m]*s_q[m][i];
	    }
	      
	    // put this here for a performance bump
	    const dfloat r_Gqt = (r_G02*qr + r_G12*qs + r_G22*r_qt);
	    r_Auko += s_D[k][ko]*r_Gqt; // DT(m,k)*ut(i,j,k,e)

	    if(k==ko){
	      s_Gqs[j][i] = (r_G01*qr + r_G11*qs + r_G12*r_qt);
	      s_Gqr[j][i] = (r_G00*qr + r_G01*qs + r_G02*r_qt);
	      r_Auko += r_GwJ*lambda*r_q[k];
	    }
	  }
	}
	  
	for(int j=0;j<p_Nq;++j;@inner(1)){
	  for(int i=0;i<p_Nq;++i;@inner(0)){

	    if(k==ko){
#pragma unroll p_Nq
	      for(int m = 0; m < p_Nq; m++){
		r_Auko   += s_D[m][j]*s_Gqs[m][i];
		r_Auko   += s_D[m][i]*s_Gqr[j][m];
	      }
	    }
	  }
	}
      }
      
      // write out
      
      for(int j=0;j<p_Nq;++j;@inner(1)){
	for(int i=0;i<p_Nq;++i;@inner(0)){
	  const dlong id = e*p_Np +ko*p_Nq*p_Nq+ j*p_Nq + i;
	  Aq[id] = r_Auko;
	}
      }
    }
  }
}

#define cubeThreads				\
  for(int k=0;k<p_Nq;++k;@inner(2))		\
    for(int j=0;j<p_Nq;++j;@inner(1))		\
      for(int i=0;i<p_Nq;++i;@inner(0))		




@kernel void BP5_v2(const dlong Nelements,
		    @restrict const dlong *elementList,
		    @restrict const dfloat *ggeo,
		    @restrict const dfloat *D,
		    const dfloat lambda,
		    @restrict const dfloat *q,
		    @restrict dfloat * Aq){
  
  for(int e=0;e<Nelements;++e;@outer(0)){
  
    @shared dfloat s_D[p_Nq][p_Nq];
    @shared dfloat s_p[p_Nq][p_Nq][p_Nq];
    
    @exclusive dfloat r_Ap, r_Gpr, r_Gps, r_Gpt;

    @exclusive dlong element;
    
    cubeThreads{
	  
      if(k==0)
	s_D[j][i] = D[j*p_Nq+i];
      
      element = elementList[e];
      
      int id = i + j*p_Nq + k*p_Nq*p_Nq + element*p_Np;
      
      const int gbase = element*p_Nggeo*p_Np + i + j*p_Nq + k*p_Nq*p_Nq;
      
      dfloat r_p = q[id];
      s_p[k][j][i] = r_p;
      
    }

    
    cubeThreads{
	  
      // prefetch geometric factors
      const int gbase = element*p_Nggeo*p_Np + i + j*p_Nq + k*p_Nq*p_Nq;

      dfloat GWJ = ggeo[gbase+p_GWJID*p_Np];	  
      dfloat G00 = ggeo[gbase+p_G00ID*p_Np];
      dfloat G01 = ggeo[gbase+p_G01ID*p_Np];
      dfloat G02 = ggeo[gbase+p_G02ID*p_Np];
      dfloat G11 = ggeo[gbase+p_G11ID*p_Np];
      dfloat G12 = ggeo[gbase+p_G12ID*p_Np];
      dfloat G22 = ggeo[gbase+p_G22ID*p_Np];
      
      dfloat pr = 0.f;
      dfloat ps = 0.f;
      dfloat pt = 0.f;

      r_Ap = GWJ*lambda*s_p[k][j][i];
      
#pragma unroll
      for(int m = 0; m < p_Nq; m++) {
	pr += s_D[i][m]*s_p[k][j][m];
	ps += s_D[j][m]*s_p[k][m][i];
	pt += s_D[k][m]*s_p[m][j][i];
      }
      
      r_Gpr = (G00*pr + G01*ps + G02*pt);
      r_Gps = (G01*pr + G11*ps + G12*pt);
      r_Gpt = (G02*pr + G12*ps + G22*pt);
    }
    
    cubeThreads{
      s_p[k][j][i] = r_Gpr;
    }
    
    cubeThreads{
#pragma unroll
      for(int m = 0; m < p_Nq; m++){
	r_Ap += s_D[m][i]*s_p[k][j][m];
      }
    }

    cubeThreads{
      s_p[k][j][i] = r_Gps;
    }


    cubeThreads{
#pragma unroll
      for(int m = 0; m < p_Nq; m++){
	r_Ap += s_D[m][j]*s_p[k][m][i];
      }
    }

    cubeThreads{
      s_p[k][j][i] = r_Gpt;
    }

    cubeThreads{
#pragma unroll
      for(int m = 0; m < p_Nq; m++){
	r_Ap += s_D[m][k]*s_p[m][j][i];
      }

      int id = i + j*p_Nq + k*p_Nq*p_Nq + element*p_Np;
      Aq[id] = r_Ap;
    }
  }
  
}

@kernel void BP5_v3(const dlong Nelements,
		    @restrict const dlong *elementList,
		    @restrict const dfloat *ggeo,
		    @restrict const dfloat *D,
		    const dfloat lambda,
		    @restrict const dfloat *q,
		    @restrict dfloat * Aq){


  for(int e=0;e<Nelements;++e;@outer(0)){

    @shared dfloat s_D[p_Nq*p_Nq];
    @shared dfloat s_p[p_Nq][p_Nq][p_Nq];

    @exclusive dlong element;
    @exclusive dfloat r_p, r_Ap, r_Gpr, r_Gps, r_Gpt; // zero the accumulator

    cubeThreads{
      if(k==0){
	s_D[j*p_Nq+i] = D[j*p_Nq+i];
      }
      
      element = elementList[e];
      //      element = e;
	
      int id = i + j*p_Nq + k*p_Nq*p_Nq + element*p_Np;

      r_p = q[id];
      
      s_p[k][j][i] = r_p;

    }
    
    
    cubeThreads{
      // prefetch geometric factors
      const int gbase = element*p_Nggeo*p_Np + i + j*p_Nq + k*p_Nq*p_Nq;

      dfloat GWJ = ggeo[gbase+p_GWJID*p_Np];
      
      dfloat G00 = ggeo[gbase+p_G00ID*p_Np];
      dfloat G01 = ggeo[gbase+p_G01ID*p_Np];
      dfloat G02 = ggeo[gbase+p_G02ID*p_Np];
      dfloat G11 = ggeo[gbase+p_G11ID*p_Np];
      dfloat G12 = ggeo[gbase+p_G12ID*p_Np];
      dfloat G22 = ggeo[gbase+p_G22ID*p_Np];

      r_Ap = GWJ*lambda*r_p;

      dfloat pr = 0.f, ps = 0.f, pt = 0.f;
      
#pragma unroll
      for(int m = 0; m < p_Nq; m++) {
	pr += s_D[i*p_Nq+m]*s_p[k][j][m];
	ps += s_D[j*p_Nq+m]*s_p[k][m][i];
	pt += s_D[k*p_Nq+m]*s_p[m][j][i];	
      }

      r_Gpr = (G00*pr + G01*ps + G02*pt);
      r_Gps = (G01*pr + G11*ps + G12*pt);
      r_Gpt = (G02*pr + G12*ps + G22*pt);

    }
    
    cubeThreads{
      s_p[k][j][i] = r_Gpr;
    }
    
    cubeThreads{
#pragma unroll
      for(int m = 0; m < p_Nq; m++){
	r_Ap += s_D[m*p_Nq+i]*s_p[k][j][m];
      }
    }

    cubeThreads{    
      s_p[k][j][i] = r_Gps;
    }

    cubeThreads{        
#pragma unroll
      for(int m = 0; m < p_Nq; m++){
	r_Ap += s_D[m*p_Nq+j]*s_p[k][m][i];
      }
    }
    
    cubeThreads{    
      s_p[k][j][i] = r_Gpt;
    }

    cubeThreads{    
#pragma unroll
      for(int m = 0; m < p_Nq; m++){
	r_Ap += s_D[m*p_Nq+k]*s_p[m][j][i];
      }

      const dlong id = element*p_Np +k*p_Nq*p_Nq+ j*p_Nq + i;
      Aq[id] = r_Ap;
      
    }
  }
}

// exploit matrix structure directly
@kernel void BP5_v4(const dlong Nelements,
		    @restrict const dlong *elementList,
		    @restrict const dfloat *op,
		    @restrict const dfloat *D,
		    const dfloat lambda,
		    @restrict const dfloat *q,
		    @restrict dfloat * Aq){

#define p_halfNq ((p_Nq+1)/2)
  
  for(int e=0;e<Nelements;++e;@outer(0)){
  
    @shared dfloat s_D[p_Nq][p_Nq];
    @shared dfloat s_p[p_Nq][p_Nq][p_Nq];
    @shared dfloat s_pr[p_Nq][p_Nq][p_Nq];
    @shared dfloat s_ps[p_Nq][p_Nq][p_Nq];
    @shared dfloat s_pt[p_Nq][p_Nq][p_Nq];

    @exclusive dlong element;
    
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){

	element = elementList[e];
      
	s_D[j][i] = D[j*p_Nq+i];
	
	for(int k=0;k<p_Nq;++k){
	  int id = i + j*p_Nq + k*p_Nq*p_Nq + element*p_Np;
	  
	  s_p[k][j][i] = q[id];
	}
      }
    }
    
    for(int b=0;b<p_Nq;++b;@inner(1)){
      for(int a=0;a<p_Nq;++a;@inner(0)){

	// run	permuations of a,b,c
#pragma unroll
	for(int c=0;c<p_halfNq;++c){

	  dfloat pr0 = 0.f, ps0 = 0.f, pt0 = 0.f;
	  dfloat pr1 = 0.f, ps1 = 0.f, pt1 = 0.f;

	  for(int m = 0; m < p_Nq; ++m) {
	    const int n = p_Nq-1-m;
	    const dfloat Dcm = s_D[c][m] ;

	    pr0 += Dcm*s_p[b][a][m];
	    pr1 += Dcm*s_p[b][a][n];

	    ps0 += Dcm*s_p[b][m][a];
	    ps1 += Dcm*s_p[b][n][a];
	    
	    pt0 += Dcm*s_p[m][b][a];
	    pt1 += Dcm*s_p[n][b][a];
	  }
	  
	  s_pr[b][a][p_Nq-1-c] = -pr1;
	  s_pr[b][a][c]        = pr0;
		  
	  s_ps[b][p_Nq-1-c][a] = -ps1;
	  s_ps[b][c][a]        = ps0;
		  
	  s_pt[p_Nq-1-c][b][a] = -pt1;
	  s_pt[c][b][a]        = pt0;

	}
      }
    }

    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
	for(int k=0;k<p_Nq;++k){

	  // prefetch geometric factors
	  const int gbase = element*p_Nggeo*p_Np + i + j*p_Nq + k*p_Nq*p_Nq;
	  dfloat GWJ = op[gbase+p_GWJID*p_Np];	  	  
	  dfloat G00 = op[gbase+p_G00ID*p_Np];
	  dfloat G01 = op[gbase+p_G01ID*p_Np];
	  dfloat G02 = op[gbase+p_G02ID*p_Np];
	  dfloat G11 = op[gbase+p_G11ID*p_Np];
	  dfloat G12 = op[gbase+p_G12ID*p_Np];
	  dfloat G22 = op[gbase+p_G22ID*p_Np];
	  
	  dfloat pr = s_pr[k][j][i];
	  dfloat ps = s_ps[k][j][i];
	  dfloat pt = s_pt[k][j][i];
	  
	  s_pr[k][j][i] = G00*pr + G01*ps + G02*pt;
	  s_ps[k][j][i] = G01*pr + G11*ps + G12*pt;
	  s_pt[k][j][i] = G02*pr + G12*ps + G22*pt;

	  s_p[k][j][i] *= lambda*GWJ;
	}
      }
    }

    // run permuations of a,b,c
    for(int c=0;c<p_halfNq;++c){

      for(int b=0;b<p_Nq;++b;@inner(1)){
	for(int a=0;a<p_Nq;++a;@inner(0)){
	  
	  dfloat pr0 = 0.f;
	  dfloat pr1 = 0.f;
	  for(int m = 0; m < p_Nq; ++m) {
	    int n = p_Nq-1-m;
	    dfloat Dcm = s_D[m][c] ;
	    pr0 += Dcm*s_pr[b][a][m];
	    pr1 += Dcm*s_pr[b][a][n];
	  }
	  s_p[b][a][c] += pr0;
	  if(c!=p_Nq-1-c)
	    s_p[b][a][p_Nq-1-c] -= pr1;
	}
      }
      
      for(int b=0;b<p_Nq;++b;@inner(1)){
	for(int a=0;a<p_Nq;++a;@inner(0)){
	  
	  dfloat ps0 = 0.f;
	  dfloat ps1 = 0.f;
	  for(int m = 0; m < p_Nq; ++m) {
	    int n = p_Nq-1-m;
	    dfloat Dcm = s_D[m][c] ;
	    ps0 += Dcm*s_ps[b][m][a];
	    ps1 += Dcm*s_ps[b][n][a];
	  }
	  s_p[b][c][a] += ps0;
	  if(c!=p_Nq-1-c)
	    s_p[b][p_Nq-1-c][a] -= ps1;
	}
      }

      for(int b=0;b<p_Nq;++b;@inner(1)){
	for(int a=0;a<p_Nq;++a;@inner(0)){
	  
	  dfloat pt0 = 0.f;
	  dfloat pt1 = 0.f;
	  for(int m = 0; m < p_Nq; ++m) {
	    int n = p_Nq-1-m;
	    dfloat Dcm = s_D[m][c] ;
	    pt0 += Dcm*s_pt[m][b][a];
	    pt1 += Dcm*s_pt[n][b][a];
	  }
	  s_p[c][b][a] += pt0;
	  if(c!=p_Nq-1-c)
	    s_p[p_Nq-1-c][b][a] -= pt1;
	}
      }
    }
    
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
	for(int k=0;k<p_Nq;++k){
	  int id = i + j*p_Nq + k*p_Nq*p_Nq + element*p_Np;
	  Aq[id] = s_p[k][j][i];
	}
      }
    }
  }
  
}


// exploit matrix structure directly
@kernel void BP5_v5(const dlong Nelements,
		    @restrict const dlong *elementList,
		    @restrict const dfloat *op,
		    @restrict const dfloat *D,
		    const dfloat lambda,
		    @restrict const dfloat *q,
		    @restrict dfloat * Aq){

#define p_halfNq ((p_Nq+1)/2)
  
  for(int e=0;e<Nelements;++e;@outer(0)){
  
    @shared dfloat s_D[p_Nq][p_Nq];
    @shared dfloat s_p[p_Nq][p_Nq][p_Nq];
    @shared dfloat s_pr[p_Nq][p_Nq][p_Nq];
    @shared dfloat s_ps[p_Nq][p_Nq][p_Nq];
    @shared dfloat s_pt[p_Nq][p_Nq][p_Nq];
    @shared dfloat s_Ap[p_Nq][p_Nq][p_Nq];

    @exclusive dlong element;
    
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){

	element = elementList[e];
      
	s_D[j][i] = D[j*p_Nq+i];
	
	for(int k=0;k<p_Nq;++k){
	  int id = i + j*p_Nq + k*p_Nq*p_Nq + element*p_Np;
	  
	  s_p[k][j][i] = q[id];
	}
      }
    }

    for(int b=0;b<p_Nq;++b;@inner(1)){
      for(int a=0;a<p_Nq;++a;@inner(0)){

	// run	permuations of a,b,c
#pragma unroll
	for(int c=0;c<p_halfNq;++c){

	  dfloat pr0 = 0.f, ps0 = 0.f, pt0 = 0.f;
	  dfloat pr1 = 0.f, ps1 = 0.f, pt1 = 0.f;
	  
#pragma unroll
	  for(int m = 0; m < p_Nq; ++m) {
	    const int n = p_Nq-1-m;
	    const dfloat Dcm = s_D[c][m] ;

	    pr0 += Dcm*s_p[b][a][m];
	    pr1 += Dcm*s_p[b][a][n];

	    ps0 += Dcm*s_p[b][m][a];
	    ps1 += Dcm*s_p[b][n][a];
	    
	    pt0 += Dcm*s_p[m][b][a];
	    pt1 += Dcm*s_p[n][b][a];
	  }
	  
	  s_pr[b][a][p_Nq-1-c] = -pr1;
	  s_pr[b][a][c]        = pr0;
		  
	  s_ps[b][p_Nq-1-c][a] = -ps1;
	  s_ps[b][c][a]        = ps0;
		  
	  s_pt[p_Nq-1-c][b][a] = -pt1;
	  s_pt[c][b][a]        = pt0;

	}
      }
    }

    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){

	#pragma unroll
	for(int k=0;k<p_Nq;++k){

	  // prefetch geometric factors
	  const int gbase = element*p_Nggeo*p_Np + i + j*p_Nq + k*p_Nq*p_Nq;
	  dfloat GWJ = op[gbase+p_GWJID*p_Np];	  	  
	  dfloat G00 = op[gbase+p_G00ID*p_Np];
	  dfloat G01 = op[gbase+p_G01ID*p_Np];
	  dfloat G02 = op[gbase+p_G02ID*p_Np];
	  dfloat G11 = op[gbase+p_G11ID*p_Np];
	  dfloat G12 = op[gbase+p_G12ID*p_Np];
	  dfloat G22 = op[gbase+p_G22ID*p_Np];
	  
	  dfloat pr = s_pr[k][j][i];
	  dfloat ps = s_ps[k][j][i];
	  dfloat pt = s_pt[k][j][i];
	  
	  s_pr[k][j][i] = G00*pr + G01*ps + G02*pt;
	  s_ps[k][j][i] = G01*pr + G11*ps + G12*pt;
	  s_pt[k][j][i] = G02*pr + G12*ps + G22*pt;

	  s_Ap[k][j][i] = lambda*GWJ*s_p[k][j][i];
	}
      }
    }
      
    // run permuations of a,b,c
    for(int c=0;c<p_halfNq;++c){

      for(int b=0;b<p_Nq;++b;@inner(1)){
	for(int a=0;a<p_Nq;++a;@inner(0)){
	  
	  dfloat pr0 = 0.f;
	  dfloat pr1 = 0.f;
	  for(int m = 0; m < p_Nq; ++m) {
	    int n = p_Nq-1-m;
	    dfloat Dcm = s_D[m][c] ;
	    pr0 += Dcm*s_pr[b][a][m];
	    pr1 += Dcm*s_pr[b][a][n];
	  }
	  s_Ap[b][a][c] += pr0;
	  if(c!=p_Nq-1-c)
	    s_Ap[b][a][p_Nq-1-c] -= pr1;
	}
      }
      
      for(int b=0;b<p_Nq;++b;@inner(1)){
	for(int a=0;a<p_Nq;++a;@inner(0)){
	  
	  dfloat ps0 = 0.f;
	  dfloat ps1 = 0.f;
	  for(int m = 0; m < p_Nq; ++m) {
	    int n = p_Nq-1-m;
	    dfloat Dcm = s_D[m][c] ;
	    ps0 += Dcm*s_ps[b][m][a];
	    ps1 += Dcm*s_ps[b][n][a];
	    
	  }
	  s_Ap[b][c][a] += ps0;
	  if(c!=p_Nq-1-c)
	    s_Ap[b][p_Nq-1-c][a] -= ps1;
	}
      }

      for(int b=0;b<p_Nq;++b;@inner(1)){
	for(int a=0;a<p_Nq;++a;@inner(0)){
	  
	  dfloat pt0 = 0.f;
	  dfloat pt1 = 0.f;
	  for(int m = 0; m < p_Nq; ++m) {
	    int n = p_Nq-1-m;
	    dfloat Dcm = s_D[m][c] ;
	    pt0 += Dcm*s_pt[m][b][a];
	    pt1 += Dcm*s_pt[n][b][a];
	  }
	  s_Ap[c][b][a] += pt0;
	  if(c!=p_Nq-1-c)
	    s_Ap[p_Nq-1-c][b][a] -= pt1;
	}
      }
    }
    
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
	for(int k=0;k<p_Nq;++k){
	  int id = i + j*p_Nq + k*p_Nq*p_Nq + element*p_Np;
	  Aq[id] = s_Ap[k][j][i];
	}
      }
    }
  }
  
}


// 1/2 slab (v4 in BK kernels)
@kernel void BP5_v6(const int numElements,
		    @restrict const dlong *elementList,
		    @restrict const dfloat *op,
		    @restrict const dfloat *D,
		    const dfloat lambda,
		    @restrict const dfloat *solIn,
		    @restrict dfloat * solOut){

#define p_halfNq ((p_Nq+1)/2)
  
  for(int element=0;element<numElements;++element;@outer(0)){
  
    @shared dfloat s_D[p_Nq][p_Nq];
    @shared dfloat s_p[p_Nq][p_Nq][p_Nq];
    @shared dfloat s_Gpr[p_Nq][p_Nq][p_Nq];
    @shared dfloat s_Gps[p_Nq][p_Nq][p_Nq];
    @shared dfloat s_Gpt[p_Nq][p_Nq][p_Nq];

    for(int k=0;k<p_halfNq;++k;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
	for(int i=0;i<p_Nq;++i;@inner(0)){

	  if(k==0)
	    s_D[j][i] = D[j*p_Nq+i];

	  for(int c=k;c<p_Nq;++c){
	    int id = i + j*p_Nq + c*p_Nq*p_Nq + element*p_Np;
	    
	    s_p[c][j][i] = solIn[id];
	  }
	}
      }
    }

    for(int k=0;k<p_halfNq;++k;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
	for(int i=0;i<p_Nq;++i;@inner(0)){

	  dfloat pt0 = 0, pt1 = 0;

#pragma unroll p_Nq
	  for(int m = 0; m < p_Nq; ++m) {
	    const dfloat Dkm = s_D[k][m];
	    // use reverse direction trick here
	    pt0 += Dkm*s_p[m][j][i];
	    pt1 += Dkm*s_p[p_Nq-1-m][j][i];
	  }

	  // correct sign
	  pt1 *= -1.;
	  
	  dfloat pr0 = 0, pr1 = 0;

	  // use same multiply for top and bottom slices
#pragma unroll p_Nq
	  for(int m = 0; m < p_Nq; ++m) {
	    const dfloat Dim = s_D[i][m];
	    pr0 += Dim*s_p[k][j][m];
	    pr1 += Dim*s_p[p_Nq-1-k][j][m];
	  }

	  dfloat ps0 = 0, ps1 = 0;

#pragma unroll p_Nq
	  for(int m = 0; m < p_Nq; ++m) {
	    const dfloat Djm = s_D[j][m];
	    ps0 += Djm*s_p[k][m][i];
	    ps1 += Djm*s_p[p_Nq-1-k][m][i];
	  }
	  
	  {
	    const int gbase = element*p_Nggeo*p_Np + i + j*p_Nq + k*p_Nq*p_Nq;
	    dfloat G00 = op[gbase+p_G00ID*p_Np];
	    dfloat G01 = op[gbase+p_G01ID*p_Np];
	    dfloat G02 = op[gbase+p_G02ID*p_Np];
	    dfloat G11 = op[gbase+p_G11ID*p_Np];
	    dfloat G12 = op[gbase+p_G12ID*p_Np];
	    dfloat G22 = op[gbase+p_G22ID*p_Np];
	    
	    s_Gpr[k][j][i] = G00*pr0 + G01*ps0 + G02*pt0;
	    s_Gps[k][j][i] = G01*pr0 + G11*ps0 + G12*pt0;
	    s_Gpt[k][j][i] = G02*pr0 + G12*ps0 + G22*pt0;
	  }
	  
	  {
	    const int gbase = element*p_Nggeo*p_Np + i + j*p_Nq + (p_Nq-1-k)*p_Nq*p_Nq;
	    dfloat G00 = op[gbase+p_G00ID*p_Np];
	    dfloat G01 = op[gbase+p_G01ID*p_Np];
	    dfloat G02 = op[gbase+p_G02ID*p_Np];
	    dfloat G11 = op[gbase+p_G11ID*p_Np];
	    dfloat G12 = op[gbase+p_G12ID*p_Np];
	    dfloat G22 = op[gbase+p_G22ID*p_Np];
	    
	    s_Gpr[p_Nq-1-k][j][i] = G00*pr1 + G01*ps1 + G02*pt1;
	    s_Gps[p_Nq-1-k][j][i] = G01*pr1 + G11*ps1 + G12*pt1;
	    s_Gpt[p_Nq-1-k][j][i] = G02*pr1 + G12*ps1 + G22*pt1;
	  }
	}
      }
    }
    
    for(int k=0;k<p_halfNq;++k;@inner(2)){      
      for(int j=0;j<p_Nq;++j;@inner(1)){      
	for(int i=0;i<p_Nq;++i;@inner(0)){

	  dfloat Ap0, Ap1;
	  {
	    const int gbase = element*p_Nggeo*p_Np + i + j*p_Nq + k*p_Nq*p_Nq;
	    dfloat GWJ = op[gbase+p_GWJID*p_Np];	  	  

	    Ap0 = s_p[k][j][i]*lambda*GWJ;

	  }

	  {
	    const int gbase = element*p_Nggeo*p_Np + i + j*p_Nq + (p_Nq-1-k)*p_Nq*p_Nq;
	    dfloat GWJ = op[gbase+p_GWJID*p_Np];	  	  

	    Ap1 = s_p[p_Nq-1-k][j][i]*lambda*GWJ;
	  }
	  
	  dfloat lapr0= 0, lapr1 = 0;

	  // use same matrix for both slices
#pragma unroll p_Nq
	  for(int m=0;m<p_Nq;++m){
	    dfloat Dmi = s_D[m][i];
	    lapr0 += Dmi*s_Gpr[k][j][m];
	    lapr1 += Dmi*s_Gpr[p_Nq-1-k][j][m];
	  }

	  Ap0 += lapr0;
	  Ap1 += lapr1;
	  
	  dfloat laps0= 0, laps1 = 0;

#pragma unroll p_Nq
	  for(int m=0;m<p_Nq;++m){
	    dfloat Dmj = s_D[m][j];
	    laps0 += Dmj*s_Gps[k][m][i];
	    laps1 += Dmj*s_Gps[p_Nq-1-k][m][i];
	  }
	  
	  Ap0 += laps0;
	  Ap1 += laps1;

	  dfloat lapt0 = 0, lapt1 = 0;

#pragma unroll p_Nq
	  for(int m=0;m<p_Nq;++m){
	    dfloat Dmk = s_D[m][k];
	    lapt0 += Dmk*s_Gpt[m][j][i];
	    lapt1 += Dmk*s_Gpt[p_Nq-1-m][j][i];
	  }

	  Ap0 += lapt0;
	  Ap1 -= lapt1;
	  
	  dlong base = i + j*p_Nq + element*p_Np;
	  
	  solOut[base + k*p_Nq*p_Nq] = Ap0;
	  solOut[base + (p_Nq-1-k)*p_Nq*p_Nq] = Ap1;
	}
      }
    }
  }
  
}



#if 0
@kernel void BP5Dot_v0(const int Nelements,
		       @restrict const dlong *elementList,
		       @restrict const dfloat *ggeo,
		       @restrict const dfloat *D,
		       const dfloat lambda,
		       @restrict const dfloat *p,
		       @restrict dfloat * Ap,
		       @restrict dfloat * pAp){
  
  for(int e=0;e<Nelements;++e;@outer(0)){
  
    @shared dfloat s_D[p_Nq][p_Nq];
    @shared volatile dfloat s_p[p_Nq][p_Nq][p_Nq];
    @shared volatile dfloat s_pAp[32]; 
    @exclusive dfloat r_p, r_Ap, r_Gpr, r_Gps, r_Gpt;

    @exclusive dlong element;
    
    cubeThreads{
      
      if(k==0)
	s_D[j][i] = D[j*p_Nq+i];
      
      element = elementList[e];
      
      int id = i + j*p_Nq + k*p_Nq*p_Nq + element*p_Np;
      
      const int gbase = element*p_Nggeo*p_Np + i + j*p_Nq + k*p_Nq*p_Nq;
      dfloat GWJ = ggeo[gbase+p_GWJID*p_Np];	  
      
      r_p = p[id];
      s_p[k][j][i] = r_p;
	
      r_Ap = GWJ*lambda*r_p;
    }

    cubeThreads{
      // prefetch geometric factors
      const int gbase = element*p_Nggeo*p_Np + i + j*p_Nq + k*p_Nq*p_Nq;

      dfloat G00 = ggeo[gbase+p_G00ID*p_Np];
      dfloat G01 = ggeo[gbase+p_G01ID*p_Np];
      dfloat G02 = ggeo[gbase+p_G02ID*p_Np];
      dfloat G11 = ggeo[gbase+p_G11ID*p_Np];
      dfloat G12 = ggeo[gbase+p_G12ID*p_Np];
      dfloat G22 = ggeo[gbase+p_G22ID*p_Np];
	  
      dfloat pr = 0.f;
      dfloat ps = 0.f;
      dfloat pt = 0.f;
	  
#pragma unroll
      for(int m = 0; m < p_Nq; m++) {
	pr += s_D[i][m]*s_p[k][j][m];
	ps += s_D[j][m]*s_p[k][m][i];
	pt += s_D[k][m]*s_p[m][j][i];
      }
	  
      r_Gpr = (G00*pr + G01*ps + G02*pt);
      r_Gps = (G01*pr + G11*ps + G12*pt);
      r_Gpt = (G02*pr + G12*ps + G22*pt);
    }
     
    
    cubeThreads{
      s_p[k][j][i] = r_Gpr;
    }

    cubeThreads{
#pragma unroll
      for(int m = 0; m < p_Nq; m++){
	r_Ap += s_D[m][i]*s_p[k][j][m];
      }
    }

    cubeThreads{
      s_p[k][j][i] = r_Gps;
    }


    cubeThreads{
      
#pragma unroll
      for(int m = 0; m < p_Nq; m++){
	r_Ap += s_D[m][j]*s_p[k][m][i];
      }
    }

    cubeThreads{
      s_p[k][j][i] = r_Gpt;
    }

    cubeThreads{
#pragma unroll
      for(int m = 0; m < p_Nq; m++){
	r_Ap += s_D[m][k]*s_p[m][j][i];
      }
      
      int id = i + j*p_Nq + k*p_Nq*p_Nq + element*p_Np;
      Ap[id] = r_Ap;
    }

    cubeThreads{
      s_p[k][j][i] = r_p*r_Ap;
    }

    // do partial reduction on p.Ap [ two phase vSIMD32 sync ]
    cubeThreads{
      int t = k*p_Nq*p_Nq + j*p_Nq + i;
      int n = t%32;
      int w = t/32;
      // totally hard wired for SIMD32
      if(n<16 && t+16<p_Np) s_p[0][0][t] += s_p[0][0][t+16];
      if(n< 8 && t+8<p_Np)  s_p[0][0][t] += s_p[0][0][t+8];
      if(n< 4 && t+4<p_Np)  s_p[0][0][t] += s_p[0][0][t+4];
      if(n< 2 && t+2<p_Np)  s_p[0][0][t] += s_p[0][0][t+2];
      if(n< 1 && t+1<p_Np)  s_p[0][0][t] += s_p[0][0][t+1];
      if(n==0) s_pAp[w] = s_p[0][0][t];
    }

    cubeThreads{
      int t = k*p_Nq*p_Nq + j*p_Nq + i;
      int n = t%32;
      int w = t/32;
      if(w==0 && n*32<p_Np){ // is this the base warp, and was there an entry from above
	if( n<16 && ((n+16)*32)<p_Np) s_pAp[n] += s_pAp[n+16];
	if( n< 8 && ((n+ 8)*32)<p_Np) s_pAp[n] += s_pAp[n+ 8];
	if( n< 4 && ((n+ 4)*32)<p_Np) s_pAp[n] += s_pAp[n+ 4];
	if( n< 2 && ((n+ 2)*32)<p_Np) s_pAp[n] += s_pAp[n+ 2];
	if( n< 1 && ((n+ 1)*32)<p_Np) s_pAp[n] += s_pAp[n+ 1];

	if(n==0){
	  dfloat res = s_pAp[0];
	  atomicAdd(pAp, res);
	  //	  atomic_add(pAp, res);
	}
      }
    }
  }
  
}

@kernel void BP5Dot_v1(const dlong Nelements,
		       @restrict const dlong *elementList,
		       @restrict const dfloat *ggeo,
		       @restrict const dfloat *D,
		       const dfloat lambda,
		       @restrict const dfloat *q,
		       @restrict dfloat * Aq,
		       @restrict dfloat *qAq){


  for(int e=0;e<Nelements;++e;@outer(0)){

    @shared dfloat s_D[p_Nq*p_Nq];
    @shared dfloat s_p[p_Nq][p_Nq][p_Nq];

    @exclusive dlong element;
    @exclusive dfloat r_p, r_Ap, r_Gpr, r_Gps, r_Gpt; // zero the accumulator

    
    cubeThreads{
      if(k==0)
	s_D[j*p_Nq+i] = D[j*p_Nq+i];
      
      element = elementList[e];
      
      int id = i + j*p_Nq + k*p_Nq*p_Nq + element*p_Np;

      r_p = q[id];
      
      s_p[k][j][i] = r_p;

      r_Ap = 0;
    }
    
    
    cubeThreads{

      // prefetch geometric factors
      const int gbase = element*p_Nggeo*p_Np + i + j*p_Nq + k*p_Nq*p_Nq;

      dfloat GWJ = ggeo[gbase+p_GWJID*p_Np];

      dfloat G00 = ggeo[gbase+p_G00ID*p_Np];
      dfloat G01 = ggeo[gbase+p_G01ID*p_Np];
      dfloat G02 = ggeo[gbase+p_G02ID*p_Np];

      r_Ap = GWJ*lambda*s_p[k][j][i];
      
      {
	dfloat pr = 0.f;

#pragma unroll
	for(int m = 0; m < p_Nq; m++) 
	  pr += s_D[i*p_Nq+m]*s_p[k][j][m];
	
	r_Gpr = G00*pr;
	r_Gps = G01*pr;
	r_Gpt = G02*pr;
      }
      
      dfloat G11 = ggeo[gbase+p_G11ID*p_Np];
      dfloat G12 = ggeo[gbase+p_G12ID*p_Np];
      
      {
	
	dfloat ps = 0.f;

#pragma unroll
	for(int m = 0; m < p_Nq; m++) 
	  ps += s_D[j*p_Nq+m]*s_p[k][m][i];
	
	r_Gpr += G01*ps;
	r_Gps += G11*ps;
	r_Gpt += G12*ps;
	
      }
      
      dfloat G22 = ggeo[gbase+p_G22ID*p_Np];
      
      {
	
	dfloat pt = 0.f;
	
#pragma unroll
	for(int m = 0; m < p_Nq; m++) 
	  pt += s_D[k*p_Nq+m]*s_p[m][j][i];
	
	r_Gpr += G02*pt;
	r_Gps += G12*pt;
	r_Gpt += G22*pt;
      }
    }
    
    cubeThreads{
      s_p[k][j][i] = r_Gpr;
    }
    
    cubeThreads{
      
#pragma unroll
      for(int m = 0; m < p_Nq; m++){
	r_Ap += s_D[m*p_Nq+i]*s_p[k][j][m];
      }
    }

    cubeThreads{    
      s_p[k][j][i] = r_Gps;
    }
    
    cubeThreads{        
#pragma unroll
      for(int m = 0; m < p_Nq; m++){
	r_Ap += s_D[m*p_Nq+j]*s_p[k][m][i];
      }
    }
    
    cubeThreads{    
      s_p[k][j][i] = r_Gpt;
    }

    
    cubeThreads{    
#pragma unroll
      for(int m = 0; m < p_Nq; m++){
	r_Ap += s_D[m*p_Nq+k]*s_p[m][j][i];
      }
      
      const dlong id = element*p_Np +k*p_Nq*p_Nq+ j*p_Nq + i;
      Aq[id] = r_Ap;
    }

    cubeThreads{
      s_p[k][j][i] = r_Ap*r_p;
    }

#if 0
#define p_Nwarps ((p_Np+31)/32)
    
    @shared volatile dfloat s_warp[p_Nwarps];

    cubeThreads{
      int r_t = k*p_Nq*p_Nq + j*p_Nq + i;
      volatile dfloat *s_pt = s_p[0][0] + r_t;
      int r_n = r_t%32;
      int r_w = r_t/32;
      if(r_n<16 && r_t+16<p_Np) *s_pt += s_pt[16];
      if(r_n< 8 && r_t+ 8<p_Np) *s_pt += s_pt[8];
      if(r_n< 4 && r_t+ 4<p_Np) *s_pt += s_pt[4];
      if(r_n< 2 && r_t+ 2<p_Np) *s_pt += s_pt[2];
      if(r_n< 1 && r_t+ 1<p_Np) *s_pt += s_pt[1];
      if(r_n==0)
	s_warp[r_w] = *s_pt;
    }

    cubeThreads{
      int r_t = k*p_Nq*p_Nq + j*p_Nq + i;
      int r_w = r_t/32;
      if(r_w==0 && r_t<p_Nwarps){
	volatile dfloat *s_pt = s_warp + r_t;

	if(r_t< 16 && (r_t+ 16)<p_Nwarps) *s_pt += s_pt[16];
	if(r_t<  8 && (r_t+  8)<p_Nwarps) *s_pt += s_pt[ 8];
	if(r_t<  4 && (r_t+  4)<p_Nwarps) *s_pt += s_pt[ 4];
	if(r_t<  2 && (r_t+  2)<p_Nwarps) *s_pt += s_pt[ 2];
	if(r_t<  1 && (r_t+  1)<p_Nwarps) *s_pt += s_pt[ 1];
	if(r_t==0){
	  dfloat res =*s_pt;
	  atomicAdd(qAq, res);
	}
      }
    }
#else
    cubeThreads{
      if(k==0){
	dfloat res = 0;
	for(int c=0;c<p_Nq;++c){
	  res += s_p[c][j][i];
	}
	s_p[0][j][i] = res;
      }
    }
    
    cubeThreads{
      if(j==0 && k==0){
	dfloat res = 0;
	for(int b=0;b<p_Nq;++b){
	  res += s_p[0][b][i];
	}
	s_p[0][0][i] = res;
      }
    }
    
    cubeThreads{
      if(i==0 && j==0 && k==0){
	dfloat res = 0;
	for(int a=0;a<p_Nq;++a){
	  res += s_p[0][0][a];
	}
	atomicAdd(qAq, res);
      }
    }

#endif
  }
  
}


@kernel void BP5Dot_v2(const int Nelements,
		       @restrict const dlong *elementList,
		       @restrict const dfloat *ggeo,
		       @restrict const dfloat *D,
		       const dfloat lambda,
		       @restrict const dfloat *q,
		       @restrict dfloat * Aq,
		       @restrict dfloat *qAq){
  

  for(int e=0;e<Nelements;++e;@outer(0)){
    #define p_Nwarps ((p_Np+31)/32)
    
    @shared dfloat s_D[p_Nq*p_Nq];

    @exclusive dlong element;
    @exclusive dfloat r_p, r_Ap; // zero the accumulator
    
    {
      @shared dfloat s_p[p_Nq][p_Nq][p_Nq];
      @shared dfloat s_Gpr[p_Nq][p_Nq][p_Nq+1];
      @shared dfloat s_Gps[p_Nq][p_Nq][p_Nq+1];
      @shared dfloat s_Gpt[p_Nq][p_Nq][p_Nq+1];
      
      cubeThreads{
	if(k==0){
	  s_D[j*p_Nq+i] = D[j*p_Nq+i];
	}
	
	//      element = elementList[e];
	element = e;
	
	int id = i + j*p_Nq + k*p_Nq*p_Nq + element*p_Np;
	
	r_p = q[id];
	
	s_p[k][j][i] = r_p;
	
      }
      
      
      cubeThreads{
	// prefetch geometric factors
	const int gbase = element*p_Nggeo*p_Np + i + j*p_Nq + k*p_Nq*p_Nq;
	
	dfloat GWJ = ggeo[gbase+p_GWJID*p_Np];
	
	dfloat G00 = ggeo[gbase+p_G00ID*p_Np];
	dfloat G01 = ggeo[gbase+p_G01ID*p_Np];
	dfloat G02 = ggeo[gbase+p_G02ID*p_Np];
	dfloat G11 = ggeo[gbase+p_G11ID*p_Np];
	dfloat G12 = ggeo[gbase+p_G12ID*p_Np];
	dfloat G22 = ggeo[gbase+p_G22ID*p_Np];

	r_Ap = GWJ*lambda*r_p;
	
	dfloat pr = 0.f, ps = 0.f, pt = 0.f;

#pragma unroll
	for(int m = 0; m < p_Nq; m++) {
	  pr += s_D[i*p_Nq+m]*s_p[k][j][m];
	  ps += s_D[j*p_Nq+m]*s_p[k][m][i];
	  pt += s_D[k*p_Nq+m]*s_p[m][j][i];	
	}

	s_Gpr[k][j][i] = (G00*pr + G01*ps + G02*pt);
	s_Gps[k][j][i] = (G01*pr + G11*ps + G12*pt);
	s_Gpt[k][j][i] = (G02*pr + G12*ps + G22*pt);
	
      }

      cubeThreads{
#pragma unroll
	for(int m = 0; m < p_Nq; m++){
	  r_Ap += s_D[m*p_Nq+i]*s_Gpr[k][j][m];
	  r_Ap += s_D[m*p_Nq+j]*s_Gps[k][m][i];
	  r_Ap += s_D[m*p_Nq+k]*s_Gpt[m][j][i];
	}
      }
    }
    
    @shared volatile dfloat s_warp[p_Nwarps];
    @shared volatile dfloat s_pAp[p_Np];
    
    cubeThreads{    
      int r_t = k*p_Nq*p_Nq + j*p_Nq + i;
      s_pAp[r_t] = r_Ap*r_p;
    }
    
    
    cubeThreads{
      int r_t = k*p_Nq*p_Nq + j*p_Nq + i;
      volatile dfloat *s_pt = s_pAp + r_t;
      int r_n = r_t%32;
      int r_w = r_t/32;
      if(r_n<16 && r_t+16<p_Np) *s_pt += s_pt[16];
      if(r_n< 8 && r_t+ 8<p_Np) *s_pt += s_pt[8];
      if(r_n< 4 && r_t+ 4<p_Np) *s_pt += s_pt[4];
      if(r_n< 2 && r_t+ 2<p_Np) *s_pt += s_pt[2];
      if(r_n< 1 && r_t+ 1<p_Np) *s_pt += s_pt[1];
      if(r_n==0)
	s_warp[r_w] = *s_pt;
    }
    
    cubeThreads{
      int r_t = k*p_Nq*p_Nq + j*p_Nq + i;
      int r_w = r_t/32;
      if(r_w==0 && r_t<p_Nwarps){
	volatile dfloat *s_pt = s_warp + r_t;
	
	if(r_t< 16 && (r_t+ 16)<p_Nwarps) *s_pt += s_pt[16];
	if(r_t<  8 && (r_t+  8)<p_Nwarps) *s_pt += s_pt[ 8];
	if(r_t<  4 && (r_t+  4)<p_Nwarps) *s_pt += s_pt[ 4];
	if(r_t<  2 && (r_t+  2)<p_Nwarps) *s_pt += s_pt[ 2];
	if(r_t<  1 && (r_t+  1)<p_Nwarps) *s_pt += s_pt[ 1];
	if(r_t==0){
	  dfloat res =*s_pt;
	  atomicAdd(qAq, res);
	}
      }

      const dlong id = element*p_Np +k*p_Nq*p_Nq+ j*p_Nq + i;
      Aq[id] = r_Ap;
    }
    
  }
}
#endif

#if 0
// experimental bank respecting
typedef union{

  float2 hilo;	
  double val;	

}sfloat;


double sread(const float s_hilo[2][p_Nq][p_Nq], int j, int i){
       
  sfloat d;
  d.hilo.x = s_hilo[0][j][i];
  d.hilo.y = s_hilo[1][j][i];
  
  return d.val;
}

void swrite(float s_hilo[2][p_Nq][p_Nq], int j, int i, double val){

  sfloat d;
  d.val = val;
  
  s_hilo[0][j][i] = d.hilo.x;
  s_hilo[1][j][i] = d.hilo.y;
}
#else
double sread(const float s_hilo[2][p_Nq][p_Nq], int j, int i){
  
  double d;
  double *d_pt = &d;
  float *pt = (float*)d_pt;
  pt[0] = s_hilo[0][j][i];
  pt[1] = s_hilo[1][j][i];
  
  return d;
}

void swrite(float s_hilo[2][p_Nq][p_Nq], int j, int i, const double d){
  

  const double *d_pt = &d;
  const float *pt = (const float*)d_pt;
  
  s_hilo[0][j][i] = pt[0];
  s_hilo[1][j][i] = pt[1];
  

}

#endif


@kernel void BP5_v7(const dlong Nelements,
		    @restrict const dlong *elementList,
		    @restrict const  dfloat *  ggeo,
		    @restrict const  dfloat *  D,
		    const dfloat lambda,
		    @restrict const  dfloat *  q,
		    @restrict dfloat *  Aq){

  for(dlong e=0; e<Nelements; ++e; @outer(0)){

    @shared float s_D[2][p_Nq][p_Nq];
    @shared float s_q[2][p_Nq][p_Nq];

    @shared float s_Gqr[2][p_Nq][p_Nq];
    @shared float s_Gqs[2][p_Nq][p_Nq];

    @exclusive dfloat r_qt, r_Gqt, r_Auk;
    @exclusive dfloat r_q[p_Nq]; // register array to hold u(i,j,0:N) private to thread
    @exclusive dfloat r_Aq[p_Nq];// array for results Au(i,j,0:N)

    @exclusive dfloat r_G00, r_G01, r_G02, r_G11, r_G12, r_G22, r_GwJ;

    @exclusive dlong element;
    
    // array of threads
    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
        //load D into local memory
        // s_D[i][j] = d \phi_i at node j
        swrite(s_D, j, i, D[p_Nq*j+i]); // D is column major

	if(e<Nelements){
	  element = elementList[e];
    
	  // load pencil of u into register
	  const dlong base = i + j*p_Nq + element*p_Np;
	  for(int k = 0; k < p_Nq; k++) {
	    r_q[k] = q[base + k*p_Nq*p_Nq]; // prefetch operation
	    r_Aq[k] = 0.f; // zero the accumulator
	  }
	}
      }
    }

    // Layer by layer
#pragma unroll p_Nq
    for(int k = 0;k < p_Nq; k++){

      @barrier("local");
      
      for(int j=0;j<p_Nq;++j;@inner(1)){
	for(int i=0;i<p_Nq;++i;@inner(0)){

	  // prefetch geometric factors
	  const dlong gbase = element*p_Nggeo*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;
	  
	  if(e<Nelements){
	    
	    r_G00 = ggeo[gbase+p_G00ID*p_Np];
	    r_G01 = ggeo[gbase+p_G01ID*p_Np];
	    r_G02 = ggeo[gbase+p_G02ID*p_Np];
	    
	    r_G11 = ggeo[gbase+p_G11ID*p_Np];
	    r_G12 = ggeo[gbase+p_G12ID*p_Np];
	    r_G22 = ggeo[gbase+p_G22ID*p_Np];
	    
	    r_GwJ = ggeo[gbase+p_GWJID*p_Np];
	  }
	}
      }

      @barrier("local");

      for(int j=0;j<p_Nq;++j;@inner(1)){
	for(int i=0;i<p_Nq;++i;@inner(0)){

	  swrite(s_q, j, i, r_q[k]); // D is column major

	  r_qt = 0;

#pragma unroll p_Nq
	  for(int m = 0; m < p_Nq; m++) {
	    double Dkm = sread(s_D, k, m);
	    r_qt += Dkm*r_q[m];
	  }
	}
      }

      @barrier("local");	

      for(int j=0;j<p_Nq;++j;@inner(1)){
	for(int i=0;i<p_Nq;++i;@inner(0)){

	  dfloat qr = 0.f;
	  dfloat qs = 0.f;

#pragma unroll p_Nq
	  for(int m = 0; m < p_Nq; m++) {
	    double Dim = sread(s_D, i, m);
	    double Djm = sread(s_D, j, m);
	    double qjm = sread(s_q, j, m);
	    double qmi = sread(s_q, m, i);
	    qr += Dim*qjm;
	    qs += Djm*qmi;
	  }

	  swrite(s_Gqs, j, i, r_G01*qr + r_G11*qs + r_G12*r_qt);
	  swrite(s_Gqr, j, i, r_G00*qr + r_G01*qs + r_G02*r_qt);
	  
	  // put this here for a performance bump
	  r_Gqt = (r_G02*qr + r_G12*qs + r_G22*r_qt);
	  r_Auk = r_GwJ*lambda*r_q[k];
	}
      }

      @barrier("local");

      for(int j=0;j<p_Nq;++j;@inner(1)){
	for(int i=0;i<p_Nq;++i;@inner(0)){

#pragma unroll p_Nq
	  for(int m = 0; m < p_Nq; m++){
	    double Dmi = sread(s_D, m, i);
	    double Dmj = sread(s_D, m, j);
	    double Dkm = sread(s_D, k, m);

	    double Gqs = sread(s_Gqs, m, i);
	    double Gqt = sread(s_Gqr, j, m);
	    
	    r_Auk   += Dmj*Gqs;
	    r_Aq[m] += Dkm*r_Gqt; // DT(m,k)*ut(i,j,k,e)
	    r_Auk   += Dmi*Gqt;
	  }

	  r_Aq[k] += r_Auk;
	}
      }
    }

    // write out

    for(int j=0;j<p_Nq;++j;@inner(1)){
      for(int i=0;i<p_Nq;++i;@inner(0)){
#pragma unroll p_Nq
	for(int k = 0; k < p_Nq; k++){
	  const dlong id = element*p_Np +k*p_Nq*p_Nq+ j*p_Nq + i;
	  if(e<Nelements){
	    Aq[id] = r_Aq[k];
	  }
	}
      }
    }
  }
}


// 1/2 slab (v4 in BK kernels)
@kernel void BP5_v8(const int numElements,
		    @restrict const dlong *elementList,
		    @restrict const dfloat *op,
		    @restrict const dfloat *D,
		    const dfloat lambda,
		    @restrict const dfloat *solIn,
		    @restrict dfloat * solOut){

#define p_halfNq ((p_Nq+1)/2)
  
  for(int element=0;element<numElements;++element;@outer(0)){
  
    @shared float s_D[2][p_Nq][p_Nq];
    @shared dfloat s_p[p_Nq][p_Nq][p_Nq];
    @shared dfloat s_Gpr[p_Nq][p_Nq][p_Nq];
    @shared dfloat s_Gps[p_Nq][p_Nq][p_Nq];
    @shared dfloat s_Gpt[p_Nq][p_Nq][p_Nq];

    for(int k=0;k<p_halfNq;++k;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
	for(int i=0;i<p_Nq;++i;@inner(0)){

	  if(k==0)
	    swrite(s_D, j, i, D[p_Nq*j+i]); // D is column major

	  for(int c=k;c<p_Nq;++c){
	    int id = i + j*p_Nq + c*p_Nq*p_Nq + element*p_Np;
	    
	    s_p[c][j][i] = solIn[id];
	  }
	}
      }
    }

    for(int k=0;k<p_halfNq;++k;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
	for(int i=0;i<p_Nq;++i;@inner(0)){

	  dfloat pt0 = 0, pt1 = 0;

#pragma unroll p_Nq
	  for(int m = 0; m < p_Nq; ++m) {
	    //	    const dfloat Dkm = s_D[k][m];
	    double Dkm = sread(s_D, k, m);
	    // use reverse direction trick here
	    pt0 += Dkm*s_p[m][j][i];
	    pt1 += Dkm*s_p[p_Nq-1-m][j][i];
	  }

	  // correct sign
	  pt1 *= -1.;
	  
	  dfloat pr0 = 0, pr1 = 0;

	  // use same multiply for top and bottom slices
#pragma unroll p_Nq
	  for(int m = 0; m < p_Nq; ++m) {
	    //	    const dfloat Dim = s_D[i][m];
	    double Dim = sread(s_D, i, m);
	    pr0 += Dim*s_p[k][j][m];
	    pr1 += Dim*s_p[p_Nq-1-k][j][m];
	  }

	  dfloat ps0 = 0, ps1 = 0;

#pragma unroll p_Nq
	  for(int m = 0; m < p_Nq; ++m) {
	    //	    const dfloat Djm = s_D[j][m];
	    double Djm = sread(s_D, j, m);
	    ps0 += Djm*s_p[k][m][i];
	    ps1 += Djm*s_p[p_Nq-1-k][m][i];
	  }
	  
	  {
	    const int gbase = element*p_Nggeo*p_Np + i + j*p_Nq + k*p_Nq*p_Nq;
	    dfloat G00 = op[gbase+p_G00ID*p_Np];
	    dfloat G01 = op[gbase+p_G01ID*p_Np];
	    dfloat G02 = op[gbase+p_G02ID*p_Np];
	    dfloat G11 = op[gbase+p_G11ID*p_Np];
	    dfloat G12 = op[gbase+p_G12ID*p_Np];
	    dfloat G22 = op[gbase+p_G22ID*p_Np];
	    
	    s_Gpr[k][j][i] = G00*pr0 + G01*ps0 + G02*pt0;
	    s_Gps[k][j][i] = G01*pr0 + G11*ps0 + G12*pt0;
	    s_Gpt[k][j][i] = G02*pr0 + G12*ps0 + G22*pt0;
	  }
	  
	  {
	    const int gbase = element*p_Nggeo*p_Np + i + j*p_Nq + (p_Nq-1-k)*p_Nq*p_Nq;
	    dfloat G00 = op[gbase+p_G00ID*p_Np];
	    dfloat G01 = op[gbase+p_G01ID*p_Np];
	    dfloat G02 = op[gbase+p_G02ID*p_Np];
	    dfloat G11 = op[gbase+p_G11ID*p_Np];
	    dfloat G12 = op[gbase+p_G12ID*p_Np];
	    dfloat G22 = op[gbase+p_G22ID*p_Np];
	    
	    s_Gpr[p_Nq-1-k][j][i] = G00*pr1 + G01*ps1 + G02*pt1;
	    s_Gps[p_Nq-1-k][j][i] = G01*pr1 + G11*ps1 + G12*pt1;
	    s_Gpt[p_Nq-1-k][j][i] = G02*pr1 + G12*ps1 + G22*pt1;
	  }
	}
      }
    }
    
    for(int k=0;k<p_halfNq;++k;@inner(2)){      
      for(int j=0;j<p_Nq;++j;@inner(1)){      
	for(int i=0;i<p_Nq;++i;@inner(0)){

	  dfloat Ap0, Ap1;
	  {
	    const int gbase = element*p_Nggeo*p_Np + i + j*p_Nq + k*p_Nq*p_Nq;
	    dfloat GWJ = op[gbase+p_GWJID*p_Np];	  	  

	    Ap0 = s_p[k][j][i]*lambda*GWJ;

	  }

	  {
	    const int gbase = element*p_Nggeo*p_Np + i + j*p_Nq + (p_Nq-1-k)*p_Nq*p_Nq;
	    dfloat GWJ = op[gbase+p_GWJID*p_Np];	  	  

	    Ap1 = s_p[p_Nq-1-k][j][i]*lambda*GWJ;
	  }
	  
	  dfloat lapr0= 0, lapr1 = 0;

	  // use same matrix for both slices
#pragma unroll p_Nq
	  for(int m=0;m<p_Nq;++m){
	    //	    dfloat Dmi = s_D[m][i];
	    double Dmi = sread(s_D, m, i);
	    lapr0 += Dmi*s_Gpr[k][j][m];
	    lapr1 += Dmi*s_Gpr[p_Nq-1-k][j][m];
	  }

	  Ap0 += lapr0;
	  Ap1 += lapr1;
	  
	  dfloat laps0= 0, laps1 = 0;

#pragma unroll p_Nq
	  for(int m=0;m<p_Nq;++m){
	    //	    dfloat Dmj = s_D[m][j];
	    double Dmj = sread(s_D, m, j);
	    laps0 += Dmj*s_Gps[k][m][i];
	    laps1 += Dmj*s_Gps[p_Nq-1-k][m][i];
	  }
	  
	  Ap0 += laps0;
	  Ap1 += laps1;

	  dfloat lapt0 = 0, lapt1 = 0;

#pragma unroll p_Nq
	  for(int m=0;m<p_Nq;++m){
	    //	    dfloat Dmk = s_D[m][k];
	    double Dmk = sread(s_D, m, k);
	    lapt0 += Dmk*s_Gpt[m][j][i];
	    lapt1 += Dmk*s_Gpt[p_Nq-1-m][j][i];
	  }

	  Ap0 += lapt0;
	  Ap1 -= lapt1;
	  
	  dlong base = i + j*p_Nq + element*p_Np;
	  
	  solOut[base + k*p_Nq*p_Nq] = Ap0;
	  solOut[base + (p_Nq-1-k)*p_Nq*p_Nq] = Ap1;
	}
      }
    }
  }
  
}

