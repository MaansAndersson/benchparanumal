/*

  The MIT License (MIT)

  Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.

*/

#define BP3_v00 BP3

#define interpolateHex3D(s_I, r_p, r_Ip, s_Ip)	\
  {						\
  						\
    for(int b=0;b<p_cubNq;++b;@inner(1)){		\
      for(int a=0;a<p_cubNq;++a;@inner(0)){		\
	if(a<p_Nq && b<p_Nq){				\
	  for(int k=0;k<p_cubNq;++k){			\
	    dfloat res = 0;				\
	    for(int c=0;c<p_Nq;++c){			\
	      res += s_I[k][c]*r_p[c];			\
	    }						\
	    s_Iq[k][b][a] = res;			\
	  }						\
	}						\
      }							\
    }							\
    							\
    @barrier("local");					\
   							\
    /* raise in b */					\
    for(int k=0;k<p_cubNq;++k;@inner(1)){		\
      for(int a=0;a<p_cubNq;++a;@inner(0)){		\
							\
	if(a<p_Nq){					\
	  for(int b=0;b<p_Nq;++b){			\
	    r_Ip[b] = s_Iq[k][b][a];			\
	  }						\
	  						\
	  for(int j=0;j<p_cubNq;++j){			\
	    dfloat res = 0;				\
	    for(int b=0;b<p_Nq;++b){			\
	      res += s_I[j][b]*r_Ip[b];			\
	    }						\
	    s_Iq[k][j][a] = res;			\
	  }						\
	}						\
      }							\
    }							\
    							\
    @barrier("local");					\
    							\
    /* raise in a */					\
    for(int k=0;k<p_cubNq;++k;@inner(1)){		\
      for(int j=0;j<p_cubNq;++j;@inner(0)){		\
	for(int a=0;a<p_Nq;++a){			\
	  r_Ip[a] = s_Iq[k][j][a];			\
	}						\
							\
	for(int i=0;i<p_cubNq;++i){			\
	  dfloat res = 0;				\
	  for(int a=0;a<p_Nq;++a){			\
	    res += s_I[i][a]*r_Ip[a];			\
	  }						\
	  s_Iq[k][j][i] = res;				\
	}						\
      }							\
    }							\
    							\
    @barrier("local");					\
  }

    
#define testHex3D(s_I, r_p, s_Iq)			\
  {							\
    /* lower 'k' */					\
    for(int j=0;j<p_cubNq;++j;@inner(1)){		\
      for(int i=0;i<p_cubNq;++i;@inner(0)){		\
      							\
	for(int c=0;c<p_Nq;++c){			\
	  dfloat res = 0;				\
	  for(int k=0;k<p_cubNq;++k){			\
	    res += s_I[k][c]*r_p[k];			\
	  }						\
	  s_Iq[c][j][i] = res;				\
	}						\
      }							\
    }							\
    							\
    @barrier("local");					\
    							\
    /* lower in 'j' */					\
    for(int c=0;c<p_cubNq;++c;@inner(1)){		\
      for(int i=0;i<p_cubNq;++i;@inner(0)){		\
							\
	if(c<p_Nq){					\
	  for(int j=0;j<p_cubNq;++j){			\
	    r_p[j] = s_Iq[c][j][i];			\
	  }						\
	  						\
	  for(int b=0;b<p_Nq;++b){			\
	    dfloat res = 0;				\
	    for(int j=0;j<p_cubNq;++j){			\
	      res += s_I[j][b]*r_p[j];			\
	    }						\
	    						\
	    s_Iq[c][b][i] = res;			\
	  }						\
	}						\
      }							\
    }							\
    							\
    @barrier("local");					\
    							\
    /* lower in 'i' */					\
    for(int c=0;c<p_cubNq;++c;@inner(1)){		\
      for(int b=0;b<p_cubNq;++b;@inner(0)){		\
							\
	if(b<p_Nq && c<p_Nq){				\
	  for(int i=0;i<p_cubNq;++i){			\
	    r_p[i] = s_Iq[c][b][i];			\
	  }						\
	  						\
	  for(int a=0;a<p_Nq;++a){			\
	    dfloat res = 0;				\
	    for(int i=0;i<p_cubNq;++i){			\
	      res += s_I[i][a]*r_p[i];			\
	    }						\
	    						\
	    s_Iq[c][b][a] = res;			\
	  }						\
	}						\
      }							\
    }							\
    							\
    @barrier("local");					\
    							\
  }						


@kernel void BP3_v00(const dlong Nelements,
		     @restrict const dlong  *elementList,
		     @restrict const dfloat *ggeo,
		     @restrict const dfloat *D,
		     @restrict const dfloat *I,
		     const dfloat lambda,
		     @restrict const dfloat *q,
		     @restrict dfloat *Aq){
  
  for(dlong e=0; e<Nelements; ++e; @outer(0)){
    
    @shared dfloat s_Iq[p_cubNq][p_cubNq][p_cubNq];	
    
    @shared dfloat s_D[p_cubNq][p_cubNq];
    @shared dfloat s_I[p_cubNq][p_Nq];
    
    @shared dfloat s_q[p_cubNq][p_cubNq];
    
    @shared dfloat s_Gqr[p_cubNq][p_cubNq];
    @shared dfloat s_Gqs[p_cubNq][p_cubNq];

    @exclusive dfloat r_qt;
    
    // heavy on registers (FP64, 2*3*8 for N=7)
    @exclusive dfloat r_q[p_cubNq], r_Aq[p_cubNq];

    @exclusive dlong element;
    
    // array of threads
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
	
        s_D[j][i] = D[p_cubNq*j+i]; 
	
	if(i<p_Nq){
	  s_I[j][i] = I[p_Nq*j+i];
	}

	element = elementList[e];
	
        // load pencil of u into register
        const dlong base = i + j*p_Nq + element*p_Np;
	
	if(i<p_Nq && j<p_Nq){
	  for(int k = 0; k < p_Nq; k++) {
	    r_q[k] = q[base + k*p_Nq*p_Nq];
	  }
	}


      }
    }
    
    // raise pressure degree
    interpolateHex3D(s_I, r_q, r_Aq, s_Iq);

    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
	
	for(int k = 0; k < p_cubNq; k++) {
	  r_Aq[k] = 0.f; // zero the accumulator
	}
      }
    }
    
    // Layer by layer
#pragma unroll p_cubNq
    for(int k = 0;k < p_cubNq; k++){
      
      @barrier("local");
      
      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
	  
          // share u(:,:,k)
          dfloat qr = 0, qs = 0;

	  r_qt = 0;
	  
#pragma unroll p_cubNq
          for(int m = 0; m < p_cubNq; m++) {
            dfloat Dim = s_D[i][m];
            dfloat Djm = s_D[j][m];
            dfloat Dkm = s_D[k][m];

            qr += Dim*s_Iq[k][j][m];
            qs += Djm*s_Iq[k][m][i];
	    r_qt += Dkm*s_Iq[m][j][i];	    
          }
	  
          // prefetch geometric factors
          const dlong gbase = element*p_Nggeo*p_cubNp + k*p_cubNq*p_cubNq + j*p_cubNq + i;
	  
          const dfloat G00 = ggeo[gbase+p_G00ID*p_cubNp];
          const dfloat G01 = ggeo[gbase+p_G01ID*p_cubNp];
          const dfloat G02 = ggeo[gbase+p_G02ID*p_cubNp];
          const dfloat G11 = ggeo[gbase+p_G11ID*p_cubNp];
          const dfloat G12 = ggeo[gbase+p_G12ID*p_cubNp];
          const dfloat G22 = ggeo[gbase+p_G22ID*p_cubNp];
          const dfloat GWJ = ggeo[gbase+p_GWJID*p_cubNp];
	  
          s_Gqr[j][i] = (G00*qr + G01*qs + G02*r_qt);
          s_Gqs[j][i] = (G01*qr + G11*qs + G12*r_qt);

          r_qt = G02*qr + G12*qs + G22*r_qt;

          r_Aq[k] += GWJ*lambda*s_Iq[k][j][i];
        }
      }
      
      @barrier("local");
      
      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
	  
	  dfloat Aqtmp = 0;
	  
#pragma unroll p_cubNq
          for(int m = 0; m < p_cubNq; m++){
            dfloat Dmi = s_D[m][i];
            dfloat Dmj = s_D[m][j];
            dfloat Dkm = s_D[k][m];
	    
            Aqtmp += Dmi*s_Gqr[j][m];
            Aqtmp += Dmj*s_Gqs[m][i];
            r_Aq[m] += Dkm*r_qt;
          }

          r_Aq[k] += Aqtmp;
        }
      }
    }
    
    // lower pressure degree
    testHex3D(s_I, r_Aq, s_Iq);

    // write out
    
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){

	if(i<p_Nq && j<p_Nq){
#pragma unroll p_Nq
	  for(int k = 0; k < p_Nq; k++){
	    const dlong id = element*p_Np +k*p_Nq*p_Nq+ j*p_Nq + i;
	    Aq[id] = s_Iq[k][j][i];
	  }
	}
      }
    }
  }
}



@kernel void BP3Dot(const dlong Nelements,
		    @restrict const dlong  *elementList,
		    @restrict const dfloat *ggeo,
		    @restrict const dfloat *D,
		    @restrict const dfloat *I,
		    const dfloat lambda,
		    @restrict const dfloat *q,
		    @restrict dfloat *Aq,
		    @restrict dfloat *qAq){
  
  for(dlong e=0; e<Nelements; ++e; @outer(0)){
    
    @shared dfloat s_Iq[p_cubNq][p_cubNq][p_cubNq];	
    
    @shared dfloat s_D[p_cubNq][p_cubNq];
    @shared dfloat s_I[p_cubNq][p_Nq];
    
    @shared dfloat s_q[p_cubNq][p_cubNq];
    
    @shared dfloat s_Gqr[p_cubNq][p_cubNq];
    @shared dfloat s_Gqs[p_cubNq][p_cubNq];

    @exclusive dfloat r_qt;
    
    // heavy on registers (FP64, 2*3*8 for N=7)
    @exclusive dfloat r_q[p_cubNq], r_Aq[p_cubNq];

    @exclusive dlong element;
    
    // array of threads
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
	
        s_D[j][i] = D[p_cubNq*j+i]; 
	
	if(i<p_Nq){
	  s_I[j][i] = I[p_Nq*j+i];
	}
	
	element = elementList[e];
	
        // load pencil of u into register
        const dlong base = i + j*p_Nq + element*p_Np;
	
	if(i<p_Nq && j<p_Nq){
	  for(int k = 0; k < p_Nq; k++) {
	    r_q[k] = q[base + k*p_Nq*p_Nq];
	  }
	}

	for(int k = 0; k < p_cubNq; k++) {
	  r_Aq[k] = 0.f; // zero the accumulator
	}
      }
    }
    
    // raise pressure degree
    interpolateHex3D(s_I, r_q, r_Aq, s_Iq);


    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
	
	for(int k = 0; k < p_cubNq; k++) {
	  r_Aq[k] = 0.f; // zero the accumulator
	}
      }
    }
    
    
    // Layer by layer
#pragma unroll p_cubNq
    for(int k = 0;k < p_cubNq; k++){
      
      @barrier("local");
      
      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
	  
          r_qt = 0;
	  
#pragma unroll p_cubNq
          for(int m = 0; m < p_cubNq; m++) {
            dfloat Dkm = s_D[k][m];
            r_qt += Dkm*s_Iq[m][j][i];
          }

          dfloat qr = 0.f, qs = 0.f;
	  
#pragma unroll p_cubNq
          for(int m = 0; m < p_cubNq; m++) {
            dfloat Dim = s_D[i][m];
            dfloat Djm = s_D[j][m];
	    
            qr += Dim*s_Iq[k][j][m];
            qs += Djm*s_Iq[k][m][i];
          }
	  
          // prefetch geometric factors
          const dlong gbase = element*p_Nggeo*p_cubNp + k*p_cubNq*p_cubNq + j*p_cubNq + i;
	  
          const dfloat G00 = ggeo[gbase+p_G00ID*p_cubNp];
          const dfloat G01 = ggeo[gbase+p_G01ID*p_cubNp];
          const dfloat G02 = ggeo[gbase+p_G02ID*p_cubNp];
          const dfloat G11 = ggeo[gbase+p_G11ID*p_cubNp];
          const dfloat G12 = ggeo[gbase+p_G12ID*p_cubNp];
          const dfloat G22 = ggeo[gbase+p_G22ID*p_cubNp];
          const dfloat GWJ = ggeo[gbase+p_GWJID*p_cubNp];

          s_Gqr[j][i] = (G00*qr + G01*qs + G02*r_qt);
          s_Gqs[j][i] = (G01*qr + G11*qs + G12*r_qt);
	  
          r_qt = G02*qr + G12*qs + G22*r_qt;
	  
          r_Aq[k] += GWJ*lambda*s_Iq[k][j][i];
        }
      }
      
      @barrier("local");
      
      for(int j=0;j<p_cubNq;++j;@inner(1)){
        for(int i=0;i<p_cubNq;++i;@inner(0)){
	  
	  dfloat Aqtmp = 0;

#pragma unroll p_cubNq
          for(int m = 0; m < p_cubNq; m++){
            dfloat Dmi = s_D[m][i];
            dfloat Dmj = s_D[m][j];
            dfloat Dkm = s_D[k][m];
	    
            Aqtmp += Dmi*s_Gqr[j][m];
            Aqtmp += Dmj*s_Gqs[m][i];
            r_Aq[m] += Dkm*r_qt;
          }

          r_Aq[k] += Aqtmp;
        }
      }
    }
      
    // lower pressure degree
    testHex3D(s_I, r_Aq, s_Iq);
    
    // write out
    @shared volatile dfloat s_qAq[p_Nq*p_Nq];
    
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){

	dfloat res = 0;
	
	if(i<p_Nq && j<p_Nq){
#pragma unroll p_cubNq
	  for(int k = 0; k < p_Nq; k++){
	    const dlong id = element*p_Np +k*p_Nq*p_Nq+ j*p_Nq + i;
	    Aq[id] = s_Iq[k][j][i];
	    res += r_q[k]*s_Iq[k][j][i];
	  }

	  s_qAq[j*p_Nq+i] = res;
	}
      }
    }

    @shared volatile dfloat s_warp[32];
    
    // do partial reduction on p.Ap [ two phase vSIMD32 sync ]
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
	int t = j*p_cubNq + i;
	int n = t%32;
	int w = t/32;
	if(t<p_Nq*p_Nq){
	  // totally hard wired for SIMD32
	  if(n<16 && t+16<p_Nq*p_Nq) s_qAq[t] += s_qAq[t+16];
	  if(n< 8 && t+8<p_Nq*p_Nq)  s_qAq[t] += s_qAq[t+8];
	  if(n< 4 && t+4<p_Nq*p_Nq)  s_qAq[t] += s_qAq[t+4];
	  if(n< 2 && t+2<p_Nq*p_Nq)  s_qAq[t] += s_qAq[t+2];
	  if(n< 1 && t+1<p_Nq*p_Nq)  s_qAq[t] += s_qAq[t+1];
	  if(n==0) s_warp[w] = s_qAq[t];
	}
      }
    }
    
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
	int t = j*p_cubNq + i;
	int n = t%32;
	int w = t/32;
	
	if(w==0 && n*32<p_Nq*p_Nq){ // is this the base warp, and was there an entry from above
	  if( n<16 && ((n+16)*32)<p_Nq*p_Nq) s_warp[n] += s_warp[n+16];
	  if( n< 8 && ((n+ 8)*32)<p_Nq*p_Nq) s_warp[n] += s_warp[n+ 8];
	  if( n< 4 && ((n+ 4)*32)<p_Nq*p_Nq) s_warp[n] += s_warp[n+ 4];
	  if( n< 2 && ((n+ 2)*32)<p_Nq*p_Nq) s_warp[n] += s_warp[n+ 2];
	  if( n< 1 && ((n+ 1)*32)<p_Nq*p_Nq) s_warp[n] += s_warp[n+ 1];
	  
	  if(n==0){
	    dfloat res = s_warp[0];
	    atomicAdd(qAq, res);
	  }
	}
      }
    }
  }
}


