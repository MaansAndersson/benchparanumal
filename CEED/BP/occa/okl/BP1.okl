/*

  The MIT License (MIT)

  Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.

*/

#define interpolateHex3D(s_I, r_q, r_Aq)	\
  {						\
    for(int b=0;b<p_cubNq;++b;@inner(1)){	\
      for(int a=0;a<p_cubNq;++a;@inner(0)){	\
	if(a<p_Nq && b<p_Nq){			\
	  for(int k=0;k<p_cubNq;++k){		\
	    dfloat res = 0;			\
	    for(int c=0;c<p_Nq;++c){		\
	      res += s_I[k][c]*r_q[c];		\
	    }					\
	    s_Iq[k][b][a] = res;		\
	  }					\
	}					\
      }						\
    }						\
						\
    @barrier("local");				\
						\
    /* raise in b */				\
    for(int k=0;k<p_cubNq;++k;@inner(1)){	\
      for(int a=0;a<p_cubNq;++a;@inner(0)){	\
						\
	if(a<p_Nq){				\
	  for(int b=0;b<p_Nq;++b){		\
	    r_Aq[b] = s_Iq[k][b][a];		\
	  }					\
						\
	  for(int j=0;j<p_cubNq;++j){		\
	    dfloat res = 0;			\
	    for(int b=0;b<p_Nq;++b){		\
	      res += s_I[j][b]*r_Aq[b];		\
	    }					\
	    s_Iq[k][j][a] = res;		\
	  }					\
	}					\
      }						\
    }						\
						\
    @barrier("local");				\
						\
    /* raise in a */				\
    for(int k=0;k<p_cubNq;++k;@inner(1)){	\
      for(int j=0;j<p_cubNq;++j;@inner(0)){	\
	for(int a=0;a<p_Nq;++a){		\
	  r_Aq[a] = s_Iq[k][j][a];		\
	}					\
						\
	for(int i=0;i<p_cubNq;++i){		\
	  dfloat res = 0;			\
	  for(int a=0;a<p_Nq;++a){		\
	    res += s_I[i][a]*r_Aq[a];		\
	  }					\
	  s_Iq[k][j][i] = res;			\
	}					\
      }						\
    }						\
						\
    @barrier("local");				\
						\
    /* copy back to registers */		\
    for(int j=0;j<p_cubNq;++j;@inner(1)){	\
      for(int i=0;i<p_cubNq;++i;@inner(0)){	\
	for(int k=0;k<p_cubNq;++k){		\
	  r_Aq[k] = s_Iq[k][j][i];		\
	}					\
      }						\
    }						\
    @barrier("local");				\
  }							
    
#define testHex3D(s_I, r_q)			\
  {						\
    /* lower in 'k' */				\
    for(int j=0;j<p_cubNq;++j;@inner(1)){	\
      for(int i=0;i<p_cubNq;++i;@inner(0)){	\
						\
	for(int c=0;c<p_Nq;++c){		\
	  dfloat res = 0;			\
	  for(int k=0;k<p_cubNq;++k){		\
	    res += s_I[k][c]*r_q[k];		\
	  }					\
	  s_Iq[c][j][i] = res;			\
	}					\
      }						\
    }						\
						\
    @barrier("local");				\
						\
    /* lower in 'j' */				\
    for(int c=0;c<p_cubNq;++c;@inner(1)){	\
      for(int i=0;i<p_cubNq;++i;@inner(0)){	\
						\
	if(c<p_Nq){				\
	  for(int j=0;j<p_cubNq;++j){		\
	    r_q[j] = s_Iq[c][j][i];		\
	  }					\
						\
	  for(int b=0;b<p_Nq;++b){		\
	    dfloat res = 0;			\
	    for(int j=0;j<p_cubNq;++j){		\
	      res += s_I[j][b]*r_q[j];		\
	    }					\
						\
	    s_Iq[c][b][i] = res;		\
	  }					\
	}					\
      }						\
    }						\
						\
    @barrier("local");				\
						\
    /* lower in 'i' */				\
    for(int c=0;c<p_cubNq;++c;@inner(1)){	\
      for(int b=0;b<p_cubNq;++b;@inner(0)){	\
						\
	if(b<p_Nq && c<p_Nq){			\
	  for(int i=0;i<p_cubNq;++i){		\
	    r_q[i] = s_Iq[c][b][i];		\
	  }					\
						\
	  for(int a=0;a<p_Nq;++a){		\
	    dfloat res = 0;			\
	    for(int i=0;i<p_cubNq;++i){		\
	      res += s_I[i][a]*r_q[i];		\
	    }					\
						\
	    s_Iq[c][b][a] = res;		\
	  }					\
	}					\
      }						\
    }						\
						\
    @barrier("local");				\
						\
    /* copy back to registers */		\
    for(int b=0;b<p_cubNq;++b;@inner(1)){	\
      for(int a=0;a<p_cubNq;++a;@inner(0)){	\
	if(a<p_Nq && b<p_Nq){			\
	  for(int c=0;c<p_Nq;++c){		\
	    r_q[c] = s_Iq[c][b][a];		\
	  }					\
	}					\
      }						\
    }						\
						\
    @barrier("local");				\
  }						


@kernel void BP1_v0(const dlong Nelements,
		    @restrict const dlong *elementList,
		    @restrict const dfloat *ggeo,
		    @restrict const dfloat *I,
		    @restrict const dfloat *q,
		    @restrict dfloat *Aq){
  		    
  for(dlong e=0; e<Nelements; ++e; @outer(0)){
    
    @shared dfloat s_Iq[p_cubNq][p_cubNq][p_cubNq];	
    @shared dfloat s_I[p_cubNq][p_Nq];

    @exclusive dfloat r_q[p_cubNq];
    @exclusive dlong element;
    
    // array of threads
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
	
	if(i<p_Nq){
	  s_I[j][i] = I[p_Nq*j+i];
	}
	
	element = elementList[e];
	// load pencil of u into register
	const dlong base = i + j*p_Nq + element*p_Np;
	
	if(i<p_Nq && j<p_Nq){
	  for(int k = 0; k < p_Nq; k++) {
	    r_q[k] = q[base + k*p_Nq*p_Nq];
	  }
	}
      }
    }
    
    // raise pressure degree
    for(int b=0;b<p_cubNq;++b;@inner(1)){	
      for(int a=0;a<p_cubNq;++a;@inner(0)){	
	if(a<p_Nq && b<p_Nq){
#pragma unroll p_cubNq
	  for(int k=0;k<p_cubNq;++k){		
	    dfloat res = 0;
#pragma unroll p_Nq
	    for(int c=0;c<p_Nq;++c){		
	      //	      res += s_I[k][c]*r_q[c];
	      res += I[k*p_Nq+c]*r_q[c];		
	    }					
	    s_Iq[k][b][a] = res;		
	  }					
	}					
      }						
    }						
    
    @barrier("local");				
    
    /* raise in b */				
    for(int k=0;k<p_cubNq;++k;@inner(1)){	
      for(int a=0;a<p_cubNq;++a;@inner(0)){	
	
	if(a<p_Nq){				
	  for(int b=0;b<p_Nq;++b){		
	    r_q[b] = s_Iq[k][b][a];		
	  }					

#pragma unroll p_cubNq
	  for(int j=0;j<p_cubNq;++j){		
	    dfloat res = 0;
#pragma unroll p_Nq
	    for(int b=0;b<p_Nq;++b){		
	      res += s_I[j][b]*r_q[b];
	      //	      res += I[j*p_Nq+b]*r_q[b];		
	    }					
	    s_Iq[k][j][a] = res;		
	  }					
	}					
      }						
    }						
						
    @barrier("local");				
						
    /* raise in a */				
    for(int k=0;k<p_cubNq;++k;@inner(1)){	
      for(int j=0;j<p_cubNq;++j;@inner(0)){	
	for(int a=0;a<p_Nq;++a){		
	  r_q[a] = s_Iq[k][j][a];		
	}					

#pragma unroll p_cubNq
	for(int i=0;i<p_cubNq;++i){		
	  dfloat res = 0;
#pragma unroll p_Nq
	  for(int a=0;a<p_Nq;++a){		
	    res += s_I[i][a]*r_q[a];		
	  }					
	  s_Iq[k][j][i] = res;			
	}					
      }						
    }						

    /* copy back to registers */		
    for(int j=0;j<p_cubNq;++j;@inner(1)){	
      for(int i=0;i<p_cubNq;++i;@inner(0)){	
	for(int k=0;k<p_cubNq;++k){		
	  // prefetch geometric factors
	  const dlong gbase = element*p_Nggeo*p_cubNp + k*p_cubNq*p_cubNq + j*p_cubNq + i;
	  const dfloat GWJ = ggeo[gbase+p_GWJID*p_cubNp];
	  r_q[k] = GWJ*s_Iq[k][j][i];
	}

#pragma unroll p_Nq
	for(int c=0;c<p_Nq;++c){		
	  dfloat res = 0;
#pragma unroll p_cubNq
	  for(int k=0;k<p_cubNq;++k){		
	    res += s_I[k][c]*r_q[k];		
	  }					
	  s_Iq[c][j][i] = res;			
	}					
      }						
    }						
    
    @barrier("local");				
						
    /* lower in 'j' */				
    for(int c=0;c<p_cubNq;++c;@inner(1)){	
      for(int i=0;i<p_cubNq;++i;@inner(0)){	
	
	if(c<p_Nq){				
	  for(int j=0;j<p_cubNq;++j){		
	    r_q[j] = s_Iq[c][j][i];		
	  }					

#pragma unroll p_Nq
	  for(int b=0;b<p_Nq;++b){		
	    dfloat res = 0;
#pragma unroll p_cubNq
	    for(int j=0;j<p_cubNq;++j){		
	      res += s_I[j][b]*r_q[j];		
	    }					
	    
	    s_Iq[c][b][i] = res;		
	  }					
	}					
      }						
    }						
						
    @barrier("local");				
    
    /* lower in 'i' */				
    for(int c=0;c<p_cubNq;++c;@inner(1)){	
      for(int b=0;b<p_cubNq;++b;@inner(0)){	
	
	if(b<p_Nq && c<p_Nq){			
	  for(int i=0;i<p_cubNq;++i){		
	    r_q[i] = s_Iq[c][b][i];		
	  }					

#pragma unroll p_Nq
	  for(int a=0;a<p_Nq;++a){		
	    dfloat res = 0;
#pragma unroll p_cubNq
	    for(int i=0;i<p_cubNq;++i){		
	      res += s_I[i][a]*r_q[i];		
	    }					
	    
	    s_Iq[c][b][a] = res;		
	  }					
	}					
      }						
    }					
    
    @barrier("local");				
    
    // write out
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){

#if 1
	if(i<p_Nq && j<p_Nq){
#pragma unroll p_cubNq
	  for(int k = 0; k < p_Nq; k++){
	    const dlong id = element*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;
	    Aq[id] = s_Iq[k][j][i];
	  }
	}
#else
	int n = i + j*p_cubNq;
	while(n<p_Np){
	  const dlong id = element*p_Np + n;
	  int a = n%p_Nq;
	  int b = (n/p_Nq)%p_Nq;
	  int c = (n/(p_Nq*p_Nq));
	  Aq[id] = s_Iq[c][b][a];

	  n += p_cubNq*p_cubNq;
	}

#endif
      }
    }
  }
}




@kernel void BP1Dot_v0(const dlong Nelements,
		       @restrict const dlong *elementList,
		       @restrict const dfloat *ggeo,
		       @restrict const dfloat *I,
		       @restrict const dfloat *q,
		       @restrict dfloat *Aq,
		       @restrict dfloat *qAq){
  
  for(dlong e=0; e<Nelements; ++e; @outer(0)){
    
    @shared dfloat s_Iq[p_cubNq][p_cubNq][p_cubNq];	
    
    @shared dfloat s_I[p_cubNq][p_Nq];
    
    @exclusive dfloat r_q[p_cubNq];
    @exclusive dfloat r_Aq[p_cubNq];

    @exclusive dlong element;
    
    // array of threads
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
	
	if(i<p_Nq){
	  s_I[j][i] = I[p_Nq*j+i];
	}

	element = elementList[e];
	// load pencil of u into register
	const dlong base = i + j*p_Nq + element*p_Np;
	
	if(i<p_Nq && j<p_Nq){
	  for(int k = 0; k < p_Nq; k++) {
	    r_q[k] = q[base + k*p_Nq*p_Nq];
	  }
	}
      }
    }

    // raise pressure degree
    interpolateHex3D(s_I, r_q, r_Aq);
    
    @barrier("local");
      
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
#pragma unroll p_cubNq
	for(int k = 0;k < p_cubNq; k++){
	  // prefetch geometric factors
	  const dlong gbase = element*p_Nggeo*p_cubNp + k*p_cubNq*p_cubNq + j*p_cubNq + i;
	  const dfloat GWJ = ggeo[gbase+p_GWJID*p_cubNp];
	  r_Aq[k] *= GWJ;
	}
      }    
    }

    @barrier("local");
    
    // lower pressure degree
    testHex3D(s_I, r_Aq);

    @shared volatile dfloat s_qAq[p_Nq*p_Nq];
    
    // write out
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
	
	dfloat res = 0;
	
	if(i<p_Nq && j<p_Nq){
#pragma unroll p_cubNq
	  for(int k = 0; k < p_Nq; k++){
	    const dlong id = element*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;
	    Aq[id] = r_Aq[k];
	    res += r_q[k]*r_Aq[k];
	  }
	  s_qAq[j*p_Nq+i] = res;
	}
      }
    }

    @shared volatile dfloat s_warp[32];
    
    // do partial reduction on p.Ap [ two phase vSIMD32 sync ]
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
	int t = j*p_cubNq + i;
	int n = t%32;
	int w = t/32;
	if(t<p_Nq*p_Nq){
	  // totally hard wired for SIMD32
	  if(n<16 && t+16<p_Nq*p_Nq) s_qAq[t] += s_qAq[t+16];
	  if(n< 8 && t+8<p_Nq*p_Nq)  s_qAq[t] += s_qAq[t+8];
	  if(n< 4 && t+4<p_Nq*p_Nq)  s_qAq[t] += s_qAq[t+4];
	  if(n< 2 && t+2<p_Nq*p_Nq)  s_qAq[t] += s_qAq[t+2];
	  if(n< 1 && t+1<p_Nq*p_Nq)  s_qAq[t] += s_qAq[t+1];
	  if(n==0) s_warp[w] = s_qAq[t];
	}
      }
    }
    
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
	int t = j*p_cubNq + i;
	int n = t%32;
	int w = t/32;

	if(w==0 && n*32<p_Nq*p_Nq){ // is this the base warp, and was there an entry from above
	  if( n<16 && ((n+16)*32)<p_Nq*p_Nq) s_warp[n] += s_warp[n+16];
	  if( n< 8 && ((n+ 8)*32)<p_Nq*p_Nq) s_warp[n] += s_warp[n+ 8];
	  if( n< 4 && ((n+ 4)*32)<p_Nq*p_Nq) s_warp[n] += s_warp[n+ 4];
	  if( n< 2 && ((n+ 2)*32)<p_Nq*p_Nq) s_warp[n] += s_warp[n+ 2];
	  if( n< 1 && ((n+ 1)*32)<p_Nq*p_Nq) s_warp[n] += s_warp[n+ 1];
	  
	  if(n==0){
	    dfloat res = s_warp[0];
	    atomicAdd(qAq, res);
	  }
	}
      }
    }
  }
}


#define p_Kblk 4
  
#define blockInterpolateHex3D(s_I, r_q, r_Aq){	\
    for(int es=0;es<p_Kblk;++es;@inner(2)){	\
      for(int b=0;b<p_cubNq;++b;@inner(1)){	\
	for(int a=0;a<p_cubNq;++a;@inner(0)){	\
	  if(a<p_Nq && b<p_Nq){			\
	    for(int k=0;k<p_cubNq;++k){		\
	      dfloat res = 0;			\
	      for(int c=0;c<p_Nq;++c){		\
		res += s_I[k][c]*r_q[c];	\
	      }					\
	      s_Iq[es][k][b][a] = res;		\
	    }					\
	  }					\
	}					\
      }						\
    }						\
    @barrier("local");				\
    for(int es=0;es<p_Kblk;++es;@inner(2)){	\
      for(int k=0;k<p_cubNq;++k;@inner(1)){	\
	for(int a=0;a<p_cubNq;++a;@inner(0)){	\
	  if(a<p_Nq){				\
	    for(int b=0;b<p_Nq;++b){		\
	      r_Aq[b] = s_Iq[es][k][b][a];	\
	    }					\
	    for(int j=0;j<p_cubNq;++j){		\
	      dfloat res = 0;			\
	      for(int b=0;b<p_Nq;++b){		\
		res += s_I[j][b]*r_Aq[b];	\
	      }					\
	      s_Iq[es][k][j][a] = res;		\
	    }					\
	  }					\
	}					\
      }						\
    }						\
    @barrier("local");				\
    for(int es=0;es<p_Kblk;++es;@inner(2)){	\
      for(int k=0;k<p_cubNq;++k;@inner(1)){	\
	for(int j=0;j<p_cubNq;++j;@inner(0)){	\
	  for(int a=0;a<p_Nq;++a){		\
	    r_Aq[a] = s_Iq[es][k][j][a];	\
	  }					\
	  for(int i=0;i<p_cubNq;++i){		\
	    dfloat res = 0;			\
	    for(int a=0;a<p_Nq;++a){		\
	      res += s_I[i][a]*r_Aq[a];		\
	    }					\
	    s_Iq[es][k][j][i] = res;		\
	  }					\
	}					\
      }						\
    }						\
    @barrier("local");				\
    for(int es=0;es<p_Kblk;++es;@inner(2)){	\
      for(int j=0;j<p_cubNq;++j;@inner(1)){	\
	for(int i=0;i<p_cubNq;++i;@inner(0)){	\
	  for(int k=0;k<p_cubNq;++k){		\
	    r_Aq[k] = s_Iq[es][k][j][i];	\
	  }					\
	}					\
      }						\
    }						\
    @barrier("local");				\
  }							



#define blockTestHex3D(s_I, r_q) {		\
  for(int es=0;es<p_Kblk;++es;@inner(2)){	\
    for(int j=0;j<p_cubNq;++j;@inner(1)){	\
      for(int i=0;i<p_cubNq;++i;@inner(0)){	\
	for(int c=0;c<p_Nq;++c){		\
	  dfloat res = 0;			\
	  for(int k=0;k<p_cubNq;++k){		\
	    res += s_I[k][c]*r_q[k];		\
	  }					\
	  s_Iq[es][c][j][i] = res;		\
	}					\
      }						\
    }						\
  }						\
  @barrier("local");				\
  for(int es=0;es<p_Kblk;++es;@inner(2)){	\
    for(int c=0;c<p_cubNq;++c;@inner(1)){	\
      for(int i=0;i<p_cubNq;++i;@inner(0)){	\
	if(c<p_Nq){				\
	  for(int j=0;j<p_cubNq;++j){		\
	    r_q[j] = s_Iq[es][c][j][i];		\
	  }					\
	  for(int b=0;b<p_Nq;++b){		\
	    dfloat res = 0;			\
	    for(int j=0;j<p_cubNq;++j){		\
	      res += s_I[j][b]*r_q[j];		\
	    }					\
	    s_Iq[es][c][b][i] = res;		\
	  }					\
	}					\
      }						\
    }						\
  }							\
  @barrier("local");					\
  for(int es=0;es<p_Kblk;++es;@inner(2)){		\
    for(int c=0;c<p_cubNq;++c;@inner(1)){		\
      for(int b=0;b<p_cubNq;++b;@inner(0)){		\
	if(b<p_Nq && c<p_Nq){				\
	  for(int i=0;i<p_cubNq;++i){			\
	    r_q[i] = s_Iq[es][c][b][i];			\
	  }						\
	  for(int a=0;a<p_Nq;++a){			\
	    dfloat res = 0;				\
	    for(int i=0;i<p_cubNq;++i){			\
	      res += s_I[i][a]*r_q[i];			\
	    }						\
	    s_Iq[es][c][b][a] = res;			\
	  }						\
	}						\
      }							\
    }							\
  }							\
  @barrier("local");					\
  for(int es=0;es<p_Kblk;++es;@inner(2)){		\
    for(int b=0;b<p_cubNq;++b;@inner(1)){		\
      for(int a=0;a<p_cubNq;++a;@inner(0)){		\
	if(a<p_Nq && b<p_Nq){				\
	  for(int c=0;c<p_Nq;++c){			\
	    r_q[c] = s_Iq[es][c][b][a];			\
	  }						\
	}						\
      }							\
    }							\
  }							\
  @barrier("local");					\
  }

@kernel void BP1_v1(const dlong Nelements,
		    @restrict const dlong *elementList,
		    @restrict const dfloat *ggeo,
		    @restrict const dfloat *I,
		    @restrict const dfloat *q,
		    @restrict dfloat *Aq){
  
  for(dlong eo=0; eo<Nelements; eo+=p_Kblk; @outer(0)){
    
    @shared dfloat s_Iq[p_Kblk][p_cubNq][p_cubNq][p_cubNq];	
    @shared dfloat s_I[p_cubNq][p_Nq];
    
    @exclusive dfloat r_q[p_cubNq], r_Aq[p_cubNq];
    @exclusive dlong element;
    
    // array of threads
    for(int es=0;es<p_Kblk;++es;@inner(2)){
      for(int j=0;j<p_cubNq;++j;@inner(1)){
	for(int i=0;i<p_cubNq;++i;@inner(0)){
	  
	  if(i<p_Nq && es==0){
	    s_I[j][i] = I[p_Nq*j+i];
	  }
	}
      }
    }
    
    for(int es=0;es<p_Kblk;++es;@inner(2)){
      for(int j=0;j<p_cubNq;++j;@inner(1)){
	for(int i=0;i<p_cubNq;++i;@inner(0)){
	  dlong e = es+eo;
	  if(e<Nelements){
	    
	    element = elementList[e];
	    // load pencil of u into register
	    const dlong base = i + j*p_Nq + element*p_Np;
	    
	    if(i<p_Nq && j<p_Nq){
	      for(int k = 0; k < p_Nq; k++) {
		r_q[k] = q[base + k*p_Nq*p_Nq];
	      }
	    }
	  }
	}
      }
    }
  
    // raise pressure degree
    blockInterpolateHex3D(s_I, r_q, r_Aq);
    
    @barrier("local");
    
    for(int es=0;es<p_Kblk;++es;@inner(2)){
      for(int j=0;j<p_cubNq;++j;@inner(1)){
	for(int i=0;i<p_cubNq;++i;@inner(0)){
	  dlong e = es+eo;
	  if(e<Nelements){
#pragma unroll p_cubNq
	    for(int k = 0;k < p_cubNq; k++){
	      // prefetch geometric factors
	      const dlong gbase = element*p_Nggeo*p_cubNp + k*p_cubNq*p_cubNq + j*p_cubNq + i;
	      const dfloat GWJ = ggeo[gbase+p_GWJID*p_cubNp];
	      r_Aq[k] *= GWJ;
	    }
	  }
	}    
      }
    }

    @barrier("local");
    
    // lower pressure degree
    blockTestHex3D(s_I, r_Aq);
    
    // write out
    for(int es=0;es<p_Kblk;++es;@inner(2)){
      for(int j=0;j<p_cubNq;++j;@inner(1)){
	for(int i=0;i<p_cubNq;++i;@inner(0)){
	  dlong e = es+eo;
	  if(e<Nelements){
	    if(i<p_Nq && j<p_Nq){
#pragma unroll p_cubNq
	      for(int k = 0; k < p_Nq; k++){
		const dlong id = element*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;
		Aq[id] = r_Aq[k];
	      }
	    }
	  }
	}
      }
    }
  }
}
    
@kernel void BP1Dot_v1(const dlong Nelements,
		       @restrict const dlong *elementList,
		       @restrict const dfloat *ggeo,
		       @restrict const dfloat *I,
		       @restrict const dfloat *q,
		       @restrict dfloat *Aq,
		       @restrict dfloat *qAq){
  
  for(dlong e=0; e<Nelements; ++e; @outer(0)){
    
    @shared dfloat s_Iq[p_cubNq][p_cubNq][p_cubNq];	
    
    @shared dfloat s_I[p_cubNq][p_Nq];
    
    @exclusive dfloat r_q[p_cubNq];
    @exclusive dfloat r_Aq[p_cubNq];

    @exclusive dlong element;
    
    // array of threads
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
	
	if(i<p_Nq){
	  s_I[j][i] = I[p_Nq*j+i];
	}

	element = elementList[e];
	// load pencil of u into register
	const dlong base = i + j*p_Nq + element*p_Np;
	
	if(i<p_Nq && j<p_Nq){
	  for(int k = 0; k < p_Nq; k++) {
	    r_q[k] = q[base + k*p_Nq*p_Nq];
	  }
	}
      }
    }

    // raise pressure degree
    interpolateHex3D(s_I, r_q, r_Aq);
    
    @barrier("local");
      
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
#pragma unroll p_cubNq
	for(int k = 0;k < p_cubNq; k++){
	  // prefetch geometric factors
	  const dlong gbase = element*p_Nggeo*p_cubNp + k*p_cubNq*p_cubNq + j*p_cubNq + i;
	  const dfloat GWJ = ggeo[gbase+p_GWJID*p_cubNp];
	  r_Aq[k] *= GWJ;
	}
      }    
    }

    @barrier("local");
    
    // lower pressure degree
    testHex3D(s_I, r_Aq);

    @shared volatile dfloat s_qAq[p_Nq*p_Nq];
    
    // write out
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
	
	dfloat res = 0;
	
	if(i<p_Nq && j<p_Nq){
#pragma unroll p_cubNq
	  for(int k = 0; k < p_Nq; k++){
	    const dlong id = element*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;
	    Aq[id] = r_Aq[k];
	    res += r_q[k]*r_Aq[k];
	  }
	  s_qAq[j*p_Nq+i] = res;
	}
      }
    }

    @shared volatile dfloat s_warp[32];
    
    // do partial reduction on p.Ap [ two phase vSIMD32 sync ]
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
	int t = j*p_cubNq + i;
	int n = t%32;
	int w = t/32;
	if(t<p_Nq*p_Nq){
	  // totally hard wired for SIMD32
	  if(n<16 && t+16<p_Nq*p_Nq) s_qAq[t] += s_qAq[t+16];
	  if(n< 8 && t+8<p_Nq*p_Nq)  s_qAq[t] += s_qAq[t+8];
	  if(n< 4 && t+4<p_Nq*p_Nq)  s_qAq[t] += s_qAq[t+4];
	  if(n< 2 && t+2<p_Nq*p_Nq)  s_qAq[t] += s_qAq[t+2];
	  if(n< 1 && t+1<p_Nq*p_Nq)  s_qAq[t] += s_qAq[t+1];
	  if(n==0) s_warp[w] = s_qAq[t];
	}
      }
    }
    
    for(int j=0;j<p_cubNq;++j;@inner(1)){
      for(int i=0;i<p_cubNq;++i;@inner(0)){
	int t = j*p_cubNq + i;
	int n = t%32;
	int w = t/32;

	if(w==0 && n*32<p_Nq*p_Nq){ // is this the base warp, and was there an entry from above
	  if( n<16 && ((n+16)*32)<p_Nq*p_Nq) s_warp[n] += s_warp[n+16];
	  if( n< 8 && ((n+ 8)*32)<p_Nq*p_Nq) s_warp[n] += s_warp[n+ 8];
	  if( n< 4 && ((n+ 4)*32)<p_Nq*p_Nq) s_warp[n] += s_warp[n+ 4];
	  if( n< 2 && ((n+ 2)*32)<p_Nq*p_Nq) s_warp[n] += s_warp[n+ 2];
	  if( n< 1 && ((n+ 1)*32)<p_Nq*p_Nq) s_warp[n] += s_warp[n+ 1];
	  
	  if(n==0){
	    dfloat res = s_warp[0];
	    atomicAdd(qAq, res);
	  }
	}
      }
    }
  }
}

#if 1
@kernel void BP1_v2(const dlong Nelements,
		    @restrict const dlong *elementList,
		    @restrict const dfloat *ggeo,
		    @restrict const dfloat *I,
		    @restrict const dfloat *q,
		    @restrict dfloat *Aq){
  
  for(dlong e=0; e<Nelements;++e; @outer(0)){
    
    @shared dfloat s_Iq[p_cubNq][p_cubNq][p_cubNq];
    @shared dfloat s_q[p_cubNq][p_cubNq][p_cubNq];	

    @shared dfloat s_I[p_cubNq][p_Nq];    
    
    @exclusive dlong element;
    
    // array of threads
    for(int k=0;k<p_cubNq;++k;@inner(2)){
      for(int j=0;j<p_cubNq;++j;@inner(1)){
	for(int i=0;i<p_cubNq;++i;@inner(0)){
	  
	  if(k==0 && k<p_Nq){
	    s_I[j][i] = I[p_Nq*j+i];
	  }
	  
	  element = elementList[e];
	  
	  if(i<p_Nq && j<p_Nq && k<p_Nq){
	    const dlong base = i + j*p_Nq + k*p_Nq*p_Nq + element*p_Np;
	    s_q[k][j][i] = q[base + k*p_Nq*p_Nq];
	  }
	}
      }
    }
    
    for(int k=0;k<p_cubNq;++k;@inner(2)){	
      for(int b=0;b<p_cubNq;++b;@inner(1)){	
	for(int a=0;a<p_cubNq;++a;@inner(0)){	
	  if(a<p_Nq && b<p_Nq){			
	    dfloat res = 0;
#pragma unroll p_Nq
	    for(int c=0;c<p_Nq;++c){		

	      res += s_I[k][c]*s_q[k][b][a];
	    }					
	    s_Iq[k][b][a] = res;		
	  }					
	}					
      }						
    }						
    
    for(int k=0;k<p_cubNq;++k;@inner(2)){	
      for(int j=0;j<p_cubNq;++j;@inner(1)){	
	for(int a=0;a<p_cubNq;++a;@inner(0)){	
	  if(a<p_Nq){				
	    dfloat res = 0;
#pragma unroll p_Nq
	    for(int b=0;b<p_Nq;++b){		
	      res += s_I[j][b]*s_Iq[k][b][a];	
	    }					
	    s_q[k][j][a] = res;			
	  }					
	}					
      }						
    }						
    
    for(int k=0;k<p_cubNq;++k;@inner(2)){	
      for(int j=0;j<p_cubNq;++j;@inner(1)){	
	for(int i=0;i<p_cubNq;++i;@inner(0)){

	  const dlong gbase = element*p_Nggeo*p_cubNp + k*p_cubNq*p_cubNq + j*p_cubNq + i;
	  const dfloat GWJ = ggeo[gbase+p_GWJID*p_cubNp];
	  
	  dfloat res = 0;
#pragma unroll p_Nq
	  for(int a=0;a<p_Nq;++a){		
	    res += s_I[i][a]*s_q[k][j][a];	
	  }					
	  
	  s_Iq[k][j][i] = GWJ*res;			
	}    
      }
    }
    
    for(int k=0;k<p_cubNq;++k;@inner(2)){	
      for(int j=0;j<p_cubNq;++j;@inner(1)){	
	for(int a=0;a<p_cubNq;++a;@inner(0)){	
	  if(a<p_Nq){				
	    dfloat res = 0;
#pragma unroll p_cubNq
	    for(int i=0;i<p_cubNq;++i){		
	      res += s_I[i][a]*s_Iq[k][j][i];	
	    }					
	    s_q[k][j][a] = res;			
	  }					
	}					
      }						
    }						

    for(int k=0;k<p_cubNq;++k;@inner(2)){	
      for(int b=0;b<p_cubNq;++b;@inner(1)){	
	for(int a=0;a<p_cubNq;++a;@inner(0)){	
	  if(a<p_Nq && b<p_Nq){				
	    dfloat res = 0;

#pragma unroll p_cubNq
	    for(int j=0;j<p_cubNq;++j){		
	      res += s_I[j][b]*s_q[k][j][a];	
	    }					
	    s_Iq[k][b][a] = res;			
	  }					
	}					
      }						
    }						

    for(int c=0;c<p_cubNq;++c;@inner(2)){	
      for(int b=0;b<p_cubNq;++b;@inner(1)){	
	for(int a=0;a<p_cubNq;++a;@inner(0)){	
	  if(a<p_Nq && b<p_Nq && c<p_Nq){				
	    dfloat res = 0;
#pragma unroll p_cubNq
	    for(int k=0;k<p_cubNq;++k){		
	      res += s_I[k][c]*s_Iq[k][b][a];	
	    }					
	    const dlong id = element*p_Np + c*p_Nq*p_Nq + b*p_Nq + a;
	    Aq[id] = res;
	  }
	}
      }
    }
  }
}
#endif
