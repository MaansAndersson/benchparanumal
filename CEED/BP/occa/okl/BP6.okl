/*

  The MIT License (MIT)

  Copyright (c) 2017 Tim Warburton, Noel Chalmers, Jesse Chan, Ali Karakus

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.

*/


// default to element-per-threadblock
@kernel void BP6_v0(const dlong Nelements,
		    @restrict const dlong *elementList,
		    const dlong offset,
		    @restrict const  dfloat *  ggeo,
		    @restrict const  dfloat *  D,
		    const dfloat lambda,
		    @restrict const  dfloat *  q,
		    @restrict dfloat *  Aq){

  for(dlong e=0; e<Nelements; ++e; @outer(0)){

    @shared dfloat s_D[p_Nq][p_Nq];
    @shared dfloat s_q[p_Nfields][p_Nq][p_Nq];

    @shared dfloat s_Gqr[p_Nfields][p_Nq][p_Nq];
    @shared dfloat s_Gqs[p_Nfields][p_Nq][p_Nq];

    @exclusive dfloat r_qt, r_Gqt, r_Auk;
    @exclusive dfloat r_q[p_Nq]; // register array to hold u(i,j,0:N) private to thread
    @exclusive dfloat r_Aq[p_Nq];// array for results Au(i,j,0:N)

    @shared dfloat s_ggeo[p_Nggeo][p_Nq][p_Nq];

    @exclusive dlong element;
    
    // array of threads
    for(int fld=0;fld<p_Nfields;++fld;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
	for(int i=0;i<p_Nq;++i;@inner(0)){
	  if(fld==0)
	    s_D[j][i] = D[p_Nq*j+i]; 
	  
	  element = elementList[e];
	  
	  // load pencil of u into register
	  const dlong base = i + j*p_Nq + element*p_Np + fld*offset;
	  for(int k = 0; k < p_Nq; k++) {
	    r_q[k] = q[base + k*p_Nq*p_Nq]; // prefetch operation
	    r_Aq[k] = 0.f; // zero the accumulator
	  }
	}
      }
    }
    
    
#pragma unroll p_Nq
    for(int k = 0;k < p_Nq; k++){

      @barrier("local");

      for(int fld=0;fld<p_Nfields;++fld;@inner(2)){
	for(int j=0;j<p_Nq;++j;@inner(1)){
	  for(int i=0;i<p_Nq;++i;@inner(0)){
	    
	    // prefetch geometric factors
	    const dlong gbase = element*p_Nggeo*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;
	    
	    int f = fld;
	    
	    while(f<p_Nggeo){
	      s_ggeo[f][j][i] = ggeo[gbase+f*p_Np];
	      f += p_Nfields;
	    }

	    // share u(:,:,k)
	    s_q[fld][j][i] = r_q[k];
	    
	    r_qt = 0;
	    
#pragma unroll p_Nq
	    for(int m = 0; m < p_Nq; m++) {
	      r_qt += s_D[k][m]*r_q[m];
	    }
	  }
	}
      }

      for(int fld=0;fld<p_Nfields;++fld;@inner(2)){
	for(int j=0;j<p_Nq;++j;@inner(1)){
	  for(int i=0;i<p_Nq;++i;@inner(0)){
	    
	    dfloat qr = 0.f;
	    dfloat qs = 0.f;

#pragma unroll p_Nq
	    for(int m = 0; m < p_Nq; m++) {
	      qr += s_D[i][m]*s_q[fld][j][m];
	      qs += s_D[j][m]*s_q[fld][m][i];
	    }
	    
	    dfloat r_G00 = s_ggeo[p_G00ID][j][i];
	    dfloat r_G01 = s_ggeo[p_G01ID][j][i];
	    dfloat r_G02 = s_ggeo[p_G02ID][j][i];
	    dfloat r_G11 = s_ggeo[p_G11ID][j][i];
	    dfloat r_G12 = s_ggeo[p_G12ID][j][i];
	    dfloat r_G22 = s_ggeo[p_G22ID][j][i];
	    dfloat r_GwJ = s_ggeo[p_GWJID][j][i];
	    
	    s_Gqs[fld][j][i] = (r_G01*qr + r_G11*qs + r_G12*r_qt);
	    s_Gqr[fld][j][i] = (r_G00*qr + r_G01*qs + r_G02*r_qt);
	    
	    // put this here for a performance bump
	    r_Gqt = (r_G02*qr + r_G12*qs + r_G22*r_qt);
	    r_Auk = r_GwJ*lambda*r_q[k];
	  }
	}
      }
      
      for(int fld=0;fld<p_Nfields;++fld;@inner(2)){
	for(int j=0;j<p_Nq;++j;@inner(1)){
	  for(int i=0;i<p_Nq;++i;@inner(0)){
	    
#pragma unroll p_Nq
	    for(int m = 0; m < p_Nq; m++){
	      r_Auk   += s_D[m][j]*s_Gqs[fld][m][i];
	      r_Aq[m] += s_D[k][m]*r_Gqt; // DT(m,k)*ut(i,j,k,e)
	      r_Auk   += s_D[m][i]*s_Gqr[fld][j][m];
	    }
	    
	    r_Aq[k] += r_Auk;
	  }
	}
      }
    }
    
    // write out
    for(int fld=0;fld<p_Nfields;++fld;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
	for(int i=0;i<p_Nq;++i;@inner(0)){
#pragma unroll p_Nq
	  for(int k = 0; k < p_Nq; k++){
	    const dlong id = element*p_Np +k*p_Nq*p_Nq+ j*p_Nq + i + fld*offset;
	    if(e<Nelements){
	      Aq[id] = r_Aq[k];
	    }
	  }
	}
      }
    }
  }
}



@kernel void BP6Dot_v0(const dlong Nelements,
		    @restrict const dlong *elementList,
		    const dlong offset,
		    @restrict const  dfloat *  ggeo,
		    @restrict const  dfloat *  D,
		    const dfloat lambda,
		    @restrict const  dfloat *  q,
	              @restrict dfloat *  Aq,
		       @restrict dfloat *  qAq){

  for(dlong e=0; e<Nelements; ++e; @outer(0)){

    @shared dfloat s_D[p_Nq][p_Nq];
    @shared dfloat s_q[p_Nfields][p_Nq][p_Nq];

    @shared dfloat s_Gqr[p_Nfields][p_Nq][p_Nq];
    @shared dfloat s_Gqs[p_Nfields][p_Nq][p_Nq];

    @exclusive dfloat r_qt, r_Gqt, r_Auk;
    @exclusive dfloat r_q[p_Nq]; // register array to hold u(i,j,0:N) private to thread
    @exclusive dfloat r_Aq[p_Nq];// array for results Au(i,j,0:N)

    @shared dfloat s_ggeo[p_Nggeo][p_Nq][p_Nq];

    @exclusive dlong element;
    
    // array of threads
    for(int fld=0;fld<p_Nfields;++fld;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
	for(int i=0;i<p_Nq;++i;@inner(0)){
	  if(fld==0)
	    s_D[j][i] = D[p_Nq*j+i]; 
	  
	  element = elementList[e];
	  
	  // load pencil of u into register
	  const dlong base = i + j*p_Nq + element*p_Np + fld*offset;
	  for(int k = 0; k < p_Nq; k++) {
	    r_q[k] = q[base + k*p_Nq*p_Nq]; // prefetch operation
	    r_Aq[k] = 0.f; // zero the accumulator
	  }

	}
      }
    }
    
    
#pragma unroll p_Nq
    for(int k = 0;k < p_Nq; k++){

      @barrier("local");
      
      for(int fld=0;fld<p_Nfields;++fld;@inner(2)){
	for(int j=0;j<p_Nq;++j;@inner(1)){
	  for(int i=0;i<p_Nq;++i;@inner(0)){
	    
	    // prefetch geometric factors
	    const dlong gbase = element*p_Nggeo*p_Np + k*p_Nq*p_Nq + j*p_Nq + i;
	    
	    int f = fld;
	    
	    while(f<p_Nggeo){
	      s_ggeo[f][j][i] = ggeo[gbase+f*p_Np];
	      f += p_Nfields;
	    }

	    // share u(:,:,k)
	    s_q[fld][j][i] = r_q[k];
	    
	    r_qt = 0;
	    
#pragma unroll p_Nq
	    for(int m = 0; m < p_Nq; m++) {
	      r_qt += s_D[k][m]*r_q[m];
	    }
	  }
	}
      }

      for(int fld=0;fld<p_Nfields;++fld;@inner(2)){
	for(int j=0;j<p_Nq;++j;@inner(1)){
	  for(int i=0;i<p_Nq;++i;@inner(0)){
	    
	    dfloat qr = 0.f;
	    dfloat qs = 0.f;

#pragma unroll p_Nq
	    for(int m = 0; m < p_Nq; m++) {
	      qr += s_D[i][m]*s_q[fld][j][m];
	      qs += s_D[j][m]*s_q[fld][m][i];
	    }
	    
	    dfloat r_G00 = s_ggeo[p_G00ID][j][i];
	    dfloat r_G01 = s_ggeo[p_G01ID][j][i];
	    dfloat r_G02 = s_ggeo[p_G02ID][j][i];
	    dfloat r_G11 = s_ggeo[p_G11ID][j][i];
	    dfloat r_G12 = s_ggeo[p_G12ID][j][i];
	    dfloat r_G22 = s_ggeo[p_G22ID][j][i];
	    dfloat r_GwJ = s_ggeo[p_GWJID][j][i];
	    
	    s_Gqs[fld][j][i] = (r_G01*qr + r_G11*qs + r_G12*r_qt);
	    s_Gqr[fld][j][i] = (r_G00*qr + r_G01*qs + r_G02*r_qt);
	    
	    // put this here for a performance bump
	    r_Gqt = (r_G02*qr + r_G12*qs + r_G22*r_qt);
	    r_Auk = r_GwJ*lambda*r_q[k];
	  }
	}
      }
      
      for(int fld=0;fld<p_Nfields;++fld;@inner(2)){
	for(int j=0;j<p_Nq;++j;@inner(1)){
	  for(int i=0;i<p_Nq;++i;@inner(0)){
	    
#pragma unroll p_Nq
	    for(int m = 0; m < p_Nq; m++){
	      r_Auk   += s_D[m][j]*s_Gqs[fld][m][i];
	      r_Aq[m] += s_D[k][m]*r_Gqt; // DT(m,k)*ut(i,j,k,e)
	      r_Auk   += s_D[m][i]*s_Gqr[fld][j][m];
	    }
	    
	    r_Aq[k] += r_Auk;
	  }
	}
      }
    }

#define p_Nthr (p_Nfields*p_Nq*p_Nq)
#define p_Nwarps (((p_Nthr)+31)/32)

    @shared volatile dfloat s_warp[p_Nwarps];
    @shared volatile dfloat s_qAq[p_Nthr];
    
    // write out
    for(int fld=0;fld<p_Nfields;++fld;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
	for(int i=0;i<p_Nq;++i;@inner(0)){
	  dfloat r_qAq = 0;

#pragma unroll p_Nq
	  for(int k = 0; k < p_Nq; k++){
	    const dlong id = element*p_Np +k*p_Nq*p_Nq+ j*p_Nq + i + fld*offset;
	    if(e<Nelements){
	      Aq[id] = r_Aq[k];
	      r_qAq += r_q[k]*r_Aq[k];
	    }
	  }

	  s_qAq[fld*p_Nq*p_Nq + j*p_Nq + i] = r_qAq;
	}
      }
    }
    
    for(int fld=0;fld<p_Nfields;++fld;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
	for(int i=0;i<p_Nq;++i;@inner(0)){
	  
	  int r_t = fld*p_Nq*p_Nq + j*p_Nq + i;
	  int r_n = r_t%32;
	  int r_w = r_t/32;

	  if(r_n<16 && r_t+16<p_Nthr) s_qAq[r_t] += s_qAq[r_t+16];
	  if(r_n< 8 && r_t+ 8<p_Nthr) s_qAq[r_t] += s_qAq[r_t+ 8];
	  if(r_n< 4 && r_t+ 4<p_Nthr) s_qAq[r_t] += s_qAq[r_t+ 4];
	  if(r_n< 2 && r_t+ 2<p_Nthr) s_qAq[r_t] += s_qAq[r_t+ 2];
	  if(r_n< 1 && r_t+ 1<p_Nthr) s_qAq[r_t] += s_qAq[r_t+ 1];

	  if(r_n==0) s_warp[r_w] = s_qAq[r_t];
	}
      }
    }

    for(int fld=0;fld<p_Nfields;++fld;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
	for(int i=0;i<p_Nq;++i;@inner(0)){

	  int r_t = fld*p_Nq*p_Nq + j*p_Nq + i;
	  int r_n = r_t%32;
	  int r_w = r_t/32;

	  if(r_w==0 && r_t<p_Nwarps){

	    if(r_t<16 && r_t+16<p_Nwarps) s_warp[r_t] += s_warp[r_t+16];
	    if(r_t< 8 && r_t+ 8<p_Nwarps) s_warp[r_t] += s_warp[r_t+8];
	    if(r_t< 4 && r_t+ 4<p_Nwarps) s_warp[r_t] += s_warp[r_t+4];
	    if(r_t< 2 && r_t+ 2<p_Nwarps) s_warp[r_t] += s_warp[r_t+2];
	    if(r_t< 1 && r_t+ 1<p_Nwarps) s_warp[r_t] += s_warp[r_t+1];
	    
	    if(r_t==0){
	      dfloat res = s_warp[0];
	      atomicAdd(qAq, res);
	    }
	  }
	}
      }
    }
  }
}


#define cubeThreads				\
  for(int k=0;k<p_Nq;++k;@inner(2))		\
    for(int j=0;j<p_Nq;++j;@inner(1))		\
      for(int i=0;i<p_Nq;++i;@inner(0))		

@kernel void BP6_v1(const dlong Nelements,
		    @restrict const dlong *elementList,
		    const dlong offset,
		    @restrict const dfloat *ggeo,
		    @restrict const dfloat *D,
		    const dfloat lambda,
		    @restrict const dfloat *q,
		    @restrict dfloat * Aq){
  
  for(int e=0;e<Nelements;++e;@outer(0)){
  
    @shared dfloat s_D[p_Nq][p_Nq];
    @shared dfloat s_U[p_Nq][p_Nq][p_Nq];
    @shared dfloat s_V[p_Nq][p_Nq][p_Nq];
    @shared dfloat s_W[p_Nq][p_Nq][p_Nq];
    
    @exclusive dfloat r_AU, r_GUr, r_GUs, r_GUt;
    @exclusive dfloat r_AV, r_GVr, r_GVs, r_GVt;
    @exclusive dfloat r_AW, r_GWr, r_GWs, r_GWt;

    @exclusive dlong element;
    
    cubeThreads{
	  
      if(k==0)
	s_D[j][i] = D[j*p_Nq+i];
      
      element = elementList[e];
      
      int id = i + j*p_Nq + k*p_Nq*p_Nq + element*p_Np;
      
      s_U[k][j][i] = q[id+0*offset];
      s_V[k][j][i] = q[id+1*offset];
      s_W[k][j][i] = q[id+2*offset];
      
    }

    
    cubeThreads{
	  
      // prefetch geometric factors
      const int gbase = element*p_Nggeo*p_Np + i + j*p_Nq + k*p_Nq*p_Nq;

      dfloat GWJ = ggeo[gbase+p_GWJID*p_Np];	  
      dfloat G00 = ggeo[gbase+p_G00ID*p_Np];
      dfloat G01 = ggeo[gbase+p_G01ID*p_Np];
      dfloat G02 = ggeo[gbase+p_G02ID*p_Np];
      dfloat G11 = ggeo[gbase+p_G11ID*p_Np];
      dfloat G12 = ggeo[gbase+p_G12ID*p_Np];
      dfloat G22 = ggeo[gbase+p_G22ID*p_Np];
      
      dfloat Ur = 0.f, Vr = 0.f, Wr = 0.f;
      dfloat Us = 0.f, Vs = 0.f, Ws = 0.f;
      dfloat Ut = 0.f, Vt = 0.f, Wt = 0.f;

      r_AU = GWJ*lambda*s_U[k][j][i];
      r_AV = GWJ*lambda*s_V[k][j][i];
      r_AW = GWJ*lambda*s_W[k][j][i];
      
#pragma unroll p_Nq
      for(int m = 0; m < p_Nq; m++) {
	dfloat Dim = s_D[i][m];
	dfloat Djm = s_D[j][m];
	dfloat Dkm = s_D[k][m];
	Ur += Dim*s_U[k][j][m];
	Us += Djm*s_U[k][m][i];
	Ut += Dkm*s_U[m][j][i];
	Vr += Dim*s_V[k][j][m];
	Vs += Djm*s_V[k][m][i];
	Vt += Dkm*s_V[m][j][i];
	Wr += Dim*s_W[k][j][m];
	Ws += Djm*s_W[k][m][i];
	Wt += Dkm*s_W[m][j][i];
      }
      
      r_GUr = (G00*Ur + G01*Us + G02*Ut);
      r_GUs = (G01*Ur + G11*Us + G12*Ut);
      r_GUt = (G02*Ur + G12*Us + G22*Ut);

      r_GVr = (G00*Vr + G01*Vs + G02*Vt);
      r_GVs = (G01*Vr + G11*Vs + G12*Vt);
      r_GVt = (G02*Vr + G12*Vs + G22*Vt);

      r_GWr = (G00*Wr + G01*Ws + G02*Wt);
      r_GWs = (G01*Wr + G11*Ws + G12*Wt);
      r_GWt = (G02*Wr + G12*Ws + G22*Wt);
    }
    
    cubeThreads{
      s_U[k][j][i] = r_GUr;
      s_V[k][j][i] = r_GVr;
      s_W[k][j][i] = r_GWr;
    }
    
    cubeThreads{
#pragma unroll p_Nq
      for(int m = 0; m < p_Nq; m++){
	dfloat Dmi = s_D[m][i];
	r_AU += Dmi*s_U[k][j][m];
	r_AV += Dmi*s_V[k][j][m];
	r_AW += Dmi*s_W[k][j][m];
      }
    }

    cubeThreads{
      s_U[k][j][i] = r_GUs;
      s_V[k][j][i] = r_GVs;
      s_W[k][j][i] = r_GWs;
    }


    cubeThreads{
#pragma unroll p_Nq
      for(int m = 0; m < p_Nq; m++){
	dfloat Dmj = s_D[m][j];
	r_AU += Dmj*s_U[k][m][i];
	r_AV += Dmj*s_V[k][m][i];
	r_AW += Dmj*s_W[k][m][i];
      }
    }

    cubeThreads{
      s_U[k][j][i] = r_GUt;
      s_V[k][j][i] = r_GVt;
      s_W[k][j][i] = r_GWt;
    }

    cubeThreads{
#pragma unroll p_Nq
      for(int m = 0; m < p_Nq; m++){
	dfloat Dmk = s_D[m][k];
	r_AU += Dmk*s_U[m][j][i];
	r_AV += Dmk*s_V[m][j][i];
	r_AW += Dmk*s_W[m][j][i];
      }

      int id = i + j*p_Nq + k*p_Nq*p_Nq + element*p_Np;
      Aq[id+0*offset] = r_AU;
      Aq[id+1*offset] = r_AV;
      Aq[id+2*offset] = r_AW;
    }
  }
  
}


